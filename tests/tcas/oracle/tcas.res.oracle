[kernel] preprocessing with "gcc -C -E -I.  tests/tcas/tcas.c"
[stady:generated-pl] :- module(test_parameters).
                     :- import create_input_val/3 from substitution.
                     :- export dom/4.
                     :- export create_input_vals/2.
                     :- export unquantif_preconds/2.
                     :- export quantif_preconds/2.
                     :- export strategy/2.
                     :- export precondition_of/2.
                     
                     dom(0,0,0,0).
[stady:generated-pl] dom('pathcrawler__entry_point_precond',A,B,C) :- dom('entry_point',A,B,C).
[stady:generated-pl] create_input_vals('entry_point', Ins):-
[stady:generated-pl] create_input_val('two_of_three_reports_valid', int([-2147483648..2147483647]),Ins),
[stady:generated-pl] create_input_val('own_tracked_alt', int([-2147483648..2147483647]),Ins),
[stady:generated-pl] create_input_val('other_tracked_alt', int([-2147483648..2147483647]),Ins),
[stady:generated-pl] create_input_val('alt_layer_value', int([-2147483648..2147483647]),Ins),
[stady:generated-pl] create_input_val('up_separation', int([-2147483648..2147483647]),Ins),
[stady:generated-pl] create_input_val('down_separation', int([-2147483648..2147483647]),Ins),
[stady:generated-pl] create_input_val('other_rac', int([-2147483648..2147483647]),Ins),
[stady:generated-pl] true.
[stady:generated-pl] create_input_vals('pathcrawler__entry_point_precond',Ins) :- create_input_vals('entry_point',Ins).
[stady:generated-pl] quantif_preconds('entry_point',[]).
[stady:generated-pl] quantif_preconds('pathcrawler__entry_point_precond',A) :- quantif_preconds('entry_point',A).
[stady:generated-pl] unquantif_preconds('entry_point',[cond(infegal,'two_of_three_reports_valid',1,pre), cond(infegal,0,'two_of_three_reports_valid',pre), cond(infegal,'other_rac',2,pre), cond(infegal,0,'other_rac',pre), cond(inf,'alt_layer_value',4,pre), cond(infegal,0,'alt_layer_value',pre), cond(infegal,'own_tracked_alt',1000,pre), cond(infegal,300,'own_tracked_alt',pre), cond(infegal,'other_tracked_alt',1000,pre), cond(infegal,300,'other_tracked_alt',pre)]).
[stady:generated-pl] unquantif_preconds('pathcrawler__entry_point_precond',A) :- unquantif_preconds('entry_point',A).
[stady:generated-pl] strategy('entry_point',[]).
[stady:generated-pl] strategy('pathcrawler__entry_point_precond',A) :- strategy('entry_point',A).
[stady:generated-pl] precondition_of('entry_point','pathcrawler__entry_point_precond').
[stady:generated-c] generated C file:
/* Generated by Frama-C */
extern int pathcrawler_assert_exception(char*,int);
extern int pathcrawler_dimension(void*);
extern void pathcrawler_to_framac(char*);
int Cur_Vertical_Sep = 16684;
int High_Confidence = 32767;
int Two_of_Three_Reports_Valid;
int Own_Tracked_Alt;
int Own_Tracked_Alt_Rate = 450;
int Other_Tracked_Alt;
int Alt_Layer_Value;
int Positive_RA_Alt_Thresh[4] = {16434, 0, 0, 0};
int Up_Separation;
int Down_Separation;
int Other_RAC;
int Other_Capability = 0;
int Climb_Inhibit = 1;
int Own_Below_Threat(void)
{
  int old_Climb_Inhibit = Climb_Inhibit;
  int old_Other_Capability = Other_Capability;
  int old_Other_RAC = Other_RAC;
  int old_Down_Separation = Down_Separation;
  int old_Up_Separation = Up_Separation;
  int *old_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  int *old_ptr_Positive_RA_Alt_Thresh;
  old_ptr_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  int old_Alt_Layer_Value = Alt_Layer_Value;
  int old_Other_Tracked_Alt = Other_Tracked_Alt;
  int old_Own_Tracked_Alt_Rate = Own_Tracked_Alt_Rate;
  int old_Own_Tracked_Alt = Own_Tracked_Alt;
  int old_Two_of_Three_Reports_Valid = Two_of_Three_Reports_Valid;
  int old_High_Confidence = High_Confidence;
  int old_Cur_Vertical_Sep = Cur_Vertical_Sep;
  {
    int __retres;
    __retres = Own_Tracked_Alt < Other_Tracked_Alt;
    return __retres;
  }
}

int Own_Above_Threat(void)
{
  int old_Climb_Inhibit = Climb_Inhibit;
  int old_Other_Capability = Other_Capability;
  int old_Other_RAC = Other_RAC;
  int old_Down_Separation = Down_Separation;
  int old_Up_Separation = Up_Separation;
  int *old_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  int *old_ptr_Positive_RA_Alt_Thresh;
  old_ptr_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  int old_Alt_Layer_Value = Alt_Layer_Value;
  int old_Other_Tracked_Alt = Other_Tracked_Alt;
  int old_Own_Tracked_Alt_Rate = Own_Tracked_Alt_Rate;
  int old_Own_Tracked_Alt = Own_Tracked_Alt;
  int old_Two_of_Three_Reports_Valid = Two_of_Three_Reports_Valid;
  int old_High_Confidence = High_Confidence;
  int old_Cur_Vertical_Sep = Cur_Vertical_Sep;
  {
    int __retres;
    __retres = Other_Tracked_Alt < Own_Tracked_Alt;
    return __retres;
  }
}

int ALIM(void)
{
  int old_Climb_Inhibit = Climb_Inhibit;
  int old_Other_Capability = Other_Capability;
  int old_Other_RAC = Other_RAC;
  int old_Down_Separation = Down_Separation;
  int old_Up_Separation = Up_Separation;
  int *old_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  int *old_ptr_Positive_RA_Alt_Thresh;
  old_ptr_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  int old_Alt_Layer_Value = Alt_Layer_Value;
  int old_Other_Tracked_Alt = Other_Tracked_Alt;
  int old_Own_Tracked_Alt_Rate = Own_Tracked_Alt_Rate;
  int old_Own_Tracked_Alt = Own_Tracked_Alt;
  int old_Two_of_Three_Reports_Valid = Two_of_Three_Reports_Valid;
  int old_High_Confidence = High_Confidence;
  int old_Cur_Vertical_Sep = Cur_Vertical_Sep;
  {
    int __retres;
    __retres = Positive_RA_Alt_Thresh[Alt_Layer_Value];
    return __retres;
  }
}

int Inhibit_Biased_Climb(void)
{
  int old_Climb_Inhibit = Climb_Inhibit;
  int old_Other_Capability = Other_Capability;
  int old_Other_RAC = Other_RAC;
  int old_Down_Separation = Down_Separation;
  int old_Up_Separation = Up_Separation;
  int *old_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  int *old_ptr_Positive_RA_Alt_Thresh;
  old_ptr_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  int old_Alt_Layer_Value = Alt_Layer_Value;
  int old_Other_Tracked_Alt = Other_Tracked_Alt;
  int old_Own_Tracked_Alt_Rate = Own_Tracked_Alt_Rate;
  int old_Own_Tracked_Alt = Own_Tracked_Alt;
  int old_Two_of_Three_Reports_Valid = Two_of_Three_Reports_Valid;
  int old_High_Confidence = High_Confidence;
  int old_Cur_Vertical_Sep = Cur_Vertical_Sep;
  {
    int tmp;
    if (Climb_Inhibit) { pathcrawler_to_framac("@FC:REACHABLE_STMT:12");
                       tmp = Up_Separation + 100; }
                       
    else { pathcrawler_to_framac("@FC:REACHABLE_STMT:13");
         tmp = Up_Separation; }
         
    return tmp;
  }
}

int Non_Crossing_Biased_Climb(void)
{
  int old_Climb_Inhibit = Climb_Inhibit;
  int old_Other_Capability = Other_Capability;
  int old_Other_RAC = Other_RAC;
  int old_Down_Separation = Down_Separation;
  int old_Up_Separation = Up_Separation;
  int *old_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  int *old_ptr_Positive_RA_Alt_Thresh;
  old_ptr_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  int old_Alt_Layer_Value = Alt_Layer_Value;
  int old_Other_Tracked_Alt = Other_Tracked_Alt;
  int old_Own_Tracked_Alt_Rate = Own_Tracked_Alt_Rate;
  int old_Own_Tracked_Alt = Own_Tracked_Alt;
  int old_Two_of_Three_Reports_Valid = Two_of_Three_Reports_Valid;
  int old_High_Confidence = High_Confidence;
  int old_Cur_Vertical_Sep = Cur_Vertical_Sep;
  {
    int upward_preferred;
    int result;
    int tmp;
    {
      /*sequence*/
      tmp = Inhibit_Biased_Climb();
      upward_preferred = tmp > Down_Separation;
    }
    if (upward_preferred) {
      int tmp_3;
      int tmp_0;
      { pathcrawler_to_framac("@FC:REACHABLE_STMT:21");
      {
        /*sequence*/
        tmp_0 = Own_Below_Threat();
        if (tmp_0) {
          int tmp_1;
          { pathcrawler_to_framac("@FC:REACHABLE_STMT:25");
          tmp_1 = Own_Below_Threat(); }
          
          if (tmp_1) {
            int tmp_2;
            { pathcrawler_to_framac("@FC:REACHABLE_STMT:27");
            {
              /*sequence*/
              tmp_2 = ALIM();
              ;
            } }
            
            if (Down_Separation >= tmp_2) { pathcrawler_to_framac("@FC:REACHABLE_STMT:31");
                                          tmp_3 = 0; }
                                          
            else { pathcrawler_to_framac("@FC:REACHABLE_STMT:32");
                 tmp_3 = 1; }
                 
          }
          else { pathcrawler_to_framac("@FC:REACHABLE_STMT:33");
               tmp_3 = 0; }
               
        }
        else { pathcrawler_to_framac("@FC:REACHABLE_STMT:34");
             tmp_3 = 1; }
             
        result = tmp_3;
      } }
      
    }
    else {
      int tmp_6;
      int tmp_4;
      { pathcrawler_to_framac("@FC:REACHABLE_STMT:36");
      {
        /*sequence*/
        tmp_4 = Own_Above_Threat();
        if (tmp_4) 
          { pathcrawler_to_framac("@FC:REACHABLE_STMT:41");
          if (Cur_Vertical_Sep >= 300) {
            int tmp_5;
            { pathcrawler_to_framac("@FC:REACHABLE_STMT:42");
            {
              /*sequence*/
              tmp_5 = ALIM();
              ;
            } }
            
            if (Up_Separation >= tmp_5) { pathcrawler_to_framac("@FC:REACHABLE_STMT:46");
                                        tmp_6 = 1; }
                                        
            else { pathcrawler_to_framac("@FC:REACHABLE_STMT:47");
                 tmp_6 = 0; }
                 
          }
          else { pathcrawler_to_framac("@FC:REACHABLE_STMT:48");
               tmp_6 = 0; }
                }
          
        else { pathcrawler_to_framac("@FC:REACHABLE_STMT:49");
             tmp_6 = 0; }
             
        result = tmp_6;
      } }
      
    }
    return result;
  }
}

int Non_Crossing_Biased_Descend(void)
{
  int old_Climb_Inhibit = Climb_Inhibit;
  int old_Other_Capability = Other_Capability;
  int old_Other_RAC = Other_RAC;
  int old_Down_Separation = Down_Separation;
  int old_Up_Separation = Up_Separation;
  int *old_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  int *old_ptr_Positive_RA_Alt_Thresh;
  old_ptr_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  int old_Alt_Layer_Value = Alt_Layer_Value;
  int old_Other_Tracked_Alt = Other_Tracked_Alt;
  int old_Own_Tracked_Alt_Rate = Own_Tracked_Alt_Rate;
  int old_Own_Tracked_Alt = Own_Tracked_Alt;
  int old_Two_of_Three_Reports_Valid = Two_of_Three_Reports_Valid;
  int old_High_Confidence = High_Confidence;
  int old_Cur_Vertical_Sep = Cur_Vertical_Sep;
  {
    int upward_preferred;
    int result;
    int tmp;
    {
      /*sequence*/
      tmp = Inhibit_Biased_Climb();
      upward_preferred = tmp > Down_Separation;
    }
    if (upward_preferred) {
      int tmp_2;
      int tmp_0;
      { pathcrawler_to_framac("@FC:REACHABLE_STMT:59");
      {
        /*sequence*/
        tmp_0 = Own_Below_Threat();
        if (tmp_0) 
          { pathcrawler_to_framac("@FC:REACHABLE_STMT:64");
          if (Cur_Vertical_Sep >= 300) {
            int tmp_1;
            { pathcrawler_to_framac("@FC:REACHABLE_STMT:65");
            {
              /*sequence*/
              tmp_1 = ALIM();
              ;
            } }
            
            if (Down_Separation >= tmp_1) { pathcrawler_to_framac("@FC:REACHABLE_STMT:69");
                                          tmp_2 = 1; }
                                          
            else { pathcrawler_to_framac("@FC:REACHABLE_STMT:70");
                 tmp_2 = 0; }
                 
          }
          else { pathcrawler_to_framac("@FC:REACHABLE_STMT:71");
               tmp_2 = 0; }
                }
          
        else { pathcrawler_to_framac("@FC:REACHABLE_STMT:72");
             tmp_2 = 0; }
             
        result = tmp_2;
      } }
      
    }
    else {
      int tmp_6;
      int tmp_3;
      { pathcrawler_to_framac("@FC:REACHABLE_STMT:74");
      {
        /*sequence*/
        tmp_3 = Own_Above_Threat();
        if (tmp_3) {
          int tmp_4;
          { pathcrawler_to_framac("@FC:REACHABLE_STMT:78");
          tmp_4 = Own_Above_Threat(); }
          
          if (tmp_4) {
            int tmp_5;
            { pathcrawler_to_framac("@FC:REACHABLE_STMT:80");
            {
              /*sequence*/
              tmp_5 = ALIM();
              ;
            } }
            
            if (Up_Separation >= tmp_5) { pathcrawler_to_framac("@FC:REACHABLE_STMT:84");
                                        tmp_6 = 1; }
                                        
            else { pathcrawler_to_framac("@FC:REACHABLE_STMT:85");
                 tmp_6 = 0; }
                 
          }
          else { pathcrawler_to_framac("@FC:REACHABLE_STMT:86");
               tmp_6 = 0; }
               
        }
        else { pathcrawler_to_framac("@FC:REACHABLE_STMT:87");
             tmp_6 = 1; }
             
        result = tmp_6;
      } }
      
    }
    return result;
  }
}

int alt_sep_test(void)
{
  int old_Climb_Inhibit = Climb_Inhibit;
  int old_Other_Capability = Other_Capability;
  int old_Other_RAC = Other_RAC;
  int old_Down_Separation = Down_Separation;
  int old_Up_Separation = Up_Separation;
  int *old_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  int *old_ptr_Positive_RA_Alt_Thresh;
  old_ptr_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  int old_Alt_Layer_Value = Alt_Layer_Value;
  int old_Other_Tracked_Alt = Other_Tracked_Alt;
  int old_Own_Tracked_Alt_Rate = Own_Tracked_Alt_Rate;
  int old_Own_Tracked_Alt = Own_Tracked_Alt;
  int old_Two_of_Three_Reports_Valid = Two_of_Three_Reports_Valid;
  int old_High_Confidence = High_Confidence;
  int old_Cur_Vertical_Sep = Cur_Vertical_Sep;
  {
    int enabled;
    int tcas_equipped;
    int intent_not_known;
    int need_upward_RA;
    int need_downward_RA;
    int alt_sep;
    int tmp;
    int tmp_0;
    need_upward_RA = 0;
    need_downward_RA = 0;
    {
      /*sequence*/
      if (High_Confidence) 
        { pathcrawler_to_framac("@FC:REACHABLE_STMT:99");
        if (Own_Tracked_Alt_Rate <= 600) 
          { pathcrawler_to_framac("@FC:REACHABLE_STMT:101");
          if (Cur_Vertical_Sep > 600) { pathcrawler_to_framac("@FC:REACHABLE_STMT:102");
                                      tmp = 1; }
                                      
          else { pathcrawler_to_framac("@FC:REACHABLE_STMT:103");
               tmp = 0; }
                }
          
        else { pathcrawler_to_framac("@FC:REACHABLE_STMT:104");
             tmp = 0; }
              }
        
      else { pathcrawler_to_framac("@FC:REACHABLE_STMT:105");
           tmp = 0; }
           
      enabled = tmp;
    }
    tcas_equipped = Other_Capability == 1;
    {
      /*sequence*/
      if (Two_of_Three_Reports_Valid) 
        { pathcrawler_to_framac("@FC:REACHABLE_STMT:113");
        if (Other_RAC == 0) { pathcrawler_to_framac("@FC:REACHABLE_STMT:114");
                            tmp_0 = 1; }
                            
        else { pathcrawler_to_framac("@FC:REACHABLE_STMT:115");
             tmp_0 = 0; }
              }
        
      else { pathcrawler_to_framac("@FC:REACHABLE_STMT:116");
           tmp_0 = 0; }
           
      intent_not_known = tmp_0;
    }
    alt_sep = 0;
    if (enabled) 
      { pathcrawler_to_framac("@FC:REACHABLE_STMT:122");
      if (tcas_equipped) {
        { pathcrawler_to_framac("@FC:REACHABLE_STMT:124");
        if (intent_not_known) { pathcrawler_to_framac("@FC:REACHABLE_STMT:125");
                              goto _LOR; }
                              
        else { pathcrawler_to_framac("@FC:REACHABLE_STMT:126");
             goto _LAND_0; }
              }
        
      }
      else 
        _LAND_0:
          { pathcrawler_to_framac("@FC:REACHABLE_STMT:127");
          if (! tcas_equipped) {
            _LOR:
              { pathcrawler_to_framac("@FC:REACHABLE_STMT:128");
              {
                int tmp_3;
                int tmp_1;
                int tmp_6;
                int tmp_4;
                {
                  /*sequence*/
                  tmp_1 = Non_Crossing_Biased_Climb();
                  if (tmp_1) {
                    int tmp_2;
                    { pathcrawler_to_framac("@FC:REACHABLE_STMT:133");
                    tmp_2 = Own_Below_Threat(); }
                    
                    if (tmp_2) { pathcrawler_to_framac("@FC:REACHABLE_STMT:135");
                               tmp_3 = 1; }
                               
                    else { pathcrawler_to_framac("@FC:REACHABLE_STMT:136");
                         tmp_3 = 0; }
                         
                  }
                  else { pathcrawler_to_framac("@FC:REACHABLE_STMT:137");
                       tmp_3 = 0; }
                       
                  need_upward_RA = tmp_3;
                }
                {
                  /*sequence*/
                  tmp_4 = Non_Crossing_Biased_Descend();
                  if (tmp_4) {
                    int tmp_5;
                    { pathcrawler_to_framac("@FC:REACHABLE_STMT:143");
                    tmp_5 = Own_Above_Threat(); }
                    
                    if (tmp_5) { pathcrawler_to_framac("@FC:REACHABLE_STMT:145");
                               tmp_6 = 1; }
                               
                    else { pathcrawler_to_framac("@FC:REACHABLE_STMT:146");
                         tmp_6 = 0; }
                         
                  }
                  else { pathcrawler_to_framac("@FC:REACHABLE_STMT:147");
                       tmp_6 = 0; }
                       
                  need_downward_RA = tmp_6;
                }
                if (need_upward_RA) {
                  { pathcrawler_to_framac("@FC:REACHABLE_STMT:152");
                  if (need_downward_RA) { pathcrawler_to_framac("@FC:REACHABLE_STMT:153");
                                        alt_sep = 0; }
                                        
                  else { pathcrawler_to_framac("@FC:REACHABLE_STMT:154");
                       goto _LAND; }
                        }
                  
                }
                else {
                  _LAND:
                    { pathcrawler_to_framac("@FC:REACHABLE_STMT:155");
                    ; }
                    
                  if (need_upward_RA) { pathcrawler_to_framac("@FC:REACHABLE_STMT:157");
                                      alt_sep = 1; }
                                      
                  else 
                    { pathcrawler_to_framac("@FC:REACHABLE_STMT:159");
                    if (need_downward_RA) { pathcrawler_to_framac("@FC:REACHABLE_STMT:160");
                                          alt_sep = 2; }
                                          
                    else { pathcrawler_to_framac("@FC:REACHABLE_STMT:161");
                         alt_sep = 0; }
                          }
                    
                }
              } }
              
          } }
           }
      
    return alt_sep;
  }
}

int entry_point_precond(int two_of_three_reports_valid, int own_tracked_alt,
                        int other_tracked_alt, int alt_layer_value,
                        int up_separation, int down_separation, int other_rac)
{
return 1;
}

int entry_point(int two_of_three_reports_valid, int own_tracked_alt,
                int other_tracked_alt, int alt_layer_value,
                int up_separation, int down_separation, int other_rac)
{
  int old_Climb_Inhibit = Climb_Inhibit;
  int old_Other_Capability = Other_Capability;
  int old_Other_RAC = Other_RAC;
  int old_Down_Separation = Down_Separation;
  int old_Up_Separation = Up_Separation;
  int *old_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  int *old_ptr_Positive_RA_Alt_Thresh;
  old_ptr_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  int old_Alt_Layer_Value = Alt_Layer_Value;
  int old_Other_Tracked_Alt = Other_Tracked_Alt;
  int old_Own_Tracked_Alt_Rate = Own_Tracked_Alt_Rate;
  int old_Own_Tracked_Alt = Own_Tracked_Alt;
  int old_Two_of_Three_Reports_Valid = Two_of_Three_Reports_Valid;
  int old_High_Confidence = High_Confidence;
  int old_Cur_Vertical_Sep = Cur_Vertical_Sep;
  int old_two_of_three_reports_valid = two_of_three_reports_valid;
  int old_own_tracked_alt = own_tracked_alt;
  int old_other_tracked_alt = other_tracked_alt;
  int old_alt_layer_value = alt_layer_value;
  int old_up_separation = up_separation;
  int old_down_separation = down_separation;
  int old_other_rac = other_rac;
  {
    int tmp;
    Two_of_Three_Reports_Valid = two_of_three_reports_valid;
    Own_Tracked_Alt = own_tracked_alt;
    Other_Tracked_Alt = other_tracked_alt;
    Alt_Layer_Value = alt_layer_value;
    Up_Separation = up_separation;
    Down_Separation = down_separation;
    Other_RAC = other_rac;
    tmp = alt_sep_test();
    {
      if ((up_separation >= (Positive_RA_Alt_Thresh)[alt_layer_value]) && (down_separation < (Positive_RA_Alt_Thresh)[alt_layer_value]) && 1) {
        if(!(tmp != 2))pathcrawler_assert_exception("Post-condition!", 2);
        }
      if ((up_separation < (Positive_RA_Alt_Thresh)[alt_layer_value]) && (down_separation >= (Positive_RA_Alt_Thresh)[alt_layer_value]) && 1) {
        if(!(tmp != 1))pathcrawler_assert_exception("Post-condition!", 41);
        }
      if ((up_separation < (Positive_RA_Alt_Thresh)[alt_layer_value]) && (down_separation < (Positive_RA_Alt_Thresh)[alt_layer_value]) && (up_separation > down_separation) && 1) {
        if(!(tmp != 2))pathcrawler_assert_exception("Post-condition!", 34);
        }
      if ((up_separation < (Positive_RA_Alt_Thresh)[alt_layer_value]) && (down_separation < (Positive_RA_Alt_Thresh)[alt_layer_value]) && (up_separation < down_separation) && 1) {
        if(!(tmp != 1))pathcrawler_assert_exception("Post-condition!", 39);
        }
      if ((up_separation >= (Positive_RA_Alt_Thresh)[alt_layer_value]) && (down_separation >= (Positive_RA_Alt_Thresh)[alt_layer_value]) && (own_tracked_alt > other_tracked_alt) && 1) {
        if(!(tmp != 2))pathcrawler_assert_exception("Post-condition!", 44);
        }
      if ((up_separation >= (Positive_RA_Alt_Thresh)[alt_layer_value]) && (down_separation >= (Positive_RA_Alt_Thresh)[alt_layer_value]) && (own_tracked_alt < other_tracked_alt) && 1) {
        if(!(tmp != 1))pathcrawler_assert_exception("Post-condition!", 3);
        }
      if ((own_tracked_alt > other_tracked_alt) && 1) {
        if(!(tmp != 2))pathcrawler_assert_exception("Post-condition!", 11);
        }
      if ((own_tracked_alt < other_tracked_alt) && 1) {
        if(!(tmp != 1))pathcrawler_assert_exception("Post-condition!", 35);
        }
      if ((up_separation > down_separation) && 1) {
        if(!(tmp != 2))pathcrawler_assert_exception("Post-condition!", 16);
        }
      if ((up_separation < down_separation) && 1) {
        if(!(tmp != 1))pathcrawler_assert_exception("Post-condition!", 40);
        }
      
      }
    return tmp;
  }
}


[kernel] preprocessing with "gcc -C -E -I.  stady_temp.c"
[kernel] preprocessing with "gcc -C -E -I. -include /usr/local/share/frama-c/pc/lib/lanceur_deb.h stady_temp.c"
[pc] analyzing...
[pc] Compiling pathcrawler_stady_temp/lanceur_entry_point utilities ...
[pc] Compiling pathcrawler_stady_temp/lanceur_entry_point ...
[pc] generating tests...
[pc] Starting lanceur_entry_point (isc version)
[pc] Starting lanceur_pathcrawler__entry_point_precond (isc version)
[pc] Starting lanceur_entry_point (isc version)
[pc] Starting lanceur_entry_point (isc version)
[pc] Starting lanceur_entry_point (isc version)
[pc] Starting lanceur_entry_point (isc version)
[pc] Starting lanceur_entry_point (isc version)
[pc] Starting lanceur_entry_point (isc version)
[pc] Starting lanceur_entry_point (isc version)
[pc] Starting lanceur_entry_point (isc version)
[pc] Starting lanceur_entry_point (isc version)
[pc] Starting lanceur_entry_point (isc version)
[pc] Starting lanceur_entry_point (isc version)
[pc] Starting lanceur_entry_point (isc version)
[pc] Starting lanceur_entry_point (isc version)
[pc] Starting lanceur_entry_point (isc version)
[pc] Starting lanceur_entry_point (isc version)
[pc] Starting lanceur_entry_point (isc version)
[pc] Starting lanceur_entry_point (isc version)
[pc] Starting lanceur_entry_point (isc version)
[pc] generation finished
[stady] all-paths: false
[stady] 1219 test cases
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'entry_point'
--------------------------------------------------------------------------------

[   Bug   ] Post-condition for 'P1a' (file tests/tcas/tcas.c, line 116)
            by StaDy.
[   Bug   ] Post-condition for 'P2b' (file tests/tcas/tcas.c, line 130)
            by StaDy.
[   Bug   ] Post-condition for 'P3a' (file tests/tcas/tcas.c, line 135)
            by StaDy.
[   Bug   ] Post-condition for 'P4b' (file tests/tcas/tcas.c, line 146)
            by StaDy.
[  Dead   ] Behavior 'P1a'
            Locally invalid, but unreachable.
            By Frama-C kernel because:
             - Post-condition for 'P1a' (file tests/tcas/tcas.c, line 116)
[  Dead   ] Behavior 'P2b'
            Locally invalid, but unreachable.
            By Frama-C kernel because:
             - Post-condition for 'P2b' (file tests/tcas/tcas.c, line 130)
[  Dead   ] Behavior 'P3a'
            Locally invalid, but unreachable.
            By Frama-C kernel because:
             - Post-condition for 'P3a' (file tests/tcas/tcas.c, line 135)
[  Dead   ] Behavior 'P4b'
            Locally invalid, but unreachable.
            By Frama-C kernel because:
             - Post-condition for 'P4b' (file tests/tcas/tcas.c, line 146)
[  Valid  ] Default behavior
            by Frama-C kernel.

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
     1 Completely validated
     4 Bugs found
     4 Dead properties
     9 Total
--------------------------------------------------------------------------------
