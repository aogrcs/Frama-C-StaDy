[kernel] preprocessing with "gcc -C -E -I.  tests/tcas/tcas.c"
[stady:generated-pl] generated Prolog precondition:
:- module(test_parameters).
:- import create_input_val/3 from substitution.
:- export dom/4.
:- export create_input_vals/2.
:- export unquantif_preconds/2.
:- export quantif_preconds/2.
:- export strategy/2.
:- export precondition_of/2.

dom(0,0,0,0).
dom('alt_sep_test', cont('Positive_RA_Alt_Thresh',1), [], int([0..0])).
dom('alt_sep_test', dim('Positive_RA_Alt_Thresh'), [], int([4..4294967295])).
dom('alt_sep_test', cont('Positive_RA_Alt_Thresh',0), [], int([16434..16434])).
dom('alt_sep_test', cont('Positive_RA_Alt_Thresh',_), [], int([-2147483648..2147483647])).
dom('alt_sep_test', cont('Positive_RA_Alt_Thresh',3), [], int([0..0])).
dom('alt_sep_test', cont('Positive_RA_Alt_Thresh',2), [], int([0..0])).
dom('pathcrawler__alt_sep_test_precond',A,B,C) :-
  dom('alt_sep_test',A,B,C).
create_input_vals('alt_sep_test', Ins):-
  create_input_val(cont('Positive_RA_Alt_Thresh',1), int([0..0]),Ins),
  create_input_val(dim('Positive_RA_Alt_Thresh'), int([4..4294967295]),Ins),
  create_input_val(cont('Positive_RA_Alt_Thresh',0), int([16434..16434]),Ins),
  create_input_val('Own_Tracked_Alt_Rate', int([450..450]),Ins),
  create_input_val('Other_Tracked_Alt', int([300..1000]),Ins),
  create_input_val('Alt_Layer_Value', int([0..3]),Ins),
  create_input_val('Up_Separation', int([-2147483648..2147483647]),Ins),
  create_input_val('Down_Separation', int([-2147483648..2147483647]),Ins),
  create_input_val('Other_RAC', int([0..2]),Ins),
  create_input_val('Other_Capability', int([0..0]),Ins),
  create_input_val('Climb_Inhibit', int([1..1]),Ins),
  create_input_val('Cur_Vertical_Sep', int([16684..16684]),Ins),
  create_input_val('High_Confidence', int([32464..32464]),Ins),
  create_input_val('Two_of_Three_Reports_Valid', int([0..1]),Ins),
  create_input_val('Own_Tracked_Alt', int([300..1000]),Ins),
  create_input_val(cont('Positive_RA_Alt_Thresh',3), int([0..0]),Ins),
  create_input_val(cont('Positive_RA_Alt_Thresh',2), int([0..0]),Ins),
  true.
create_input_vals('pathcrawler__alt_sep_test_precond',Ins) :-
  create_input_vals('alt_sep_test',Ins).
quantif_preconds('alt_sep_test',
  [
  ]
).
quantif_preconds('pathcrawler__alt_sep_test_precond',A) :-
  quantif_preconds('alt_sep_test',A).
unquantif_preconds('alt_sep_test',
  [
  ]
).
unquantif_preconds('pathcrawler__alt_sep_test_precond',A) :-
  unquantif_preconds('alt_sep_test',A).
strategy('alt_sep_test',[]).
strategy('pathcrawler__alt_sep_test_precond',A) :-
  strategy('alt_sep_test',A).
precondition_of('alt_sep_test','pathcrawler__alt_sep_test_precond').
[stady:generated-c] generated C file:
/* Generated by Frama-C */
#include <gmp.h>
extern int pathcrawler_assert_exception(char*,int);
extern int pathcrawler_dimension(void*);
extern void pathcrawler_to_framac(char*);
extern void* malloc(unsigned);
extern void free(void*);
int Cur_Vertical_Sep;
int High_Confidence;
int Two_of_Three_Reports_Valid;
int Own_Tracked_Alt;
int Own_Tracked_Alt_Rate;
int Other_Tracked_Alt;
int Alt_Layer_Value;
int *Positive_RA_Alt_Thresh;
int Up_Separation;
int Down_Separation;
int Other_RAC;
int Other_Capability;
int Climb_Inhibit;
int Own_Below_Threat(void)
{
  int old_Climb_Inhibit = Climb_Inhibit;
  int old_Other_Capability = Other_Capability;
  int old_Other_RAC = Other_RAC;
  int old_Down_Separation = Down_Separation;
  int old_Up_Separation = Up_Separation;
  int *old_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  int *old_ptr_Positive_RA_Alt_Thresh;
  old_ptr_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  int old_Alt_Layer_Value = Alt_Layer_Value;
  int old_Other_Tracked_Alt = Other_Tracked_Alt;
  int old_Own_Tracked_Alt_Rate = Own_Tracked_Alt_Rate;
  int old_Own_Tracked_Alt = Own_Tracked_Alt;
  int old_Two_of_Three_Reports_Valid = Two_of_Three_Reports_Valid;
  int old_High_Confidence = High_Confidence;
  int old_Cur_Vertical_Sep = Cur_Vertical_Sep;
  {
    int __retres;
    __retres = Own_Tracked_Alt < Other_Tracked_Alt;
    return __retres;
  }
}

int Own_Above_Threat(void)
{
  int old_Climb_Inhibit = Climb_Inhibit;
  int old_Other_Capability = Other_Capability;
  int old_Other_RAC = Other_RAC;
  int old_Down_Separation = Down_Separation;
  int old_Up_Separation = Up_Separation;
  int *old_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  int *old_ptr_Positive_RA_Alt_Thresh;
  old_ptr_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  int old_Alt_Layer_Value = Alt_Layer_Value;
  int old_Other_Tracked_Alt = Other_Tracked_Alt;
  int old_Own_Tracked_Alt_Rate = Own_Tracked_Alt_Rate;
  int old_Own_Tracked_Alt = Own_Tracked_Alt;
  int old_Two_of_Three_Reports_Valid = Two_of_Three_Reports_Valid;
  int old_High_Confidence = High_Confidence;
  int old_Cur_Vertical_Sep = Cur_Vertical_Sep;
  {
    int __retres;
    __retres = Other_Tracked_Alt < Own_Tracked_Alt;
    return __retres;
  }
}

int ALIM(void)
{
  int old_Climb_Inhibit = Climb_Inhibit;
  int old_Other_Capability = Other_Capability;
  int old_Other_RAC = Other_RAC;
  int old_Down_Separation = Down_Separation;
  int old_Up_Separation = Up_Separation;
  int *old_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  int *old_ptr_Positive_RA_Alt_Thresh;
  old_ptr_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  int old_Alt_Layer_Value = Alt_Layer_Value;
  int old_Other_Tracked_Alt = Other_Tracked_Alt;
  int old_Own_Tracked_Alt_Rate = Own_Tracked_Alt_Rate;
  int old_Own_Tracked_Alt = Own_Tracked_Alt;
  int old_Two_of_Three_Reports_Valid = Two_of_Three_Reports_Valid;
  int old_High_Confidence = High_Confidence;
  int old_Cur_Vertical_Sep = Cur_Vertical_Sep;
  {
    int __retres;
    __retres = *(Positive_RA_Alt_Thresh + Alt_Layer_Value);
    return __retres;
  }
}

int Inhibit_Biased_Climb(void)
{
  int old_Climb_Inhibit = Climb_Inhibit;
  int old_Other_Capability = Other_Capability;
  int old_Other_RAC = Other_RAC;
  int old_Down_Separation = Down_Separation;
  int old_Up_Separation = Up_Separation;
  int *old_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  int *old_ptr_Positive_RA_Alt_Thresh;
  old_ptr_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  int old_Alt_Layer_Value = Alt_Layer_Value;
  int old_Other_Tracked_Alt = Other_Tracked_Alt;
  int old_Own_Tracked_Alt_Rate = Own_Tracked_Alt_Rate;
  int old_Own_Tracked_Alt = Own_Tracked_Alt;
  int old_Two_of_Three_Reports_Valid = Two_of_Three_Reports_Valid;
  int old_High_Confidence = High_Confidence;
  int old_Cur_Vertical_Sep = Cur_Vertical_Sep;
  {
    int tmp;
    if (Climb_Inhibit) { pathcrawler_to_framac("@FC:REACHABLE_STMT:12");
                       tmp = Up_Separation + 100; }
                       
    else { pathcrawler_to_framac("@FC:REACHABLE_STMT:13");
         tmp = Up_Separation; }
         
    return tmp;
  }
}

int Non_Crossing_Biased_Climb(void)
{
  int old_Climb_Inhibit = Climb_Inhibit;
  int old_Other_Capability = Other_Capability;
  int old_Other_RAC = Other_RAC;
  int old_Down_Separation = Down_Separation;
  int old_Up_Separation = Up_Separation;
  int *old_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  int *old_ptr_Positive_RA_Alt_Thresh;
  old_ptr_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  int old_Alt_Layer_Value = Alt_Layer_Value;
  int old_Other_Tracked_Alt = Other_Tracked_Alt;
  int old_Own_Tracked_Alt_Rate = Own_Tracked_Alt_Rate;
  int old_Own_Tracked_Alt = Own_Tracked_Alt;
  int old_Two_of_Three_Reports_Valid = Two_of_Three_Reports_Valid;
  int old_High_Confidence = High_Confidence;
  int old_Cur_Vertical_Sep = Cur_Vertical_Sep;
  {
    int upward_preferred;
    int result;
    int tmp;
    {
      /*sequence*/
      tmp = Inhibit_Biased_Climb();
      upward_preferred = tmp > Down_Separation;
    }
    if (upward_preferred) {
      int tmp_3;
      int tmp_0;
      { pathcrawler_to_framac("@FC:REACHABLE_STMT:21");
      {
        /*sequence*/
        tmp_0 = Own_Below_Threat();
        if (tmp_0) {
          int tmp_1;
          { pathcrawler_to_framac("@FC:REACHABLE_STMT:25");
          tmp_1 = Own_Below_Threat(); }
          
          if (tmp_1) {
            int tmp_2;
            { pathcrawler_to_framac("@FC:REACHABLE_STMT:27");
            {
              /*sequence*/
              tmp_2 = ALIM();
              ;
            } }
            
            if (Down_Separation >= tmp_2) { pathcrawler_to_framac("@FC:REACHABLE_STMT:31");
                                          tmp_3 = 0; }
                                          
            else { pathcrawler_to_framac("@FC:REACHABLE_STMT:32");
                 tmp_3 = 1; }
                 
          }
          else { pathcrawler_to_framac("@FC:REACHABLE_STMT:33");
               tmp_3 = 0; }
               
        }
        else { pathcrawler_to_framac("@FC:REACHABLE_STMT:34");
             tmp_3 = 1; }
             
        result = tmp_3;
      } }
      
    }
    else {
      int tmp_6;
      int tmp_4;
      { pathcrawler_to_framac("@FC:REACHABLE_STMT:36");
      {
        /*sequence*/
        tmp_4 = Own_Above_Threat();
        if (tmp_4) 
          { pathcrawler_to_framac("@FC:REACHABLE_STMT:41");
          if (Cur_Vertical_Sep >= 300) {
            int tmp_5;
            { pathcrawler_to_framac("@FC:REACHABLE_STMT:42");
            {
              /*sequence*/
              tmp_5 = ALIM();
              ;
            } }
            
            if (Up_Separation >= tmp_5) { pathcrawler_to_framac("@FC:REACHABLE_STMT:46");
                                        tmp_6 = 1; }
                                        
            else { pathcrawler_to_framac("@FC:REACHABLE_STMT:47");
                 tmp_6 = 0; }
                 
          }
          else { pathcrawler_to_framac("@FC:REACHABLE_STMT:48");
               tmp_6 = 0; }
                }
          
        else { pathcrawler_to_framac("@FC:REACHABLE_STMT:49");
             tmp_6 = 0; }
             
        result = tmp_6;
      } }
      
    }
    return result;
  }
}

int Non_Crossing_Biased_Descend(void)
{
  int old_Climb_Inhibit = Climb_Inhibit;
  int old_Other_Capability = Other_Capability;
  int old_Other_RAC = Other_RAC;
  int old_Down_Separation = Down_Separation;
  int old_Up_Separation = Up_Separation;
  int *old_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  int *old_ptr_Positive_RA_Alt_Thresh;
  old_ptr_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  int old_Alt_Layer_Value = Alt_Layer_Value;
  int old_Other_Tracked_Alt = Other_Tracked_Alt;
  int old_Own_Tracked_Alt_Rate = Own_Tracked_Alt_Rate;
  int old_Own_Tracked_Alt = Own_Tracked_Alt;
  int old_Two_of_Three_Reports_Valid = Two_of_Three_Reports_Valid;
  int old_High_Confidence = High_Confidence;
  int old_Cur_Vertical_Sep = Cur_Vertical_Sep;
  {
    int upward_preferred;
    int result;
    int tmp;
    {
      /*sequence*/
      tmp = Inhibit_Biased_Climb();
      upward_preferred = tmp > Down_Separation;
    }
    if (upward_preferred) {
      int tmp_2;
      int tmp_0;
      { pathcrawler_to_framac("@FC:REACHABLE_STMT:59");
      {
        /*sequence*/
        tmp_0 = Own_Below_Threat();
        if (tmp_0) 
          { pathcrawler_to_framac("@FC:REACHABLE_STMT:64");
          if (Cur_Vertical_Sep >= 300) {
            int tmp_1;
            { pathcrawler_to_framac("@FC:REACHABLE_STMT:65");
            {
              /*sequence*/
              tmp_1 = ALIM();
              ;
            } }
            
            if (Down_Separation >= tmp_1) { pathcrawler_to_framac("@FC:REACHABLE_STMT:69");
                                          tmp_2 = 1; }
                                          
            else { pathcrawler_to_framac("@FC:REACHABLE_STMT:70");
                 tmp_2 = 0; }
                 
          }
          else { pathcrawler_to_framac("@FC:REACHABLE_STMT:71");
               tmp_2 = 0; }
                }
          
        else { pathcrawler_to_framac("@FC:REACHABLE_STMT:72");
             tmp_2 = 0; }
             
        result = tmp_2;
      } }
      
    }
    else {
      int tmp_6;
      int tmp_3;
      { pathcrawler_to_framac("@FC:REACHABLE_STMT:74");
      {
        /*sequence*/
        tmp_3 = Own_Above_Threat();
        if (tmp_3) {
          int tmp_4;
          { pathcrawler_to_framac("@FC:REACHABLE_STMT:78");
          tmp_4 = Own_Above_Threat(); }
          
          if (tmp_4) {
            int tmp_5;
            { pathcrawler_to_framac("@FC:REACHABLE_STMT:80");
            {
              /*sequence*/
              tmp_5 = ALIM();
              ;
            } }
            
            if (Up_Separation >= tmp_5) { pathcrawler_to_framac("@FC:REACHABLE_STMT:84");
                                        tmp_6 = 1; }
                                        
            else { pathcrawler_to_framac("@FC:REACHABLE_STMT:85");
                 tmp_6 = 0; }
                 
          }
          else { pathcrawler_to_framac("@FC:REACHABLE_STMT:86");
               tmp_6 = 0; }
               
        }
        else { pathcrawler_to_framac("@FC:REACHABLE_STMT:87");
             tmp_6 = 1; }
             
        result = tmp_6;
      } }
      
    }
    return result;
  }
}

int alt_sep_test_precond(void)
{
return 1;
}

int alt_sep_test(void)
{
  int old_Climb_Inhibit = Climb_Inhibit;
  int old_Other_Capability = Other_Capability;
  int old_Other_RAC = Other_RAC;
  int old_Down_Separation = Down_Separation;
  int old_Up_Separation = Up_Separation;
  int *old_Positive_RA_Alt_Thresh = Positive_RA_Alt_Thresh;
  int *old_ptr_Positive_RA_Alt_Thresh;
  mpz_t __stady_gmp_0;
  __gmpz_init_set_si(__stady_gmp_0, 3);
  mpz_t __stady_gmp_1;
  __gmpz_init_set_si(__stady_gmp_1, 1);
  mpz_t __stady_gmp_2;
  __gmpz_init(__stady_gmp_2);
  __gmpz_add(__stady_gmp_2, __stady_gmp_0, __stady_gmp_1);
  __gmpz_clear(__stady_gmp_0);
  __gmpz_clear(__stady_gmp_1);
  int __stady_iter_0;
  old_ptr_Positive_RA_Alt_Thresh = malloc(__gmpz_get_si(__stady_gmp_2)*sizeof(int));
  for (__stady_iter_0 = 0; __stady_iter_0 < __gmpz_get_si(__stady_gmp_2); __stady_iter_0++) {
  old_ptr_Positive_RA_Alt_Thresh[__stady_iter_0] = Positive_RA_Alt_Thresh[__stady_iter_0];
  }
  int old_Alt_Layer_Value = Alt_Layer_Value;
  int old_Other_Tracked_Alt = Other_Tracked_Alt;
  int old_Own_Tracked_Alt_Rate = Own_Tracked_Alt_Rate;
  int old_Own_Tracked_Alt = Own_Tracked_Alt;
  int old_Two_of_Three_Reports_Valid = Two_of_Three_Reports_Valid;
  int old_High_Confidence = High_Confidence;
  int old_Cur_Vertical_Sep = Cur_Vertical_Sep;
  {
    int enabled;
    int tcas_equipped;
    int intent_not_known;
    int need_upward_RA;
    int need_downward_RA;
    int alt_sep;
    int tmp;
    int tmp_0;
    need_upward_RA = 0;
    need_downward_RA = 0;
    {
      /*sequence*/
      if (High_Confidence) 
        { pathcrawler_to_framac("@FC:REACHABLE_STMT:99");
        if (Own_Tracked_Alt_Rate <= 600) 
          { pathcrawler_to_framac("@FC:REACHABLE_STMT:101");
          if (Cur_Vertical_Sep > 600) { pathcrawler_to_framac("@FC:REACHABLE_STMT:102");
                                      tmp = 1; }
                                      
          else { pathcrawler_to_framac("@FC:REACHABLE_STMT:103");
               tmp = 0; }
                }
          
        else { pathcrawler_to_framac("@FC:REACHABLE_STMT:104");
             tmp = 0; }
              }
        
      else { pathcrawler_to_framac("@FC:REACHABLE_STMT:105");
           tmp = 0; }
           
      enabled = tmp;
    }
    tcas_equipped = Other_Capability == 1;
    {
      /*sequence*/
      if (Two_of_Three_Reports_Valid) 
        { pathcrawler_to_framac("@FC:REACHABLE_STMT:113");
        if (Other_RAC == 0) { pathcrawler_to_framac("@FC:REACHABLE_STMT:114");
                            tmp_0 = 1; }
                            
        else { pathcrawler_to_framac("@FC:REACHABLE_STMT:115");
             tmp_0 = 0; }
              }
        
      else { pathcrawler_to_framac("@FC:REACHABLE_STMT:116");
           tmp_0 = 0; }
           
      intent_not_known = tmp_0;
    }
    alt_sep = 0;
    if (enabled) 
      { pathcrawler_to_framac("@FC:REACHABLE_STMT:122");
      if (tcas_equipped) {
        { pathcrawler_to_framac("@FC:REACHABLE_STMT:124");
        if (intent_not_known) { pathcrawler_to_framac("@FC:REACHABLE_STMT:125");
                              goto _LOR; }
                              
        else { pathcrawler_to_framac("@FC:REACHABLE_STMT:126");
             goto _LAND_0; }
              }
        
      }
      else 
        _LAND_0:
          { pathcrawler_to_framac("@FC:REACHABLE_STMT:127");
          if (! tcas_equipped) {
            _LOR:
              { pathcrawler_to_framac("@FC:REACHABLE_STMT:128");
              {
                int tmp_3;
                int tmp_1;
                int tmp_6;
                int tmp_4;
                {
                  /*sequence*/
                  tmp_1 = Non_Crossing_Biased_Climb();
                  if (tmp_1) {
                    int tmp_2;
                    { pathcrawler_to_framac("@FC:REACHABLE_STMT:133");
                    tmp_2 = Own_Below_Threat(); }
                    
                    if (tmp_2) { pathcrawler_to_framac("@FC:REACHABLE_STMT:135");
                               tmp_3 = 1; }
                               
                    else { pathcrawler_to_framac("@FC:REACHABLE_STMT:136");
                         tmp_3 = 0; }
                         
                  }
                  else { pathcrawler_to_framac("@FC:REACHABLE_STMT:137");
                       tmp_3 = 0; }
                       
                  need_upward_RA = tmp_3;
                }
                {
                  /*sequence*/
                  tmp_4 = Non_Crossing_Biased_Descend();
                  if (tmp_4) {
                    int tmp_5;
                    { pathcrawler_to_framac("@FC:REACHABLE_STMT:143");
                    tmp_5 = Own_Above_Threat(); }
                    
                    if (tmp_5) { pathcrawler_to_framac("@FC:REACHABLE_STMT:145");
                               tmp_6 = 1; }
                               
                    else { pathcrawler_to_framac("@FC:REACHABLE_STMT:146");
                         tmp_6 = 0; }
                         
                  }
                  else { pathcrawler_to_framac("@FC:REACHABLE_STMT:147");
                       tmp_6 = 0; }
                       
                  need_downward_RA = tmp_6;
                }
                if (need_upward_RA) {
                  { pathcrawler_to_framac("@FC:REACHABLE_STMT:152");
                  if (need_downward_RA) { pathcrawler_to_framac("@FC:REACHABLE_STMT:153");
                                        alt_sep = 0; }
                                        
                  else { pathcrawler_to_framac("@FC:REACHABLE_STMT:154");
                       goto _LAND; }
                        }
                  
                }
                else {
                  _LAND:
                    { pathcrawler_to_framac("@FC:REACHABLE_STMT:155");
                    ; }
                    
                  if (need_upward_RA) { pathcrawler_to_framac("@FC:REACHABLE_STMT:157");
                                      alt_sep = 1; }
                                      
                  else 
                    { pathcrawler_to_framac("@FC:REACHABLE_STMT:159");
                    if (need_downward_RA) { pathcrawler_to_framac("@FC:REACHABLE_STMT:160");
                                          alt_sep = 2; }
                                          
                    else { pathcrawler_to_framac("@FC:REACHABLE_STMT:161");
                         alt_sep = 0; }
                          }
                    
                }
              } }
              
          } }
           }
      
    {
      mpz_t __stady_gmp_3;
      __gmpz_init_set_si(__stady_gmp_3, Alt_Layer_Value);
      mpz_t __stady_gmp_4;
      __gmpz_init_set_si(__stady_gmp_4, Alt_Layer_Value);
      if ((Up_Separation >= *(Positive_RA_Alt_Thresh + __gmpz_get_si(__stady_gmp_3))) && (Down_Separation < *(Positive_RA_Alt_Thresh + __gmpz_get_si(__stady_gmp_4))) && 1) {
        mpz_t __stady_gmp_5;
        __gmpz_init_set_si(__stady_gmp_5, alt_sep);
        mpz_t __stady_gmp_6;
        __gmpz_init_set_si(__stady_gmp_6, 2);
        int __stady_pred_0 = __gmpz_cmp(__stady_gmp_5, __stady_gmp_6) != 0;
        __gmpz_clear(__stady_gmp_5);
        __gmpz_clear(__stady_gmp_6);
        if(!__stady_pred_0)pathcrawler_assert_exception("Post-condition!", 45);
        }
      mpz_t __stady_gmp_7;
      __gmpz_init_set_si(__stady_gmp_7, Alt_Layer_Value);
      mpz_t __stady_gmp_8;
      __gmpz_init_set_si(__stady_gmp_8, Alt_Layer_Value);
      if ((Up_Separation < *(Positive_RA_Alt_Thresh + __gmpz_get_si(__stady_gmp_7))) && (Down_Separation >= *(Positive_RA_Alt_Thresh + __gmpz_get_si(__stady_gmp_8))) && 1) {
        mpz_t __stady_gmp_9;
        __gmpz_init_set_si(__stady_gmp_9, alt_sep);
        mpz_t __stady_gmp_10;
        __gmpz_init_set_si(__stady_gmp_10, 1);
        int __stady_pred_1 = __gmpz_cmp(__stady_gmp_9, __stady_gmp_10) != 0;
        __gmpz_clear(__stady_gmp_9);
        __gmpz_clear(__stady_gmp_10);
        if(!__stady_pred_1)pathcrawler_assert_exception("Post-condition!", 37);
        }
      mpz_t __stady_gmp_11;
      __gmpz_init_set_si(__stady_gmp_11, Alt_Layer_Value);
      mpz_t __stady_gmp_12;
      __gmpz_init_set_si(__stady_gmp_12, Alt_Layer_Value);
      if ((Up_Separation < *(Positive_RA_Alt_Thresh + __gmpz_get_si(__stady_gmp_11))) && (Down_Separation < *(Positive_RA_Alt_Thresh + __gmpz_get_si(__stady_gmp_12))) && (Up_Separation > Down_Separation) && 1) {
        mpz_t __stady_gmp_13;
        __gmpz_init_set_si(__stady_gmp_13, alt_sep);
        mpz_t __stady_gmp_14;
        __gmpz_init_set_si(__stady_gmp_14, 2);
        int __stady_pred_2 = __gmpz_cmp(__stady_gmp_13, __stady_gmp_14) != 0;
        __gmpz_clear(__stady_gmp_13);
        __gmpz_clear(__stady_gmp_14);
        if(!__stady_pred_2)pathcrawler_assert_exception("Post-condition!", 27);
        }
      mpz_t __stady_gmp_15;
      __gmpz_init_set_si(__stady_gmp_15, Alt_Layer_Value);
      mpz_t __stady_gmp_16;
      __gmpz_init_set_si(__stady_gmp_16, Alt_Layer_Value);
      if ((Up_Separation < *(Positive_RA_Alt_Thresh + __gmpz_get_si(__stady_gmp_15))) && (Down_Separation < *(Positive_RA_Alt_Thresh + __gmpz_get_si(__stady_gmp_16))) && (Up_Separation < Down_Separation) && 1) {
        mpz_t __stady_gmp_17;
        __gmpz_init_set_si(__stady_gmp_17, alt_sep);
        mpz_t __stady_gmp_18;
        __gmpz_init_set_si(__stady_gmp_18, 1);
        int __stady_pred_3 = __gmpz_cmp(__stady_gmp_17, __stady_gmp_18) != 0;
        __gmpz_clear(__stady_gmp_17);
        __gmpz_clear(__stady_gmp_18);
        if(!__stady_pred_3)pathcrawler_assert_exception("Post-condition!", 33);
        }
      mpz_t __stady_gmp_19;
      __gmpz_init_set_si(__stady_gmp_19, Alt_Layer_Value);
      mpz_t __stady_gmp_20;
      __gmpz_init_set_si(__stady_gmp_20, Alt_Layer_Value);
      if ((Up_Separation >= *(Positive_RA_Alt_Thresh + __gmpz_get_si(__stady_gmp_19))) && (Down_Separation >= *(Positive_RA_Alt_Thresh + __gmpz_get_si(__stady_gmp_20))) && (Own_Tracked_Alt > Other_Tracked_Alt) && 1) {
        mpz_t __stady_gmp_21;
        __gmpz_init_set_si(__stady_gmp_21, alt_sep);
        mpz_t __stady_gmp_22;
        __gmpz_init_set_si(__stady_gmp_22, 2);
        int __stady_pred_4 = __gmpz_cmp(__stady_gmp_21, __stady_gmp_22) != 0;
        __gmpz_clear(__stady_gmp_21);
        __gmpz_clear(__stady_gmp_22);
        if(!__stady_pred_4)pathcrawler_assert_exception("Post-condition!", 40);
        }
      mpz_t __stady_gmp_23;
      __gmpz_init_set_si(__stady_gmp_23, Alt_Layer_Value);
      mpz_t __stady_gmp_24;
      __gmpz_init_set_si(__stady_gmp_24, Alt_Layer_Value);
      if ((Up_Separation >= *(Positive_RA_Alt_Thresh + __gmpz_get_si(__stady_gmp_23))) && (Down_Separation >= *(Positive_RA_Alt_Thresh + __gmpz_get_si(__stady_gmp_24))) && (Own_Tracked_Alt < Other_Tracked_Alt) && 1) {
        mpz_t __stady_gmp_25;
        __gmpz_init_set_si(__stady_gmp_25, alt_sep);
        mpz_t __stady_gmp_26;
        __gmpz_init_set_si(__stady_gmp_26, 1);
        int __stady_pred_5 = __gmpz_cmp(__stady_gmp_25, __stady_gmp_26) != 0;
        __gmpz_clear(__stady_gmp_25);
        __gmpz_clear(__stady_gmp_26);
        if(!__stady_pred_5)pathcrawler_assert_exception("Post-condition!", 46);
        }
      if ((Own_Tracked_Alt > Other_Tracked_Alt) && 1) {
        mpz_t __stady_gmp_27;
        __gmpz_init_set_si(__stady_gmp_27, alt_sep);
        mpz_t __stady_gmp_28;
        __gmpz_init_set_si(__stady_gmp_28, 2);
        int __stady_pred_6 = __gmpz_cmp(__stady_gmp_27, __stady_gmp_28) != 0;
        __gmpz_clear(__stady_gmp_27);
        __gmpz_clear(__stady_gmp_28);
        if(!__stady_pred_6)pathcrawler_assert_exception("Post-condition!", 55);
        }
      if ((Own_Tracked_Alt < Other_Tracked_Alt) && 1) {
        mpz_t __stady_gmp_29;
        __gmpz_init_set_si(__stady_gmp_29, alt_sep);
        mpz_t __stady_gmp_30;
        __gmpz_init_set_si(__stady_gmp_30, 1);
        int __stady_pred_7 = __gmpz_cmp(__stady_gmp_29, __stady_gmp_30) != 0;
        __gmpz_clear(__stady_gmp_29);
        __gmpz_clear(__stady_gmp_30);
        if(!__stady_pred_7)pathcrawler_assert_exception("Post-condition!", 28);
        }
      if ((Up_Separation > Down_Separation) && 1) {
        mpz_t __stady_gmp_31;
        __gmpz_init_set_si(__stady_gmp_31, alt_sep);
        mpz_t __stady_gmp_32;
        __gmpz_init_set_si(__stady_gmp_32, 2);
        int __stady_pred_8 = __gmpz_cmp(__stady_gmp_31, __stady_gmp_32) != 0;
        __gmpz_clear(__stady_gmp_31);
        __gmpz_clear(__stady_gmp_32);
        if(!__stady_pred_8)pathcrawler_assert_exception("Post-condition!", 6);
        }
      if ((Up_Separation < Down_Separation) && 1) {
        mpz_t __stady_gmp_33;
        __gmpz_init_set_si(__stady_gmp_33, alt_sep);
        mpz_t __stady_gmp_34;
        __gmpz_init_set_si(__stady_gmp_34, 1);
        int __stady_pred_9 = __gmpz_cmp(__stady_gmp_33, __stady_gmp_34) != 0;
        __gmpz_clear(__stady_gmp_33);
        __gmpz_clear(__stady_gmp_34);
        if(!__stady_pred_9)pathcrawler_assert_exception("Post-condition!", 34);
        }
      
      }
    free(old_ptr_Positive_RA_Alt_Thresh);
    return alt_sep;
  }
}


[kernel] preprocessing with "gcc -C -E -I.  stady_temp.c"
stady_temp.c:343:[kernel] warning: Calling undeclared function malloc. Old style K&R code?
stady_temp.c:535:[kernel] warning: Calling undeclared function free. Old style K&R code?
[kernel] preprocessing with "gcc -C -E -I. -include /usr/local/share/frama-c/pc/lib/lanceur_deb.h stady_temp.c"
stady_temp.c:343:[kernel] warning: Calling undeclared function malloc. Old style K&R code?
stady_temp.c:535:[kernel] warning: Calling undeclared function free. Old style K&R code?
[pc] analyzing...
[pc] Compiling pathcrawler_stady_temp/lanceur_alt_sep_test utilities ...
[pc] Compiling pathcrawler_stady_temp/lanceur_alt_sep_test ...
[pc] generating tests...
[pc] Starting lanceur_alt_sep_test (isc version)
[pc] Starting lanceur_pathcrawler__alt_sep_test_precond (isc version)
[pc] Starting lanceur_alt_sep_test (isc version)
[pc] Starting lanceur_alt_sep_test (isc version)
[pc] Starting lanceur_alt_sep_test (isc version)
[pc] Starting lanceur_alt_sep_test (isc version)
[pc] Starting lanceur_alt_sep_test (isc version)
[pc] Starting lanceur_alt_sep_test (isc version)
[pc] Starting lanceur_alt_sep_test (isc version)
[pc] Starting lanceur_alt_sep_test (isc version)
[pc] Starting lanceur_alt_sep_test (isc version)
[pc] Starting lanceur_alt_sep_test (isc version)
[pc] Starting lanceur_alt_sep_test (isc version)
[pc] Starting lanceur_alt_sep_test (isc version)
[pc] Starting lanceur_alt_sep_test (isc version)
[pc] Starting lanceur_alt_sep_test (isc version)
[pc] Starting lanceur_alt_sep_test (isc version)
[pc] Starting lanceur_alt_sep_test (isc version)
[pc] Starting lanceur_alt_sep_test (isc version)
[pc] Starting lanceur_alt_sep_test (isc version)
[pc] generation finished
[stady] all-paths: false
[stady] 1410 test cases
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'alt_sep_test'
--------------------------------------------------------------------------------

[   Bug   ] Post-condition for 'P1a' (file tests/tcas/tcas.c, line 93)
            by StaDy.
[   Bug   ] Post-condition for 'P2b' (file tests/tcas/tcas.c, line 107)
            by StaDy.
[   Bug   ] Post-condition for 'P3a' (file tests/tcas/tcas.c, line 112)
            by StaDy.
[   Bug   ] Post-condition for 'P4b' (file tests/tcas/tcas.c, line 123)
            by StaDy.
[  Dead   ] Behavior 'P1a'
            Locally invalid, but unreachable.
            By Frama-C kernel because:
             - Post-condition for 'P1a' (file tests/tcas/tcas.c, line 93)
[  Dead   ] Behavior 'P2b'
            Locally invalid, but unreachable.
            By Frama-C kernel because:
             - Post-condition for 'P2b' (file tests/tcas/tcas.c, line 107)
[  Dead   ] Behavior 'P3a'
            Locally invalid, but unreachable.
            By Frama-C kernel because:
             - Post-condition for 'P3a' (file tests/tcas/tcas.c, line 112)
[  Dead   ] Behavior 'P4b'
            Locally invalid, but unreachable.
            By Frama-C kernel because:
             - Post-condition for 'P4b' (file tests/tcas/tcas.c, line 123)
[  Valid  ] Default behavior
            by Frama-C kernel.

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
     1 Completely validated
     4 Bugs found
     4 Dead properties
     9 Total
--------------------------------------------------------------------------------
