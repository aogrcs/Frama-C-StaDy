[kernel] preprocessing with "gcc -C -E -I.  tests/inv_insuf_ok/inv_insuf_ok.c"
[stady:generated-pl] generated Prolog precondition:
:- module(test_parameters).
:- import create_input_val/3 from substitution.
:- export dom/4.
:- export create_input_vals/2.
:- export unquantif_preconds/2.
:- export quantif_preconds/2.
:- export strategy/2.
:- export precondition_of/2.

dom(0,0,0,0).
dom('f', dim('t'), [], int([5..4294967295])).
dom('f', cont('t',_), [], int([-2147483648..2147483647])).
dom('pathcrawler__f_precond',A,B,C) :-
  dom('f',A,B,C).
create_input_vals('f', Ins):-
  create_input_val('__stady_term_2', int([-2147483648..2147483647]),Ins),
  create_input_val('__stady_term_3', int([-2147483648..2147483647]),Ins),
  create_input_val(dim('t'), int([5..4294967295]),Ins),
  create_input_val('x', int([-2147483648..2147483647]),Ins),
  create_input_val('found', int([-2147483648..2147483647]),Ins),
  true.
create_input_vals('pathcrawler__f_precond',Ins) :-
  create_input_vals('f',Ins).
quantif_preconds('f',
  [
  ]
).
quantif_preconds('pathcrawler__f_precond',A) :-
  quantif_preconds('f',A).
unquantif_preconds('f',
  [
  ]
).
unquantif_preconds('pathcrawler__f_precond',A) :-
  unquantif_preconds('f',A).
strategy('f',[]).
strategy('pathcrawler__f_precond',A) :-
  strategy('f',A).
precondition_of('f','pathcrawler__f_precond').
[stady:generated-c] generated C file:
/* Generated by Frama-C */
struct __anonstruct___mpz_struct_1 {int _mp_alloc ;int _mp_size ;unsigned long *_mp_d ;};typedef struct __anonstruct___mpz_struct_1 __mpz_struct;typedef __mpz_struct mpz_t[1];
extern signed long int __gmpz_get_si(mpz_t);
extern int __gmpz_cmp(mpz_t, mpz_t);
extern void __gmpz_clear(mpz_t);
extern void __gmpz_init(mpz_t);
extern void __gmpz_init_set(mpz_t, mpz_t);
extern void __gmpz_init_set_si(mpz_t, signed long int);
extern void __gmpz_init_set_str(mpz_t, const char*, int);
extern void __gmpz_add(mpz_t, const mpz_t, const mpz_t);
extern void __gmpz_add_ui(mpz_t, const mpz_t, unsigned long int);
extern int pathcrawler_assert_exception(char*,int);
extern int pathcrawler_assume_exception(char*,int);
extern void* malloc(unsigned long);
extern void free(void*);
int __stady_term_3;
int __stady_term_2;
int found;
int f_precond(int *t, int x)
{
  return 1;
}

void f(int *t, int x)
{
  int old_found;
  old_found = found;
  int *old_t;
  int *old_ptr_t;
  old_t = t;
  mpz_t __stady_gmp_0;
  __gmpz_init_set_str(__stady_gmp_0, "4", 10);
  mpz_t __stady_gmp_1;
  __gmpz_init_set_str(__stady_gmp_1, "1", 10);
  mpz_t __stady_gmp_2;
  __gmpz_init(__stady_gmp_2);
  __gmpz_add(__stady_gmp_2, __stady_gmp_0, __stady_gmp_1);
  __gmpz_clear(__stady_gmp_0);
  __gmpz_clear(__stady_gmp_1);
  int __stady_term_0;
  unsigned long __stady_term_1;
  __stady_term_1 = __gmpz_get_si(__stady_gmp_2);
  old_ptr_t = malloc(__stady_term_1 * (unsigned long)sizeof(int));
  __stady_term_1 = __gmpz_get_si(__stady_gmp_2);
  for(__stady_term_0 = 0; (unsigned long)__stady_term_0 < __stady_term_1; __stady_term_0 = 
    __stady_term_0 + 1) {
    old_ptr_t[__stady_term_0] = t[__stady_term_0];
  }
  __gmpz_clear(__stady_gmp_2);
  int old_x;
  old_x = x;
  {
    int i;
    found = 0;
    i = 0;
    {
      if(1) {
        i = __stady_term_3;
        found = __stady_term_2;
        mpz_t __stady_gmp_3;
        __gmpz_init_set_str(__stady_gmp_3, "0", 10);
        mpz_t __stady_gmp_4;
        __gmpz_init_set_si(__stady_gmp_4, i);
        int __stady_term_4;
        __stady_term_4 = __gmpz_cmp(__stady_gmp_3, __stady_gmp_4);
        __gmpz_clear(__stady_gmp_3);
        __gmpz_clear(__stady_gmp_4);
        int __stady_pred_0;
        __stady_pred_0 = __stady_term_4 <= 0;
        if(__stady_pred_0) {
          mpz_t __stady_gmp_5;
          __gmpz_init_set_si(__stady_gmp_5, i);
          mpz_t __stady_gmp_6;
          __gmpz_init_set_str(__stady_gmp_6, "5", 10);
          int __stady_term_5;
          __stady_term_5 = __gmpz_cmp(__stady_gmp_5, __stady_gmp_6);
          __gmpz_clear(__stady_gmp_5);
          __gmpz_clear(__stady_gmp_6);
          __stady_pred_0 = __stady_term_5 <= 0;
        }
        if(! __stady_pred_0) {
          pathcrawler_assume_exception("", 0);
        }
        mpz_t __stady_gmp_7;
        __gmpz_init_set_str(__stady_gmp_7, "0", 10);
        mpz_t __stady_gmp_8;
        __gmpz_init_set_si(__stady_gmp_8, found);
        int __stady_term_6;
        __stady_term_6 = __gmpz_cmp(__stady_gmp_8, __stady_gmp_7);
        __gmpz_clear(__stady_gmp_8);
        __gmpz_clear(__stady_gmp_7);
        int __stady_pred_1;
        __stady_pred_1 = 0;
        {
          mpz_t __q_k;
          mpz_t __stady_gmp_9;
          __gmpz_init_set_str(__stady_gmp_9, "0", 10);
          mpz_t __stady_gmp_10;
          __gmpz_init_set_si(__stady_gmp_10, i);
          __gmpz_init_set(__q_k, __stady_gmp_9);
          int __stady_term_7;
          __stady_term_7 = __gmpz_cmp(__q_k, __stady_gmp_10);
          for(; __stady_term_7 < 0 && ! __stady_pred_1; ) {
            mpz_t __stady_gmp_11;
            __gmpz_init_set(__stady_gmp_11, __q_k);
            int __stady_term_8;
            __stady_term_8 = __gmpz_get_si(__stady_gmp_11);
            __gmpz_clear(__stady_gmp_11);
            __stady_pred_1 = *(t + __stady_term_8) == x;
            __gmpz_add_ui(__q_k, __q_k, 1);
            __stady_term_7 = __gmpz_cmp(__q_k, __stady_gmp_10);
          }
          __gmpz_clear(__q_k);
          __gmpz_clear(__stady_gmp_9);
          __gmpz_clear(__stady_gmp_10);
        }
        if(! ((! (__stady_term_6 != 0) || __stady_pred_1) && (! __stady_pred_1 || 
                                                              __stady_term_6 != 0))) {
          pathcrawler_assume_exception("", 0);
        }
      }
      if(i <= 4) {
        pathcrawler_assume_exception("", 0);
      }
      
    }
    {
      mpz_t __stady_gmp_12;
      __gmpz_init_set_str(__stady_gmp_12, "0", 10);
      mpz_t __stady_gmp_13;
      __gmpz_init_set_si(__stady_gmp_13, found);
      int __stady_term_9;
      __stady_term_9 = __gmpz_cmp(__stady_gmp_13, __stady_gmp_12);
      __gmpz_clear(__stady_gmp_13);
      __gmpz_clear(__stady_gmp_12);
      int __stady_pred_2;
      __stady_pred_2 = 0;
      {
        mpz_t __q_i;
        mpz_t __stady_gmp_14;
        __gmpz_init_set_str(__stady_gmp_14, "0", 10);
        mpz_t __stady_gmp_15;
        __gmpz_init_set_str(__stady_gmp_15, "4", 10);
        __gmpz_init_set(__q_i, __stady_gmp_14);
        int __stady_term_10;
        __stady_term_10 = __gmpz_cmp(__q_i, __stady_gmp_15);
        for(; __stady_term_10 <= 0 && ! __stady_pred_2; ) {
          mpz_t __stady_gmp_16;
          __gmpz_init_set(__stady_gmp_16, __q_i);
          int __stady_term_11;
          __stady_term_11 = __gmpz_get_si(__stady_gmp_16);
          __gmpz_clear(__stady_gmp_16);
          __stady_pred_2 = *(t + __stady_term_11) == x;
          __gmpz_add_ui(__q_i, __q_i, 1);
          __stady_term_10 = __gmpz_cmp(__q_i, __stady_gmp_15);
        }
        __gmpz_clear(__q_i);
        __gmpz_clear(__stady_gmp_14);
        __gmpz_clear(__stady_gmp_15);
      }
      if(! ((! (__stady_term_9 != 0) || __stady_pred_2) && (! __stady_pred_2 || 
                                                            __stady_term_9 != 0))) {
        pathcrawler_assert_exception("Assert!", 0);
      }
      ;
    }
    free(old_ptr_t);
    return;
  }
}


[kernel] preprocessing with "gcc -C -E -I.  __sd_instru_inv_insuf_ok_f.c"
[kernel] preprocessing with "gcc -C -E -I. -include /usr/local/share/frama-c/pc/lib/lanceur_deb.h __sd_instru_inv_insuf_ok_f.c"
[pc] analyzing...
[pc] Compiling pathcrawler___sd_instru_inv_insuf_ok_f/lanceur_f utilities ...
[pc] Compiling pathcrawler___sd_instru_inv_insuf_ok_f/lanceur_f ...
[pc] generating tests...
[pc] Starting lanceur_f (isc version)
[pc] Starting lanceur_pathcrawler__f_precond (isc version)
[pc] TEST GENERATION WARNING!!!
[pc] Unexpected failure of goal write_status_prefix_and_path(1).
[pc] Please report this bug.
[pc] TEST GENERATION WARNING!!!
[pc] Unexpected failure of goal write_status_prefix_and_path(3).
[pc] Please report this bug.
[pc] TEST GENERATION WARNING!!!
[pc] Unexpected failure of goal write_status_prefix_and_path(7).
[pc] Please report this bug.
[pc] TEST GENERATION WARNING!!!
[pc] Unexpected failure of goal write_status_prefix_and_path(9).
[pc] Please report this bug.
[pc] TEST GENERATION WARNING!!!
[pc] Unexpected failure of goal write_status_prefix_and_path(10).
[pc] Please report this bug.
[pc] TEST GENERATION WARNING!!!
[pc] Unexpected failure of goal write_status_prefix_and_path(11).
[pc] Please report this bug.
[pc] TEST GENERATION WARNING!!!
[pc] Unexpected failure of goal write_status_prefix_and_path(13).
[pc] Please report this bug.
[pc] TEST GENERATION WARNING!!!
[pc] Unexpected failure of goal write_status_prefix_and_path(15).
[pc] Please report this bug.
[pc] TEST GENERATION WARNING!!!
[pc] Unexpected failure of goal write_status_prefix_and_path(16).
[pc] Please report this bug.
[pc] TEST GENERATION WARNING!!!
[pc] Unexpected failure of goal write_status_prefix_and_path(18).
[pc] Please report this bug.
[pc] TEST GENERATION WARNING!!!
[pc] Unexpected failure of goal write_status_prefix_and_path(19).
[pc] Please report this bug.
[pc] TEST GENERATION WARNING!!!
[pc] Unexpected failure of goal write_status_prefix_and_path(20).
[pc] Please report this bug.
[pc] TEST GENERATION WARNING!!!
[pc] Unexpected failure of goal write_status_prefix_and_path(22).
[pc] Please report this bug.
[pc] TEST GENERATION WARNING!!!
[pc] Unexpected failure of goal write_status_prefix_and_path(23).
[pc] Please report this bug.
[pc] TEST GENERATION WARNING!!!
[pc] Unexpected failure of goal write_status_prefix_and_path(25).
[pc] Please report this bug.
[pc] TEST GENERATION WARNING!!!
[pc] Unexpected failure of goal write_status_prefix_and_path(26).
[pc] Please report this bug.
[pc] TEST GENERATION WARNING!!!
[pc] Unexpected failure of goal write_status_prefix_and_path(27).
[pc] Please report this bug.
[pc] TEST GENERATION WARNING!!!
[pc] Unexpected failure of goal write_status_prefix_and_path(29).
[pc] Please report this bug.
[pc] TEST GENERATION WARNING!!!
[pc] Unexpected failure of goal write_status_prefix_and_path(30).
[pc] Please report this bug.
[pc] TEST GENERATION WARNING!!!
[pc] Unexpected failure of goal write_status_prefix_and_path(32).
[pc] Please report this bug.
[pc] TEST GENERATION WARNING!!!
[pc] Unexpected failure of goal write_status_prefix_and_path(33).
[pc] Please report this bug.
[pc] TEST GENERATION WARNING!!!
[pc] Unexpected failure of goal write_status_prefix_and_path(34).
[pc] Please report this bug.
[pc] TEST GENERATION WARNING!!!
[pc] Unexpected failure of goal write_status_prefix_and_path(35).
[pc] Please report this bug.
[pc] generation finished
[stady] all-paths: false
[stady] 201 test cases
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'f'
--------------------------------------------------------------------------------

[  Valid  ] Default behavior
            by Frama-C kernel.

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
     1 Completely validated
     1 Total
--------------------------------------------------------------------------------
