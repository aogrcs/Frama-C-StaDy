[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/simulate_sort/simulate_sort.c (with preprocessing)
[stady:generated-pl] generated Prolog precondition:
:- module(test_parameters).
:- import create_input_val/3 from substitution.
:- export dom/4.
:- export create_input_vals/2.
:- export unquantif_preconds/2.
:- export quantif_preconds/2.
:- export strategy/2.
:- export precondition_of/2.

dom(0,0,0,0).
dom('main', cont('__stady_term_2',_), [], int([-2147483648..2147483647])).
dom('main', dim('__stady_term_2'), [], int([0..4294967295])).
dom('pathcrawler__main_precond',A,B,C) :-
  dom('main',A,B,C).
create_input_vals('main', Ins):-
  create_input_val(dim('__stady_term_2'), int([0..4294967295]),Ins),
  true.
create_input_vals('pathcrawler__main_precond',Ins) :-
  create_input_vals('main',Ins).
quantif_preconds('main',
  [

  ]
).
quantif_preconds('pathcrawler__main_precond',A) :-
  quantif_preconds('main',A).
unquantif_preconds('main',
  [

  ]
).
unquantif_preconds('pathcrawler__main_precond',A) :-
  unquantif_preconds('main',A).
strategy('main',[]).
strategy('pathcrawler__main_precond',A) :-
  strategy('main',A).
precondition_of('main','pathcrawler__main_precond').
[stady:generated-c] generated C file:
/* Generated by Frama-C */
struct __anonstruct___mpz_struct_1 {int _mp_alloc ;int _mp_size ;unsigned long *_mp_d ;};typedef struct __anonstruct___mpz_struct_1 __mpz_struct;typedef __mpz_struct mpz_t[1];
extern unsigned long int __gmpz_get_ui(mpz_t);
extern signed long int __gmpz_get_si(mpz_t);
extern int __gmpz_cmp_ui(mpz_t, unsigned long int);
extern int __gmpz_cmp(mpz_t, mpz_t);
extern void __gmpz_clear(mpz_t);
extern void __gmpz_init(mpz_t);
extern void __gmpz_init_set(mpz_t, mpz_t);
extern void __gmpz_init_set_si(mpz_t, signed long int);
extern void __gmpz_init_set_str(mpz_t, const char*, int);
extern void __gmpz_add(mpz_t, const mpz_t, const mpz_t);
extern void __gmpz_add_ui(mpz_t, const mpz_t, unsigned long int);
extern void __gmpz_sub(mpz_t, const mpz_t, const mpz_t);
extern int pathcrawler_dimension(void*);
extern void pathcrawler_to_framac(char*);
extern int pathcrawler_assume_exception(char*,int);
extern void* malloc(unsigned long);
extern void free(void*);
extern int printf(char const * , ...);

/*@ requires \valid(a+(0 .. n-1));
    ensures
      \forall integer i;
        0 <= i < \old(n)-1 ==> *(\old(a)+i) <= *(\old(a)+(i+1));
    ensures
      \forall integer i;
        0 <= i < \old(n) ==>
        \numof(0, \old(n)-1, \lambda integer k; *(\old(a)+k)==*(\old(a)+i))
        ==
        \numof(0, \old(n)-1, \lambda integer k; \old(*(a+k))==*(\old(a)+i));
    assigns *(a+(0 .. n-1));
 */
extern void sort(int *a, int n);

void __stady_fct_0(int *a, int n);
int *__stady_term_2;
int main_precond(void)
{
  return 1;
}

void main(void)
{
  {
    int t[4];
    int t_before[4];
    int i;
    int n;
    n = 4;
    i = 0;
    while (1) {
      if (! (i < n)) {
                       pathcrawler_to_framac("@FC:REACHABLE_STMT:6");
                       break;
                     }t[i] = (13 - i) * ((i % 2) * 2 - 1);
                      t_before[i] = t[i];
                      i ++;}
       
    {
      __stady_fct_0(t,n);
      
    }
    printf("before:\t after:\n");
    i = 0;
    while (1) {
      if (! (i < n)) {
                       pathcrawler_to_framac("@FC:REACHABLE_STMT:17");
                       break;
                     }printf("%i \t %i\n",t_before[i],t[i]);
                      i ++;}
       
    printf("\n");
    return;
  }
}

void __stady_fct_0(int *a, int n) {
  if(1) {
    int old_n;
    int *old_a;
    int *old_ptr_a;
    old_n = n;
    old_a = a;
    mpz_t __stady_gmp_0;
    __gmpz_init_set_si(__stady_gmp_0,n);
    unsigned long __stady_term_0;
    unsigned long __stady_term_1;
    __stady_term_1 = __gmpz_get_ui(__stady_gmp_0);
    old_ptr_a = (int *)malloc(__stady_term_1 * (unsigned long)sizeof(int));
    __stady_term_1 = __gmpz_get_ui(__stady_gmp_0);
    __stady_term_0 = 0;
    while(__stady_term_0 < __stady_term_1) {
      *(old_ptr_a + __stady_term_0) = *(a + __stady_term_0);
      __stady_term_0 ++;
    }
    __gmpz_clear(__stady_gmp_0);
    mpz_t __stady_gmp_1;
    __gmpz_init_set_str(__stady_gmp_1,"0",10);
    mpz_t __stady_gmp_2;
    __gmpz_init_set_si(__stady_gmp_2,n);
    mpz_t __stady_gmp_3;
    __gmpz_init_set_str(__stady_gmp_3,"1",10);
    mpz_t __stady_gmp_4;
    __gmpz_init(__stady_gmp_4);
    __gmpz_sub(__stady_gmp_4,__stady_gmp_2,__stady_gmp_3);
    __gmpz_clear(__stady_gmp_2);
    __gmpz_clear(__stady_gmp_3);
    int __stady_pred_0;
    int __stady_pred_1;
    __stady_pred_1 = __gmpz_cmp(__stady_gmp_1,__stady_gmp_4);
    if(__stady_pred_1 <= 0) {
      int __stady_term_3;
      __stady_term_3 = pathcrawler_dimension(__stady_term_2);
      int __stady_term_4;
      __stady_term_4 = __gmpz_cmp_ui(__stady_gmp_4,__stady_term_3);
      int __stady_term_5;
      __stady_term_5 = __gmpz_cmp_ui(__stady_gmp_4,0);
      __stady_pred_0 = __stady_term_5 >= 0 && __stady_term_4 < 0;
    }
    else {
      __stady_pred_0 = 1;
    }
    __gmpz_clear(__stady_gmp_1);
    __gmpz_clear(__stady_gmp_4);
    if(! __stady_pred_0) {
      pathcrawler_assume_exception("",0);
    }
    mpz_t __stady_gmp_5;
    mpz_t __stady_gmp_6;
    __gmpz_init_set_str(__stady_gmp_6,"0",10);
    __gmpz_init_set(__stady_gmp_5,__stady_gmp_6);
    mpz_t __stady_gmp_7;
    __gmpz_init_set_si(__stady_gmp_7,n);
    mpz_t __stady_gmp_8;
    __gmpz_init_set_str(__stady_gmp_8,"1",10);
    mpz_t __stady_gmp_9;
    __gmpz_init(__stady_gmp_9);
    __gmpz_sub(__stady_gmp_9,__stady_gmp_7,__stady_gmp_8);
    __gmpz_clear(__stady_gmp_7);
    __gmpz_clear(__stady_gmp_8);
    int __stady_term_6;
    int __stady_term_7;
    __stady_term_7 = __gmpz_cmp(__stady_gmp_5,__stady_gmp_9);
    while(__stady_term_7 <= 0) {
      __stady_term_6 = (int)__gmpz_get_si(__stady_gmp_5);
      *(a + __stady_term_6) = *(__stady_term_2 + __stady_term_6);
      __gmpz_add_ui(__stady_gmp_5,__stady_gmp_5,1);
      __stady_term_7 = __gmpz_cmp(__stady_gmp_5,__stady_gmp_9);
    }
    __gmpz_clear(__stady_gmp_5);
    __gmpz_clear(__stady_gmp_6);
    __gmpz_clear(__stady_gmp_9);
    int __stady_pred_2;
    __stady_pred_2 = 1;
    {
      mpz_t __q_i;
      mpz_t __stady_gmp_10;
      __gmpz_init_set_str(__stady_gmp_10,"0",10);
      mpz_t __stady_gmp_11;
      __gmpz_init_set_si(__stady_gmp_11,old_n);
      mpz_t __stady_gmp_12;
      __gmpz_init_set_str(__stady_gmp_12,"1",10);
      mpz_t __stady_gmp_13;
      __gmpz_init(__stady_gmp_13);
      __gmpz_sub(__stady_gmp_13,__stady_gmp_11,__stady_gmp_12);
      __gmpz_clear(__stady_gmp_11);
      __gmpz_clear(__stady_gmp_12);
      __gmpz_init_set(__q_i,__stady_gmp_10);
      int __stady_term_8;
      __stady_term_8 = __gmpz_cmp(__q_i,__stady_gmp_13);
      while(__stady_term_8 < 0 && __stady_pred_2) {
        mpz_t __stady_gmp_14;
        __gmpz_init_set(__stady_gmp_14,__q_i);
        int __stady_term_9;
        __stady_term_9 = (int)__gmpz_get_si(__stady_gmp_14);
        __gmpz_clear(__stady_gmp_14);
        mpz_t __stady_gmp_15;
        __gmpz_init_set(__stady_gmp_15,__q_i);
        mpz_t __stady_gmp_16;
        __gmpz_init_set_str(__stady_gmp_16,"1",10);
        mpz_t __stady_gmp_17;
        __gmpz_init(__stady_gmp_17);
        __gmpz_add(__stady_gmp_17,__stady_gmp_15,__stady_gmp_16);
        __gmpz_clear(__stady_gmp_15);
        __gmpz_clear(__stady_gmp_16);
        int __stady_term_10;
        __stady_term_10 = (int)__gmpz_get_si(__stady_gmp_17);
        __gmpz_clear(__stady_gmp_17);
        __stady_pred_2 = *(old_a + __stady_term_9) <= *(old_a + __stady_term_10);
        __gmpz_add_ui(__q_i,__q_i,1);
        __stady_term_8 = __gmpz_cmp(__q_i,__stady_gmp_13);
      }
      __gmpz_clear(__q_i);
      __gmpz_clear(__stady_gmp_10);
      __gmpz_clear(__stady_gmp_13);
    }
    if(! __stady_pred_2) {
      pathcrawler_assume_exception("",0);
    }
    int __stady_pred_3;
    __stady_pred_3 = 1;
    {
      mpz_t __q_i;
      mpz_t __stady_gmp_18;
      __gmpz_init_set_str(__stady_gmp_18,"0",10);
      mpz_t __stady_gmp_19;
      __gmpz_init_set_si(__stady_gmp_19,old_n);
      __gmpz_init_set(__q_i,__stady_gmp_18);
      int __stady_term_11;
      __stady_term_11 = __gmpz_cmp(__q_i,__stady_gmp_19);
      while(__stady_term_11 < 0 && __stady_pred_3) {
        mpz_t __stady_gmp_20;
        __gmpz_init_set_si(__stady_gmp_20,0);
        {
          mpz_t __stady_gmp_21;
          __gmpz_init_set_str(__stady_gmp_21,"0",10);
          mpz_t __stady_gmp_22;
          __gmpz_init_set_si(__stady_gmp_22,old_n);
          mpz_t __stady_gmp_23;
          __gmpz_init_set_str(__stady_gmp_23,"1",10);
          mpz_t __stady_gmp_24;
          __gmpz_init(__stady_gmp_24);
          __gmpz_sub(__stady_gmp_24,__stady_gmp_22,__stady_gmp_23);
          __gmpz_clear(__stady_gmp_22);
          __gmpz_clear(__stady_gmp_23);
          mpz_t k;
          __gmpz_init_set(k,__stady_gmp_21);
          int __stady_term_14;
          __stady_term_14 = __gmpz_cmp(k,__stady_gmp_24);
          while(__stady_term_14 <= 0) {
            mpz_t __stady_gmp_25;
            __gmpz_init_set(__stady_gmp_25,k);
            int __stady_term_12;
            __stady_term_12 = (int)__gmpz_get_si(__stady_gmp_25);
            __gmpz_clear(__stady_gmp_25);
            mpz_t __stady_gmp_26;
            __gmpz_init_set(__stady_gmp_26,__q_i);
            int __stady_term_13;
            __stady_term_13 = (int)__gmpz_get_si(__stady_gmp_26);
            __gmpz_clear(__stady_gmp_26);
            if((*(old_a + __stady_term_12) == *(old_a + __stady_term_13)) != 0) {
              __gmpz_add_ui(__stady_gmp_20,__stady_gmp_20,1);
            }
            __gmpz_add_ui(k,k,1);
            __stady_term_14 = __gmpz_cmp(k,__stady_gmp_24);
          }
          __gmpz_clear(k);
          __gmpz_clear(__stady_gmp_21);
          __gmpz_clear(__stady_gmp_24);
        }
        mpz_t __stady_gmp_27;
        __gmpz_init_set_si(__stady_gmp_27,0);
        {
          mpz_t __stady_gmp_28;
          __gmpz_init_set_str(__stady_gmp_28,"0",10);
          mpz_t __stady_gmp_29;
          __gmpz_init_set_si(__stady_gmp_29,old_n);
          mpz_t __stady_gmp_30;
          __gmpz_init_set_str(__stady_gmp_30,"1",10);
          mpz_t __stady_gmp_31;
          __gmpz_init(__stady_gmp_31);
          __gmpz_sub(__stady_gmp_31,__stady_gmp_29,__stady_gmp_30);
          __gmpz_clear(__stady_gmp_29);
          __gmpz_clear(__stady_gmp_30);
          mpz_t k;
          __gmpz_init_set(k,__stady_gmp_28);
          int __stady_term_17;
          __stady_term_17 = __gmpz_cmp(k,__stady_gmp_31);
          while(__stady_term_17 <= 0) {
            mpz_t __stady_gmp_32;
            __gmpz_init_set(__stady_gmp_32,k);
            int __stady_term_15;
            __stady_term_15 = (int)__gmpz_get_si(__stady_gmp_32);
            __gmpz_clear(__stady_gmp_32);
            mpz_t __stady_gmp_33;
            __gmpz_init_set(__stady_gmp_33,__q_i);
            int __stady_term_16;
            __stady_term_16 = (int)__gmpz_get_si(__stady_gmp_33);
            __gmpz_clear(__stady_gmp_33);
            if((*(old_ptr_a + __stady_term_15) == *(old_a + __stady_term_16)) != 0) {
              __gmpz_add_ui(__stady_gmp_27,__stady_gmp_27,1);
            }
            __gmpz_add_ui(k,k,1);
            __stady_term_17 = __gmpz_cmp(k,__stady_gmp_31);
          }
          __gmpz_clear(k);
          __gmpz_clear(__stady_gmp_28);
          __gmpz_clear(__stady_gmp_31);
        }
        int __stady_term_18;
        __stady_term_18 = __gmpz_cmp(__stady_gmp_20,__stady_gmp_27);
        __gmpz_clear(__stady_gmp_20);
        __gmpz_clear(__stady_gmp_27);
        __stady_pred_3 = __stady_term_18 == 0;
        __gmpz_add_ui(__q_i,__q_i,1);
        __stady_term_11 = __gmpz_cmp(__q_i,__stady_gmp_19);
      }
      __gmpz_clear(__q_i);
      __gmpz_clear(__stady_gmp_18);
      __gmpz_clear(__stady_gmp_19);
    }
    if(! __stady_pred_3) {
      pathcrawler_assume_exception("",0);
    }
    free(old_ptr_a);
  }
}

[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing __sd_instru_simulate_sort_main.c (with preprocessing)
[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing __sd_instru_simulate_sort_main.c (with preprocessing)
[pc] analyzing...
[pc] Compiling pathcrawler___sd_instru_simulate_sort_main/lanceur_main utilities ...
[pc] Compiling pathcrawler___sd_instru_simulate_sort_main/lanceur_main ...
[pc] generating tests...
before:	 after:
-13 	 -13
12 	 -11
-11 	 10
10 	 12

[pc] Starting lanceur_main (isc version)
[pc] Starting lanceur_pathcrawler__main_precond (isc version)
[pc] generation finished
[stady] all-paths: true
[stady] 1257 test cases
