[kernel] preprocessing with "gcc -C -E -I.  tests/next_subset/next_subset.c"
[stady] warning: Native Precondition:
                 ∀ ℤ __q_i;
                   0 ≤ __q_i ∧ __q_i < n ⇒ *(s+__q_i) ≡ 0 ∨ *(s+__q_i) ≡ 1 unsupported
[stady:generated-pl] generated Prolog precondition:
:- module(test_parameters).
:- import create_input_val/3 from substitution.
:- export dom/4.
:- export create_input_vals/2.
:- export unquantif_preconds/2.
:- export quantif_preconds/2.
:- export strategy/2.
:- export precondition_of/2.

dom(0,0,0,0).
dom('nextSubset', cont('s',_), [], int([-2147483648..2147483647])).
dom('pathcrawler__nextSubset_precond',A,B,C) :-
  dom('nextSubset',A,B,C).
create_input_vals('nextSubset', Ins):-
  create_input_val(dim('s'), int([1..4294967295]),Ins),
  create_input_val('n', int([-2147483648..2147483647]),Ins),
  true.
create_input_vals('pathcrawler__nextSubset_precond',Ins) :-
  create_input_vals('nextSubset',Ins).
quantif_preconds('nextSubset',
  [
  ]
).
quantif_preconds('pathcrawler__nextSubset_precond',A) :-
  quantif_preconds('nextSubset',A).
unquantif_preconds('nextSubset',
  [
    cond(egal,dim('s'),+(int(math), -(int(math), 'n', 1), 1),pre),
    cond(infegal,'n',3,pre),
    cond(supegal,'n',0,pre)
  ]
).
unquantif_preconds('pathcrawler__nextSubset_precond',A) :-
  unquantif_preconds('nextSubset',A).
strategy('nextSubset',[]).
strategy('pathcrawler__nextSubset_precond',A) :-
  strategy('nextSubset',A).
precondition_of('nextSubset','pathcrawler__nextSubset_precond').
[stady:generated-c] generated C file:
/* Generated by Frama-C */
extern int pathcrawler_assert_exception(char*,int);
extern int pathcrawler_dimension(void*);
extern void pathcrawler_to_framac(char*);
/*@
predicate is_dset{L}(int *a, integer n) =
  \forall integer i; 0 <= i && i < n ==> *(a+i) == 0 || *(a+i) == 1;
 */
/*@
predicate is_eq{L1, L2}(int *a, integer n) =
  \forall integer i; 0 <= i && i < n ==> \at(*(a+i),L1) == \at(*(a+i),L2);
 */
/*@
predicate lt{L1, L2}(int *a, integer i) = \at(*(a+i),L1) < \at(*(a+i),L2);
 */
int nextSubset_precond(int *s, int n)
{
int __stady_pred_0 = 1;
{
int __q_i;
for (__q_i = 0; __q_i < n &&  __stady_pred_0; __q_i++) {
__stady_pred_0 = ((*(s + __q_i) == 0) || (*(s + __q_i) == 1));
}
}
if (!__stady_pred_0) return 0;
return 1;
}

int nextSubset(int *s, int n)
{
  int *old_s = s;
  int *old_ptr_s;
  old_ptr_s = malloc((((n - 1) + 1))*sizeof(int));
  int __stady_iter_0;
  for (__stady_iter_0 = 0; __stady_iter_0 < ((n - 1) + 1); __stady_iter_0++) {
  old_ptr_s[__stady_iter_0] = s[__stady_iter_0];
  }
  int old_n = n;
  {
    int __retres;
    int i;
    int k;
    k = n - 1;
    {
      if ((k) < 0)pathcrawler_assert_exception("Variant non positive",4);
      if(!(((- 1) <= k) && (k <= (n - 1))))pathcrawler_assert_exception("Loop invariant not established!", 6);
      while (1) {
        int old_variant_4 = k;
        {
          if (! (k >= 0)) { pathcrawler_to_framac("@FC:REACHABLE_STMT:5");
                          break; }
                          
          if (*(s + k) == 0) { pathcrawler_to_framac("@FC:REACHABLE_STMT:9");
                             break; }
                             
          k --;
        }if(!(((- 1) <= k) && (k <= (n - 1))))pathcrawler_assert_exception("Loop invariant not preserved!", 6);
        if ((old_variant_4) < 0)pathcrawler_assert_exception("Variant non positive",4);
        if ((k) >= old_variant_4)pathcrawler_assert_exception("Variant non decreasing",4);}
         }
       
    if (k == -1) {
      { pathcrawler_to_framac("@FC:REACHABLE_STMT:14");
      __retres = -1; }
      
      goto return_label;
    }
    *(s + k) = 1;
    i = k + 1;
    {
      if (((n - i)) < 0)pathcrawler_assert_exception("Variant non positive",12);int __stady_pred_1 = 1;
      {
      int __q_i;
      for (__q_i = 0; __q_i < i &&  __stady_pred_1; __q_i++) {
      __stady_pred_1 = ((*(s + __q_i) == 0) || (*(s + __q_i) == 1));
      }
      }
      if(!__stady_pred_1)pathcrawler_assert_exception("Loop invariant not established!", 8);
      if(!(((k + 1) <= i) && (i <= n)))pathcrawler_assert_exception("Loop invariant not established!", 1);
      while (1) {
        int old_variant_12 = (n - i);
        {
          if (! (i < n)) { pathcrawler_to_framac("@FC:REACHABLE_STMT:21");
                         break; }
                         
          *(s + i) = 0;
          i ++;
        }if(!(((k + 1) <= i) && (i <= n)))pathcrawler_assert_exception("Loop invariant not preserved!", 1);
        int __stady_pred_2 = 1;
        {
        int __q_i;
        for (__q_i = 0; __q_i < i &&  __stady_pred_2; __q_i++) {
        __stady_pred_2 = ((*(s + __q_i) == 0) || (*(s + __q_i) == 1));
        }
        }
        if(!__stady_pred_2)pathcrawler_assert_exception("Loop invariant not preserved!", 8);
        if ((old_variant_12) < 0)pathcrawler_assert_exception("Variant non positive",12);
        if (((n - i)) >= old_variant_12)pathcrawler_assert_exception("Variant non decreasing",12);}
         }
       
    __retres = k;
    return_label:
      {
        int __stady_pred_3 = 1;
        {
        int __q_i;
        for (__q_i = 0; __q_i < old_n &&  __stady_pred_3; __q_i++) {
        __stady_pred_3 = ((*(old_s + __q_i) == 0) || (*(old_s + __q_i) == 1));
        }
        }
        if(!__stady_pred_3)pathcrawler_assert_exception("Post-condition!", 11);
        if(!(((- 1) <= __retres) && (__retres < old_n)))pathcrawler_assert_exception("Post-condition!", 15);
        int __stady_pred_4 = 1;
        if ((__retres == (- 1))) {
        int __stady_pred_5 = 1;
        {
        int __q_i;
        for (__q_i = 0; __q_i < old_n &&  __stady_pred_5; __q_i++) {
        __stady_pred_5 = (*(old_ptr_s + __q_i) == *(old_s + __q_i));
        }
        }
        __stady_pred_4 = __stady_pred_5;
        }
        if(!__stady_pred_4)pathcrawler_assert_exception("Post-condition!", 3);
        int __stady_pred_6 = 1;
        if ((__retres != (- 1))) {
        int __stady_pred_7 = 1;
        {
        int __q_i;
        for (__q_i = 0; __q_i < __retres &&  __stady_pred_7; __q_i++) {
        __stady_pred_7 = (*(old_ptr_s + __q_i) == *(old_s + __q_i));
        }
        }
        __stady_pred_6 = __stady_pred_7;
        }
        if(!__stady_pred_6)pathcrawler_assert_exception("Post-condition!", 9);
        int __stady_pred_8 = 1;
        if ((__retres != (- 1))) {
        __stady_pred_8 = (*(old_ptr_s + __retres) < *(old_s + __retres));
        }
        if(!__stady_pred_8)pathcrawler_assert_exception("Post-condition!", 13);
        
        }
      free(old_ptr_s);
      return __retres;
  }
}


[kernel] preprocessing with "gcc -C -E -I.  stady_temp.c"
stady_temp.c:33:[kernel] warning: Calling undeclared function malloc. Old style K&R code?
stady_temp.c:144:[kernel] warning: Calling undeclared function free. Old style K&R code?
[kernel] preprocessing with "gcc -C -E -I. -include /usr/local/share/frama-c/pc/lib/lanceur_deb.h stady_temp.c"
stady_temp.c:33:[kernel] warning: Calling undeclared function malloc. Old style K&R code?
stady_temp.c:144:[kernel] warning: Calling undeclared function free. Old style K&R code?
[pc] analyzing...
[pc] Compiling pathcrawler_stady_temp/lanceur_nextSubset utilities ...
[pc] Compiling pathcrawler_stady_temp/lanceur_nextSubset ...
[pc] generating tests...
[pc] Starting lanceur_nextSubset (isc version)
[pc] Starting lanceur_pathcrawler__nextSubset_precond (isc version)
[pc] generation finished
[stady] all-paths: true
[stady] 611 test cases
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'nextSubset'
--------------------------------------------------------------------------------

[  Valid  ] Post-condition (file tests/next_subset/next_subset.c, line 16)
            by StaDy.
[  Valid  ] Post-condition (file tests/next_subset/next_subset.c, line 17)
            by StaDy.
[  Valid  ] Post-condition (file tests/next_subset/next_subset.c, line 18)
            by StaDy.
[  Valid  ] Post-condition (file tests/next_subset/next_subset.c, line 19)
            by StaDy.
[  Valid  ] Post-condition (file tests/next_subset/next_subset.c, line 20)
            by StaDy.
[    -    ] Assigns (file tests/next_subset/next_subset.c, line 15)
[  Valid  ] Loop variant at loop (file tests/next_subset/next_subset.c, line 27)
            by StaDy.
[  Valid  ] Loop variant at loop (file tests/next_subset/next_subset.c, line 34)
            by StaDy.
[  Valid  ] Invariant (file tests/next_subset/next_subset.c, line 24)
            by StaDy.
[  Valid  ] Invariant (file tests/next_subset/next_subset.c, line 30)
            by StaDy.
[  Valid  ] Invariant (file tests/next_subset/next_subset.c, line 31)
            by StaDy.
[    -    ] Default behavior
            tried with Frama-C kernel.

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
    10 Completely validated
     2 To be validated
    12 Total
--------------------------------------------------------------------------------
