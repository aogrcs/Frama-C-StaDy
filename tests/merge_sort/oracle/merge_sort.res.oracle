[kernel] preprocessing with "gcc -C -E -I.  tests/merge_sort/merge_sort.c"
[stady] warning: Native Precondition:
                 \separated(table, ret) unsupported
[stady:generated-pl] :- module(test_parameters).
                     :- import create_input_val/3 from substitution.
                     :- export dom/4.
                     :- export create_input_vals/2.
                     :- export unquantif_preconds/2.
                     :- export quantif_preconds/2.
                     :- export strategy/2.
                     :- export precondition_of/2.
                     
                     dom(0,0,0,0).
[stady:generated-pl] dom('merge_sort', cont('table',_), [], int([-2147483648..2147483647])).
[stady:generated-pl] dom('merge_sort', cont('ret',_), [], int([-2147483648..2147483647])).
[stady:generated-pl] dom('pathcrawler__merge_sort_precond',A,B,C) :- dom('merge_sort',A,B,C).
[stady:generated-pl] create_input_vals('merge_sort', Ins):-
[stady:generated-pl] create_input_val(dim('table'), int([1..4294967295]),Ins),
[stady:generated-pl] create_input_val(dim('ret'), int([1..4294967295]),Ins),
[stady:generated-pl] create_input_val('l', int([-2147483648..2147483647]),Ins),
[stady:generated-pl] true.
[stady:generated-pl] create_input_vals('pathcrawler__merge_sort_precond',Ins) :- create_input_vals('merge_sort',Ins).
[stady:generated-pl] quantif_preconds('merge_sort',[]).
[stady:generated-pl] quantif_preconds('pathcrawler__merge_sort_precond',A) :- quantif_preconds('merge_sort',A).
[stady:generated-pl] unquantif_preconds('merge_sort',[cond(egal,dim('ret'),+(int(math), -(int(math), 'l', 1), 1),pre), cond(egal,dim('table'),+(int(math), -(int(math), 'l', 1), 1),pre), cond(infegal,'l',3,pre), cond(infegal,1,'l',pre)]).
[stady:generated-pl] unquantif_preconds('pathcrawler__merge_sort_precond',A) :- unquantif_preconds('merge_sort',A).
[stady:generated-pl] strategy('merge_sort',[]).
[stady:generated-pl] strategy('pathcrawler__merge_sort_precond',A) :- strategy('merge_sort',A).
[stady:generated-pl] precondition_of('merge_sort','pathcrawler__merge_sort_precond').
[stady] warning: \separated(table, ret) unsupported
[stady:generated-c] generated C file:
/* Generated by Frama-C */
extern int pathcrawler_assert_exception(char*,int);
extern int pathcrawler_dimension(void*);
extern void pathcrawler_to_framac(char*);
void BottomUpMerge(int *A, int iLeft, int iRight, int iEnd, int *B)
{
  if(!((iRight - 1) >= 0 && pathcrawler_dimension(A) > (iRight - 1)))pathcrawler_assert_exception("Pre-condition!", 18);
  if(!((iEnd - 1) >= 0 && pathcrawler_dimension(B) > (iEnd - 1)))pathcrawler_assert_exception("Pre-condition!", 26);
  int *old_A = A;
  int *old_ptr_A;
  old_ptr_A = malloc((((iRight - 1) + 1))*sizeof(int));
  int __stady_iter_0;
  for (__stady_iter_0 = 0; __stady_iter_0 < ((iRight - 1) + 1); __stady_iter_0++) {
  old_ptr_A[__stady_iter_0] = A[__stady_iter_0];
  }
  int old_iLeft = iLeft;
  int old_iRight = iRight;
  int old_iEnd = iEnd;
  int *old_B = B;
  int *old_ptr_B;
  old_ptr_B = malloc((((iEnd - 1) + 1))*sizeof(int));
  int __stady_iter_1;
  for (__stady_iter_1 = 0; __stady_iter_1 < ((iEnd - 1) + 1); __stady_iter_1++) {
  old_ptr_B[__stady_iter_1] = B[__stady_iter_1];
  }
  {
    int i0;
    int i1;
    int j;
    i0 = iLeft;
    i1 = iRight;
    j = iLeft;
    {
      if (((iEnd - j)) < 0)pathcrawler_assert_exception("Variant non positive",23);
      if(!((((i0 - iLeft) + i1) - iRight) == (j - iLeft)))pathcrawler_assert_exception("Loop invariant not established!", 4);
      if(!((iRight <= i1) && (i1 <= iEnd)))pathcrawler_assert_exception("Loop invariant not established!", 24);
      if(!((iLeft <= i0) && (i0 <= iRight)))pathcrawler_assert_exception("Loop invariant not established!", 16);
      if(!((iLeft <= j) && (j <= iEnd)))pathcrawler_assert_exception("Loop invariant not established!", 9);
      while (1) {
        int old_variant_23 = (iEnd - j);
        {
          if (! (j < iEnd)) { pathcrawler_to_framac("@FC:REACHABLE_STMT:9");
                            break; }
                            
          if (i0 < iRight) {
            { pathcrawler_to_framac("@FC:REACHABLE_STMT:14");
            if (i1 >= iEnd) { pathcrawler_to_framac("@FC:REACHABLE_STMT:15");
                            goto _LOR; }
                            
            else 
              { pathcrawler_to_framac("@FC:REACHABLE_STMT:17");
              if (*(A + i0) <= *(A + i1)) {
                _LOR:
                  { pathcrawler_to_framac("@FC:REACHABLE_STMT:18");
                  *(B + j) = *(A + i0);
                  i0 ++; }
                  
              }
              else { pathcrawler_to_framac("@FC:REACHABLE_STMT:21");
                   goto _LAND; }
                    }
               }
            
          }
          else {
            _LAND:
              { pathcrawler_to_framac("@FC:REACHABLE_STMT:22");
              *(B + j) = *(A + i1);
              i1 ++; }
              
          }
          j ++;
        }if(!((iLeft <= j) && (j <= iEnd)))pathcrawler_assert_exception("Loop invariant not preserved!", 9);
        if(!((iLeft <= i0) && (i0 <= iRight)))pathcrawler_assert_exception("Loop invariant not preserved!", 16);
        if(!((iRight <= i1) && (i1 <= iEnd)))pathcrawler_assert_exception("Loop invariant not preserved!", 24);
        if(!((((i0 - iLeft) + i1) - iRight) == (j - iLeft)))pathcrawler_assert_exception("Loop invariant not preserved!", 4);
        if ((old_variant_23) < 0)pathcrawler_assert_exception("Variant non positive",23);
        if (((iEnd - j)) >= old_variant_23)pathcrawler_assert_exception("Variant non decreasing",23);}
         }
       
    free(old_ptr_A);
    free(old_ptr_B);
    return;
  }
}

void CopyArray(int *A, int *B, int n)
{
  if(!((n - 1) >= 0 && pathcrawler_dimension(A) > (n - 1)))pathcrawler_assert_exception("Pre-condition!", 6);
  if(!((n - 1) >= 0 && pathcrawler_dimension(B) > (n - 1)))pathcrawler_assert_exception("Pre-condition!", 15);
  int *old_A = A;
  int *old_ptr_A;
  old_ptr_A = malloc((((n - 1) + 1))*sizeof(int));
  int __stady_iter_0;
  for (__stady_iter_0 = 0; __stady_iter_0 < ((n - 1) + 1); __stady_iter_0++) {
  old_ptr_A[__stady_iter_0] = A[__stady_iter_0];
  }
  int *old_B = B;
  int *old_ptr_B;
  old_ptr_B = malloc((((n - 1) + 1))*sizeof(int));
  int __stady_iter_1;
  for (__stady_iter_1 = 0; __stady_iter_1 < ((n - 1) + 1); __stady_iter_1++) {
  old_ptr_B[__stady_iter_1] = B[__stady_iter_1];
  }
  int old_n = n;
  {
    int i;
    i = 0;
    {
      if (((n - i)) < 0)pathcrawler_assert_exception("Variant non positive",3);
      if(!((0 <= i) && (i <= n)))pathcrawler_assert_exception("Loop invariant not established!", 0);
      while (1) {
        int old_variant_3 = (n - i);
        {
          if (! (i < n)) { pathcrawler_to_framac("@FC:REACHABLE_STMT:32");
                         break; }
                         
          *(A + i) = *(B + i);
          i ++;
        }if(!((0 <= i) && (i <= n)))pathcrawler_assert_exception("Loop invariant not preserved!", 0);
        if ((old_variant_3) < 0)pathcrawler_assert_exception("Variant non positive",3);
        if (((n - i)) >= old_variant_3)pathcrawler_assert_exception("Variant non decreasing",3);}
         }
       
    free(old_ptr_A);
    free(old_ptr_B);
    return;
  }
}

int min(int x, int y)
{
  int old_x = x;
  int old_y = y;
  {
    int tmp;
    if (x <= y) { pathcrawler_to_framac("@FC:REACHABLE_STMT:40");
                tmp = x; }
                
    else { pathcrawler_to_framac("@FC:REACHABLE_STMT:41");
         tmp = y; }
         
    return tmp;
  }
}

void BottomUpSort(int n, int *A, int *B)
{
  if(!((n - 1) >= 0 && pathcrawler_dimension(A) > (n - 1)))pathcrawler_assert_exception("Pre-condition!", 21);
  if(!((n - 1) >= 0 && pathcrawler_dimension(B) > (n - 1)))pathcrawler_assert_exception("Pre-condition!", 2);
  int old_n = n;
  int *old_A = A;
  int *old_ptr_A;
  old_ptr_A = malloc((((n - 1) + 1))*sizeof(int));
  int __stady_iter_0;
  for (__stady_iter_0 = 0; __stady_iter_0 < ((n - 1) + 1); __stady_iter_0++) {
  old_ptr_A[__stady_iter_0] = A[__stady_iter_0];
  }
  int *old_B = B;
  int *old_ptr_B;
  old_ptr_B = malloc((((n - 1) + 1))*sizeof(int));
  int __stady_iter_1;
  for (__stady_iter_1 = 0; __stady_iter_1 < ((n - 1) + 1); __stady_iter_1++) {
  old_ptr_B[__stady_iter_1] = B[__stady_iter_1];
  }
  {
    int width;
    width = 1;
    {
      if (((n - width)) < 0)pathcrawler_assert_exception("Variant non positive",11);
      if(!((1 <= width) && (width <= ((2 * n) - 1))))pathcrawler_assert_exception("Loop invariant not established!", 22);
      while (1) {
        int old_variant_11 = (n - width);
        {
          if (! (width < n)) { pathcrawler_to_framac("@FC:REACHABLE_STMT:48");
                             break; }
                             
          {
            int i;
            i = 0;
            {
              if (((n - i)) < 0)pathcrawler_assert_exception("Variant non positive",8);
              if(!((0 <= i) && (i <= ((n + (2 * width)) - 1))))pathcrawler_assert_exception("Loop invariant not established!", 12);
              while (1) {
                int old_variant_8 = (n - i);
                {
                  if (! (i < n)) { pathcrawler_to_framac("@FC:REACHABLE_STMT:54");
                                 break; }
                                 
                  {
                    int tmp;
                    int tmp_0;
                    {
                      /*sequence*/
                      ;
                      tmp = min(i + 2 * width,n);
                      tmp_0 = min(i + width,n);
                      ;
                      ;
                    }
                    BottomUpMerge(A,i,tmp_0,tmp,B);
                  }
                  i += 2 * width;
                }if(!((0 <= i) && (i <= ((n + (2 * width)) - 1))))pathcrawler_assert_exception("Loop invariant not preserved!", 12);
                if ((old_variant_8) < 0)pathcrawler_assert_exception("Variant non positive",8);
                if (((n - i)) >= old_variant_8)pathcrawler_assert_exception("Variant non decreasing",8);}
                 }
               
            CopyArray(A,B,n);
          }
          width = 2 * width;
        }if(!((1 <= width) && (width <= ((2 * n) - 1))))pathcrawler_assert_exception("Loop invariant not preserved!", 22);
        if ((old_variant_11) < 0)pathcrawler_assert_exception("Variant non positive",11);
        if (((n - width)) >= old_variant_11)pathcrawler_assert_exception("Variant non decreasing",11);}
         }
       
    free(old_ptr_A);
    free(old_ptr_B);
    return;
  }
}

int merge_sort_precond(int *table, int l, int *ret)
{
return 1;
}

void merge_sort(int *table, int l, int *ret)
{
  int *old_table = table;
  int *old_ptr_table;
  old_ptr_table = malloc((((l - 1) + 1))*sizeof(int));
  int __stady_iter_0;
  for (__stady_iter_0 = 0; __stady_iter_0 < ((l - 1) + 1); __stady_iter_0++) {
  old_ptr_table[__stady_iter_0] = table[__stady_iter_0];
  }
  int old_l = l;
  int *old_ret = ret;
  int *old_ptr_ret;
  old_ptr_ret = malloc((((l - 1) + 1))*sizeof(int));
  int __stady_iter_1;
  for (__stady_iter_1 = 0; __stady_iter_1 < ((l - 1) + 1); __stady_iter_1++) {
  old_ptr_ret[__stady_iter_1] = ret[__stady_iter_1];
  }
  {
    BottomUpSort(l,table,ret);
    {
      int __stady_pred_0 = 1;
      {
      int __q_i;
      for (__q_i = 0; __q_i < (old_l - 1) &&  __stady_pred_0; __q_i++) {
      __stady_pred_0 = (*(old_ret + __q_i) <= *(old_ret + (__q_i + 1)));
      }
      }
      if(!__stady_pred_0)pathcrawler_assert_exception("Post-condition!", 10);
      
      }
    free(old_ptr_table);
    free(old_ptr_ret);
    return;
  }
}


[kernel] preprocessing with "gcc -C -E -I.  stady_temp.c"
stady_temp.c:11:[kernel] warning: Calling undeclared function malloc. Old style K&R code?
stady_temp.c:81:[kernel] warning: Calling undeclared function free. Old style K&R code?
[kernel] preprocessing with "gcc -C -E -I. -include /usr/local/share/frama-c/pc/lib/lanceur_deb.h stady_temp.c"
stady_temp.c:11:[kernel] warning: Calling undeclared function malloc. Old style K&R code?
stady_temp.c:81:[kernel] warning: Calling undeclared function free. Old style K&R code?
[pc] analyzing...
[pc] Compiling pathcrawler_stady_temp/lanceur_merge_sort utilities ...
[pc] Compiling pathcrawler_stady_temp/lanceur_merge_sort ...
[pc] generating tests...
[pc] Starting lanceur_merge_sort (isc version)
[pc] Starting lanceur_pathcrawler__merge_sort_precond (isc version)
[pc] generation finished
[stady] all-paths: true
[stady] 970 test cases
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'BottomUpMerge'
--------------------------------------------------------------------------------

[  Valid  ] Pre-condition (file tests/merge_sort/merge_sort.c, line 6)
            by StaDy.
[  Valid  ] Pre-condition (file tests/merge_sort/merge_sort.c, line 7)
            by StaDy.
[  Valid  ] Loop variant at loop (file tests/merge_sort/merge_sort.c, line 20)
            by StaDy.
[  Valid  ] Invariant (file tests/merge_sort/merge_sort.c, line 13)
            by StaDy.
[  Valid  ] Invariant (file tests/merge_sort/merge_sort.c, line 14)
            by StaDy.
[  Valid  ] Invariant (file tests/merge_sort/merge_sort.c, line 15)
            by StaDy.
[  Valid  ] Invariant (file tests/merge_sort/merge_sort.c, line 16)
            by StaDy.
[  Valid  ] Default behavior
            by Frama-C kernel.

--------------------------------------------------------------------------------
--- Properties of Function 'CopyArray'
--------------------------------------------------------------------------------

[  Valid  ] Pre-condition (file tests/merge_sort/merge_sort.c, line 34)
            by StaDy.
[  Valid  ] Pre-condition (file tests/merge_sort/merge_sort.c, line 35)
            by StaDy.
[  Valid  ] Loop variant at loop (file tests/merge_sort/merge_sort.c, line 44)
            by StaDy.
[  Valid  ] Invariant (file tests/merge_sort/merge_sort.c, line 39)
            by StaDy.
[  Valid  ] Default behavior
            by Frama-C kernel.

--------------------------------------------------------------------------------
--- Properties of Function 'BottomUpSort'
--------------------------------------------------------------------------------

[  Valid  ] Pre-condition (file tests/merge_sort/merge_sort.c, line 55)
            by StaDy.
[  Valid  ] Pre-condition (file tests/merge_sort/merge_sort.c, line 56)
            by StaDy.
[  Valid  ] Loop variant at loop (file tests/merge_sort/merge_sort.c, line 68)
            by StaDy.
[  Valid  ] Loop variant at loop (file tests/merge_sort/merge_sort.c, line 75)
            by StaDy.
[  Valid  ] Invariant (file tests/merge_sort/merge_sort.c, line 65)
            by StaDy.
[  Valid  ] Invariant (file tests/merge_sort/merge_sort.c, line 72)
            by StaDy.
[  Valid  ] Default behavior
            by Frama-C kernel.

--------------------------------------------------------------------------------
--- Properties of Function 'merge_sort'
--------------------------------------------------------------------------------

[  Valid  ] Post-condition (file tests/merge_sort/merge_sort.c, line 94)
            by StaDy.
[  Valid  ] Default behavior
            by Frama-C kernel.

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
    22 Completely validated
    22 Total
--------------------------------------------------------------------------------
