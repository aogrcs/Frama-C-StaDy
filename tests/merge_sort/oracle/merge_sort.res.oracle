[kernel] preprocessing with "gcc -C -E -I.  tests/merge_sort/merge_sort.c"
[kernel] preprocessing with "gcc -C -E -I.  externals.c"
tests/merge_sort/merge_sort.c:96:[stady] warning: Native Precondition:
                 \separated(table, ret) unsupported
[stady:generated-pl] generated Prolog precondition:
:- module(test_parameters).
:- import create_input_val/3 from substitution.
:- export dom/4.
:- export create_input_vals/2.
:- export unquantif_preconds/2.
:- export quantif_preconds/2.
:- export strategy/2.
:- export precondition_of/2.

dom(0,0,0,0).
dom('merge_sort', dim('table'), [], int([1..4294967295])).
dom('merge_sort', dim('ret'), [], int([1..4294967295])).
dom('merge_sort', cont('table',_), [], int([-2147483648..2147483647])).
dom('merge_sort', cont('ret',_), [], int([-2147483648..2147483647])).
dom('pathcrawler__merge_sort_precond',A,B,C) :-
  dom('merge_sort',A,B,C).
create_input_vals('merge_sort', Ins):-
  create_input_val(dim('table'), int([1..4294967295]),Ins),
  create_input_val(dim('ret'), int([1..4294967295]),Ins),
  create_input_val('l', int([1..3]),Ins),
  true.
create_input_vals('pathcrawler__merge_sort_precond',Ins) :-
  create_input_vals('merge_sort',Ins).
quantif_preconds('merge_sort',
  [
  ]
).
quantif_preconds('pathcrawler__merge_sort_precond',A) :-
  quantif_preconds('merge_sort',A).
unquantif_preconds('merge_sort',
  [
    cond(egal,dim('ret'),+(int(math), -(int(math), 'l', 1), 1),pre),
    cond(egal,dim('table'),+(int(math), -(int(math), 'l', 1), 1),pre)
  ]
).
unquantif_preconds('pathcrawler__merge_sort_precond',A) :-
  unquantif_preconds('merge_sort',A).
strategy('merge_sort',[]).
strategy('pathcrawler__merge_sort_precond',A) :-
  strategy('merge_sort',A).
precondition_of('merge_sort','pathcrawler__merge_sort_precond').
tests/merge_sort/merge_sort.c:96:[stady] warning: \separated(table, ret) unsupported
[stady:generated-c] generated C file:
/* Generated by Frama-C */
struct __anonstruct___mpz_struct_1 {int _mp_alloc ;int _mp_size ;unsigned long *_mp_d ;};typedef struct __anonstruct___mpz_struct_1 __mpz_struct;typedef __mpz_struct mpz_t[1];
extern signed long int __gmpz_get_si(mpz_t);
extern int __gmpz_cmp_ui(mpz_t, unsigned long int);
extern int __gmpz_cmp(mpz_t, mpz_t);
extern void __gmpz_clear(mpz_t);
extern void __gmpz_init(mpz_t);
extern void __gmpz_init_set(mpz_t, mpz_t);
extern void __gmpz_init_set_si(mpz_t, signed long int);
extern void __gmpz_init_set_str(mpz_t, const char*, int);
extern void __gmpz_add(mpz_t, const mpz_t, const mpz_t);
extern void __gmpz_add_ui(mpz_t, const mpz_t, unsigned long int);
extern void __gmpz_sub(mpz_t, const mpz_t, const mpz_t);
extern void __gmpz_mul(mpz_t, const mpz_t, const mpz_t);
extern int pathcrawler_assert_exception(char*,int);
extern int pathcrawler_dimension(void*);
extern void pathcrawler_to_framac(char*);
extern void* malloc(unsigned long);
extern void free(void*);
void BottomUpMerge(int *A, int iLeft, int iRight, int iEnd, int *B)
{
  mpz_t __stady_gmp_0;
  __gmpz_init_set_si(__stady_gmp_0, iRight);
  mpz_t __stady_gmp_1;
  __gmpz_init_set_str(__stady_gmp_1, "1", 10);
  mpz_t __stady_gmp_2;
  __gmpz_init(__stady_gmp_2);
  __gmpz_sub(__stady_gmp_2, __stady_gmp_0, __stady_gmp_1);
  __gmpz_clear(__stady_gmp_0);
  __gmpz_clear(__stady_gmp_1);
  int __stady_pred_0;
  int __stady_term_0;
  __stady_term_0 = __gmpz_cmp_ui(__stady_gmp_2, 0);
  int __stady_term_1;
  __stady_term_1 = pathcrawler_dimension(A);
  int __stady_term_2;
  __stady_term_2 = __gmpz_cmp_ui(__stady_gmp_2, __stady_term_1);
  __stady_pred_0 = __stady_term_0 >= 0 && __stady_term_2 < 0;
  __gmpz_clear(__stady_gmp_2);
  if(! __stady_pred_0) {
    pathcrawler_assert_exception("Pre-condition!", 18);
  }
  mpz_t __stady_gmp_3;
  __gmpz_init_set_si(__stady_gmp_3, iEnd);
  mpz_t __stady_gmp_4;
  __gmpz_init_set_str(__stady_gmp_4, "1", 10);
  mpz_t __stady_gmp_5;
  __gmpz_init(__stady_gmp_5);
  __gmpz_sub(__stady_gmp_5, __stady_gmp_3, __stady_gmp_4);
  __gmpz_clear(__stady_gmp_3);
  __gmpz_clear(__stady_gmp_4);
  int __stady_pred_1;
  int __stady_term_3;
  __stady_term_3 = __gmpz_cmp_ui(__stady_gmp_5, 0);
  int __stady_term_4;
  __stady_term_4 = pathcrawler_dimension(B);
  int __stady_term_5;
  __stady_term_5 = __gmpz_cmp_ui(__stady_gmp_5, __stady_term_4);
  __stady_pred_1 = __stady_term_3 >= 0 && __stady_term_5 < 0;
  __gmpz_clear(__stady_gmp_5);
  if(! __stady_pred_1) {
    pathcrawler_assert_exception("Pre-condition!", 26);
  }
  int *old_A;
  int *old_ptr_A;
  old_A = A;
  mpz_t __stady_gmp_6;
  __gmpz_init_set_si(__stady_gmp_6, iRight);
  int __stady_term_6;
  unsigned long __stady_term_7;
  __stady_term_7 = __gmpz_get_si(__stady_gmp_6);
  old_ptr_A = malloc(__stady_term_7 * (unsigned long)sizeof(int));
  __stady_term_7 = __gmpz_get_si(__stady_gmp_6);
  for(__stady_term_6 = 0; (unsigned long)__stady_term_6 < __stady_term_7; __stady_term_6 = 
    __stady_term_6 + 1) {
    old_ptr_A[__stady_term_6] = A[__stady_term_6];
  }
  __gmpz_clear(__stady_gmp_6);
  int old_iLeft;
  old_iLeft = iLeft;
  int old_iRight;
  old_iRight = iRight;
  int old_iEnd;
  old_iEnd = iEnd;
  int *old_B;
  int *old_ptr_B;
  old_B = B;
  mpz_t __stady_gmp_7;
  __gmpz_init_set_si(__stady_gmp_7, iEnd);
  int __stady_term_8;
  unsigned long __stady_term_9;
  __stady_term_9 = __gmpz_get_si(__stady_gmp_7);
  old_ptr_B = malloc(__stady_term_9 * (unsigned long)sizeof(int));
  __stady_term_9 = __gmpz_get_si(__stady_gmp_7);
  for(__stady_term_8 = 0; (unsigned long)__stady_term_8 < __stady_term_9; __stady_term_8 = 
    __stady_term_8 + 1) {
    old_ptr_B[__stady_term_8] = B[__stady_term_8];
  }
  __gmpz_clear(__stady_gmp_7);
  {
    int i0;
    int i1;
    int j;
    i0 = iLeft;
    i1 = iRight;
    j = iLeft;
    {
      int __stady_pred_2;
      __stady_pred_2 = iLeft <= j;
      if(__stady_pred_2) {
        __stady_pred_2 = j <= iEnd;
      }
      if(! __stady_pred_2) {
        pathcrawler_assert_exception("Loop invariant not established!", 9);
      }
      int __stady_pred_4;
      __stady_pred_4 = iLeft <= i0;
      if(__stady_pred_4) {
        __stady_pred_4 = i0 <= iRight;
      }
      if(! __stady_pred_4) {
        pathcrawler_assert_exception("Loop invariant not established!", 16);
      }
      int __stady_pred_6;
      __stady_pred_6 = iRight <= i1;
      if(__stady_pred_6) {
        __stady_pred_6 = i1 <= iEnd;
      }
      if(! __stady_pred_6) {
        pathcrawler_assert_exception("Loop invariant not established!", 24);
      }
      mpz_t __stady_gmp_8;
      __gmpz_init_set_si(__stady_gmp_8, i0);
      mpz_t __stady_gmp_9;
      __gmpz_init_set_si(__stady_gmp_9, iLeft);
      mpz_t __stady_gmp_10;
      __gmpz_init(__stady_gmp_10);
      __gmpz_sub(__stady_gmp_10, __stady_gmp_8, __stady_gmp_9);
      __gmpz_clear(__stady_gmp_8);
      __gmpz_clear(__stady_gmp_9);
      mpz_t __stady_gmp_11;
      __gmpz_init_set_si(__stady_gmp_11, i1);
      mpz_t __stady_gmp_12;
      __gmpz_init(__stady_gmp_12);
      __gmpz_add(__stady_gmp_12, __stady_gmp_10, __stady_gmp_11);
      __gmpz_clear(__stady_gmp_10);
      __gmpz_clear(__stady_gmp_11);
      mpz_t __stady_gmp_13;
      __gmpz_init_set_si(__stady_gmp_13, iRight);
      mpz_t __stady_gmp_14;
      __gmpz_init(__stady_gmp_14);
      __gmpz_sub(__stady_gmp_14, __stady_gmp_12, __stady_gmp_13);
      __gmpz_clear(__stady_gmp_12);
      __gmpz_clear(__stady_gmp_13);
      mpz_t __stady_gmp_15;
      __gmpz_init_set_si(__stady_gmp_15, j);
      mpz_t __stady_gmp_16;
      __gmpz_init_set_si(__stady_gmp_16, iLeft);
      mpz_t __stady_gmp_17;
      __gmpz_init(__stady_gmp_17);
      __gmpz_sub(__stady_gmp_17, __stady_gmp_15, __stady_gmp_16);
      __gmpz_clear(__stady_gmp_15);
      __gmpz_clear(__stady_gmp_16);
      int __stady_term_10;
      __stady_term_10 = __gmpz_cmp(__stady_gmp_14, __stady_gmp_17);
      __gmpz_clear(__stady_gmp_14);
      __gmpz_clear(__stady_gmp_17);
      if(! (__stady_term_10 == 0)) {
        pathcrawler_assert_exception("Loop invariant not established!", 4);
      }
      mpz_t __stady_gmp_28;
      __gmpz_init_set_si(__stady_gmp_28, iEnd);
      mpz_t __stady_gmp_29;
      __gmpz_init_set_si(__stady_gmp_29, j);
      mpz_t __stady_gmp_30;
      __gmpz_init(__stady_gmp_30);
      __gmpz_sub(__stady_gmp_30, __stady_gmp_28, __stady_gmp_29);
      __gmpz_clear(__stady_gmp_28);
      __gmpz_clear(__stady_gmp_29);
      int __stady_term_12;
      __stady_term_12 = __gmpz_cmp_ui(__stady_gmp_30, 0);
      if(__stady_term_12 < 0) {
        pathcrawler_assert_exception("Variant non positive", 19);
      }
      while (1) {
        mpz_t __stady_gmp_31;
        __gmpz_init_set_si(__stady_gmp_31, iEnd);
        mpz_t __stady_gmp_32;
        __gmpz_init_set_si(__stady_gmp_32, j);
        mpz_t __stady_gmp_33;
        __gmpz_init(__stady_gmp_33);
        __gmpz_sub(__stady_gmp_33, __stady_gmp_31, __stady_gmp_32);
        __gmpz_clear(__stady_gmp_31);
        __gmpz_clear(__stady_gmp_32);
        mpz_t __stady_gmp_34;
        __gmpz_init_set(__stady_gmp_34, __stady_gmp_33);
        {
          if (! (j < iEnd)) {
                              pathcrawler_to_framac("@FC:REACHABLE_STMT:9");
                              break;
                            }
          if (i0 < iRight) {
            {
              pathcrawler_to_framac("@FC:REACHABLE_STMT:14");
              if (i1 >= iEnd) {
                                pathcrawler_to_framac("@FC:REACHABLE_STMT:15");
                                goto _LOR;
                              }
              else 
                {
                  pathcrawler_to_framac("@FC:REACHABLE_STMT:17");
                  if (*(A + i0) <= *(A + i1)) {
                    _LOR:
                      {
                        pathcrawler_to_framac("@FC:REACHABLE_STMT:18");
                        *(B + j) = *(A + i0);
                        i0 ++;
                      }
                  }
                  else {
                         pathcrawler_to_framac("@FC:REACHABLE_STMT:21");
                         goto _LAND;
                       }
                }
            }
          }
          else {
            _LAND:
              {
                pathcrawler_to_framac("@FC:REACHABLE_STMT:22");
                *(B + j) = *(A + i1);
                i1 ++;
              }
          }
          j ++;
        }int __stady_pred_3;
        __stady_pred_3 = iLeft <= j;
        if(__stady_pred_3) {
          __stady_pred_3 = j <= iEnd;
        }
        if(! __stady_pred_3) {
          pathcrawler_assert_exception("Loop invariant not preserved!", 9);
        }
        int __stady_pred_5;
        __stady_pred_5 = iLeft <= i0;
        if(__stady_pred_5) {
          __stady_pred_5 = i0 <= iRight;
        }
        if(! __stady_pred_5) {
          pathcrawler_assert_exception("Loop invariant not preserved!", 16);
        }
        int __stady_pred_7;
        __stady_pred_7 = iRight <= i1;
        if(__stady_pred_7) {
          __stady_pred_7 = i1 <= iEnd;
        }
        if(! __stady_pred_7) {
          pathcrawler_assert_exception("Loop invariant not preserved!", 24);
        }
        mpz_t __stady_gmp_18;
        __gmpz_init_set_si(__stady_gmp_18, i0);
        mpz_t __stady_gmp_19;
        __gmpz_init_set_si(__stady_gmp_19, iLeft);
        mpz_t __stady_gmp_20;
        __gmpz_init(__stady_gmp_20);
        __gmpz_sub(__stady_gmp_20, __stady_gmp_18, __stady_gmp_19);
        __gmpz_clear(__stady_gmp_18);
        __gmpz_clear(__stady_gmp_19);
        mpz_t __stady_gmp_21;
        __gmpz_init_set_si(__stady_gmp_21, i1);
        mpz_t __stady_gmp_22;
        __gmpz_init(__stady_gmp_22);
        __gmpz_add(__stady_gmp_22, __stady_gmp_20, __stady_gmp_21);
        __gmpz_clear(__stady_gmp_20);
        __gmpz_clear(__stady_gmp_21);
        mpz_t __stady_gmp_23;
        __gmpz_init_set_si(__stady_gmp_23, iRight);
        mpz_t __stady_gmp_24;
        __gmpz_init(__stady_gmp_24);
        __gmpz_sub(__stady_gmp_24, __stady_gmp_22, __stady_gmp_23);
        __gmpz_clear(__stady_gmp_22);
        __gmpz_clear(__stady_gmp_23);
        mpz_t __stady_gmp_25;
        __gmpz_init_set_si(__stady_gmp_25, j);
        mpz_t __stady_gmp_26;
        __gmpz_init_set_si(__stady_gmp_26, iLeft);
        mpz_t __stady_gmp_27;
        __gmpz_init(__stady_gmp_27);
        __gmpz_sub(__stady_gmp_27, __stady_gmp_25, __stady_gmp_26);
        __gmpz_clear(__stady_gmp_25);
        __gmpz_clear(__stady_gmp_26);
        int __stady_term_11;
        __stady_term_11 = __gmpz_cmp(__stady_gmp_24, __stady_gmp_27);
        __gmpz_clear(__stady_gmp_24);
        __gmpz_clear(__stady_gmp_27);
        if(! (__stady_term_11 == 0)) {
          pathcrawler_assert_exception("Loop invariant not preserved!", 4);
        }
        mpz_t __stady_gmp_35;
        __gmpz_init_set_si(__stady_gmp_35, iEnd);
        mpz_t __stady_gmp_36;
        __gmpz_init_set_si(__stady_gmp_36, j);
        mpz_t __stady_gmp_37;
        __gmpz_init(__stady_gmp_37);
        __gmpz_sub(__stady_gmp_37, __stady_gmp_35, __stady_gmp_36);
        __gmpz_clear(__stady_gmp_35);
        __gmpz_clear(__stady_gmp_36);
        __stady_term_12 = __gmpz_cmp_ui(__stady_gmp_34, 0);
        if(__stady_term_12 < 0) {
          pathcrawler_assert_exception("Variant non positive", 19);
        }
        __stady_term_12 = __gmpz_cmp(__stady_gmp_37, __stady_gmp_34);
        if(__stady_term_12 >= 0) {
          pathcrawler_assert_exception("Variant non decreasing", 19);
        }
        __gmpz_clear(__stady_gmp_34);
        }
         __gmpz_clear(__stady_gmp_30);
      
    }
    free(old_ptr_A);
    free(old_ptr_B);
    return;
  }
}

void CopyArray(int *A, int *B, int n)
{
  mpz_t __stady_gmp_38;
  __gmpz_init_set_si(__stady_gmp_38, n);
  mpz_t __stady_gmp_39;
  __gmpz_init_set_str(__stady_gmp_39, "1", 10);
  mpz_t __stady_gmp_40;
  __gmpz_init(__stady_gmp_40);
  __gmpz_sub(__stady_gmp_40, __stady_gmp_38, __stady_gmp_39);
  __gmpz_clear(__stady_gmp_38);
  __gmpz_clear(__stady_gmp_39);
  int __stady_pred_8;
  int __stady_term_13;
  __stady_term_13 = __gmpz_cmp_ui(__stady_gmp_40, 0);
  int __stady_term_14;
  __stady_term_14 = pathcrawler_dimension(A);
  int __stady_term_15;
  __stady_term_15 = __gmpz_cmp_ui(__stady_gmp_40, __stady_term_14);
  __stady_pred_8 = __stady_term_13 >= 0 && __stady_term_15 < 0;
  __gmpz_clear(__stady_gmp_40);
  if(! __stady_pred_8) {
    pathcrawler_assert_exception("Pre-condition!", 8);
  }
  mpz_t __stady_gmp_41;
  __gmpz_init_set_si(__stady_gmp_41, n);
  mpz_t __stady_gmp_42;
  __gmpz_init_set_str(__stady_gmp_42, "1", 10);
  mpz_t __stady_gmp_43;
  __gmpz_init(__stady_gmp_43);
  __gmpz_sub(__stady_gmp_43, __stady_gmp_41, __stady_gmp_42);
  __gmpz_clear(__stady_gmp_41);
  __gmpz_clear(__stady_gmp_42);
  int __stady_pred_9;
  int __stady_term_16;
  __stady_term_16 = __gmpz_cmp_ui(__stady_gmp_43, 0);
  int __stady_term_17;
  __stady_term_17 = pathcrawler_dimension(B);
  int __stady_term_18;
  __stady_term_18 = __gmpz_cmp_ui(__stady_gmp_43, __stady_term_17);
  __stady_pred_9 = __stady_term_16 >= 0 && __stady_term_18 < 0;
  __gmpz_clear(__stady_gmp_43);
  if(! __stady_pred_9) {
    pathcrawler_assert_exception("Pre-condition!", 13);
  }
  int *old_A;
  int *old_ptr_A;
  old_A = A;
  mpz_t __stady_gmp_44;
  __gmpz_init_set_si(__stady_gmp_44, n);
  int __stady_term_19;
  unsigned long __stady_term_20;
  __stady_term_20 = __gmpz_get_si(__stady_gmp_44);
  old_ptr_A = malloc(__stady_term_20 * (unsigned long)sizeof(int));
  __stady_term_20 = __gmpz_get_si(__stady_gmp_44);
  for(__stady_term_19 = 0; (unsigned long)__stady_term_19 < __stady_term_20; __stady_term_19 = 
    __stady_term_19 + 1) {
    old_ptr_A[__stady_term_19] = A[__stady_term_19];
  }
  __gmpz_clear(__stady_gmp_44);
  int *old_B;
  int *old_ptr_B;
  old_B = B;
  mpz_t __stady_gmp_45;
  __gmpz_init_set_si(__stady_gmp_45, n);
  int __stady_term_21;
  unsigned long __stady_term_22;
  __stady_term_22 = __gmpz_get_si(__stady_gmp_45);
  old_ptr_B = malloc(__stady_term_22 * (unsigned long)sizeof(int));
  __stady_term_22 = __gmpz_get_si(__stady_gmp_45);
  for(__stady_term_21 = 0; (unsigned long)__stady_term_21 < __stady_term_22; __stady_term_21 = 
    __stady_term_21 + 1) {
    old_ptr_B[__stady_term_21] = B[__stady_term_21];
  }
  __gmpz_clear(__stady_gmp_45);
  int old_n;
  old_n = n;
  {
    int i;
    i = 0;
    {
      mpz_t __stady_gmp_46;
      __gmpz_init_set_str(__stady_gmp_46, "0", 10);
      mpz_t __stady_gmp_47;
      __gmpz_init_set_si(__stady_gmp_47, i);
      int __stady_term_23;
      __stady_term_23 = __gmpz_cmp(__stady_gmp_46, __stady_gmp_47);
      __gmpz_clear(__stady_gmp_46);
      __gmpz_clear(__stady_gmp_47);
      int __stady_pred_10;
      __stady_pred_10 = __stady_term_23 <= 0;
      if(__stady_pred_10) {
        __stady_pred_10 = i <= n;
      }
      if(! __stady_pred_10) {
        pathcrawler_assert_exception("Loop invariant not established!", 0);
      }
      mpz_t __stady_gmp_50;
      __gmpz_init_set_si(__stady_gmp_50, n);
      mpz_t __stady_gmp_51;
      __gmpz_init_set_si(__stady_gmp_51, i);
      mpz_t __stady_gmp_52;
      __gmpz_init(__stady_gmp_52);
      __gmpz_sub(__stady_gmp_52, __stady_gmp_50, __stady_gmp_51);
      __gmpz_clear(__stady_gmp_50);
      __gmpz_clear(__stady_gmp_51);
      int __stady_term_25;
      __stady_term_25 = __gmpz_cmp_ui(__stady_gmp_52, 0);
      if(__stady_term_25 < 0) {
        pathcrawler_assert_exception("Variant non positive", 27);
      }
      while (1) {
        mpz_t __stady_gmp_53;
        __gmpz_init_set_si(__stady_gmp_53, n);
        mpz_t __stady_gmp_54;
        __gmpz_init_set_si(__stady_gmp_54, i);
        mpz_t __stady_gmp_55;
        __gmpz_init(__stady_gmp_55);
        __gmpz_sub(__stady_gmp_55, __stady_gmp_53, __stady_gmp_54);
        __gmpz_clear(__stady_gmp_53);
        __gmpz_clear(__stady_gmp_54);
        mpz_t __stady_gmp_56;
        __gmpz_init_set(__stady_gmp_56, __stady_gmp_55);
        {
          if (! (i < n)) {
                           pathcrawler_to_framac("@FC:REACHABLE_STMT:32");
                           break;
                         }
          *(A + i) = *(B + i);
          i ++;
        }mpz_t __stady_gmp_48;
        __gmpz_init_set_str(__stady_gmp_48, "0", 10);
        mpz_t __stady_gmp_49;
        __gmpz_init_set_si(__stady_gmp_49, i);
        int __stady_term_24;
        __stady_term_24 = __gmpz_cmp(__stady_gmp_48, __stady_gmp_49);
        __gmpz_clear(__stady_gmp_48);
        __gmpz_clear(__stady_gmp_49);
        int __stady_pred_11;
        __stady_pred_11 = __stady_term_24 <= 0;
        if(__stady_pred_11) {
          __stady_pred_11 = i <= n;
        }
        if(! __stady_pred_11) {
          pathcrawler_assert_exception("Loop invariant not preserved!", 0);
        }
        mpz_t __stady_gmp_57;
        __gmpz_init_set_si(__stady_gmp_57, n);
        mpz_t __stady_gmp_58;
        __gmpz_init_set_si(__stady_gmp_58, i);
        mpz_t __stady_gmp_59;
        __gmpz_init(__stady_gmp_59);
        __gmpz_sub(__stady_gmp_59, __stady_gmp_57, __stady_gmp_58);
        __gmpz_clear(__stady_gmp_57);
        __gmpz_clear(__stady_gmp_58);
        __stady_term_25 = __gmpz_cmp_ui(__stady_gmp_56, 0);
        if(__stady_term_25 < 0) {
          pathcrawler_assert_exception("Variant non positive", 27);
        }
        __stady_term_25 = __gmpz_cmp(__stady_gmp_59, __stady_gmp_56);
        if(__stady_term_25 >= 0) {
          pathcrawler_assert_exception("Variant non decreasing", 27);
        }
        __gmpz_clear(__stady_gmp_56);
        }
         __gmpz_clear(__stady_gmp_52);
      
    }
    free(old_ptr_A);
    free(old_ptr_B);
    return;
  }
}

int min(int x, int y)
{
  int old_x;
  old_x = x;
  int old_y;
  old_y = y;
  {
    int tmp;
    if (x <= y) {
                  pathcrawler_to_framac("@FC:REACHABLE_STMT:40");
                  tmp = x;
                }
    else {
           pathcrawler_to_framac("@FC:REACHABLE_STMT:41");
           tmp = y;
         }
    return tmp;
  }
}

void BottomUpSort(int n, int *A, int *B)
{
  mpz_t __stady_gmp_60;
  __gmpz_init_set_si(__stady_gmp_60, n);
  mpz_t __stady_gmp_61;
  __gmpz_init_set_str(__stady_gmp_61, "1", 10);
  mpz_t __stady_gmp_62;
  __gmpz_init(__stady_gmp_62);
  __gmpz_sub(__stady_gmp_62, __stady_gmp_60, __stady_gmp_61);
  __gmpz_clear(__stady_gmp_60);
  __gmpz_clear(__stady_gmp_61);
  int __stady_pred_12;
  int __stady_term_26;
  __stady_term_26 = __gmpz_cmp_ui(__stady_gmp_62, 0);
  int __stady_term_27;
  __stady_term_27 = pathcrawler_dimension(A);
  int __stady_term_28;
  __stady_term_28 = __gmpz_cmp_ui(__stady_gmp_62, __stady_term_27);
  __stady_pred_12 = __stady_term_26 >= 0 && __stady_term_28 < 0;
  __gmpz_clear(__stady_gmp_62);
  if(! __stady_pred_12) {
    pathcrawler_assert_exception("Pre-condition!", 20);
  }
  mpz_t __stady_gmp_63;
  __gmpz_init_set_si(__stady_gmp_63, n);
  mpz_t __stady_gmp_64;
  __gmpz_init_set_str(__stady_gmp_64, "1", 10);
  mpz_t __stady_gmp_65;
  __gmpz_init(__stady_gmp_65);
  __gmpz_sub(__stady_gmp_65, __stady_gmp_63, __stady_gmp_64);
  __gmpz_clear(__stady_gmp_63);
  __gmpz_clear(__stady_gmp_64);
  int __stady_pred_13;
  int __stady_term_29;
  __stady_term_29 = __gmpz_cmp_ui(__stady_gmp_65, 0);
  int __stady_term_30;
  __stady_term_30 = pathcrawler_dimension(B);
  int __stady_term_31;
  __stady_term_31 = __gmpz_cmp_ui(__stady_gmp_65, __stady_term_30);
  __stady_pred_13 = __stady_term_29 >= 0 && __stady_term_31 < 0;
  __gmpz_clear(__stady_gmp_65);
  if(! __stady_pred_13) {
    pathcrawler_assert_exception("Pre-condition!", 1);
  }
  int old_n;
  old_n = n;
  int *old_A;
  int *old_ptr_A;
  old_A = A;
  mpz_t __stady_gmp_66;
  __gmpz_init_set_si(__stady_gmp_66, n);
  int __stady_term_32;
  unsigned long __stady_term_33;
  __stady_term_33 = __gmpz_get_si(__stady_gmp_66);
  old_ptr_A = malloc(__stady_term_33 * (unsigned long)sizeof(int));
  __stady_term_33 = __gmpz_get_si(__stady_gmp_66);
  for(__stady_term_32 = 0; (unsigned long)__stady_term_32 < __stady_term_33; __stady_term_32 = 
    __stady_term_32 + 1) {
    old_ptr_A[__stady_term_32] = A[__stady_term_32];
  }
  __gmpz_clear(__stady_gmp_66);
  int *old_B;
  int *old_ptr_B;
  old_B = B;
  mpz_t __stady_gmp_67;
  __gmpz_init_set_si(__stady_gmp_67, n);
  int __stady_term_34;
  unsigned long __stady_term_35;
  __stady_term_35 = __gmpz_get_si(__stady_gmp_67);
  old_ptr_B = malloc(__stady_term_35 * (unsigned long)sizeof(int));
  __stady_term_35 = __gmpz_get_si(__stady_gmp_67);
  for(__stady_term_34 = 0; (unsigned long)__stady_term_34 < __stady_term_35; __stady_term_34 = 
    __stady_term_34 + 1) {
    old_ptr_B[__stady_term_34] = B[__stady_term_34];
  }
  __gmpz_clear(__stady_gmp_67);
  {
    int width;
    width = 1;
    {
      mpz_t __stady_gmp_98;
      __gmpz_init_set_str(__stady_gmp_98, "1", 10);
      mpz_t __stady_gmp_99;
      __gmpz_init_set_si(__stady_gmp_99, width);
      int __stady_term_41;
      __stady_term_41 = __gmpz_cmp(__stady_gmp_98, __stady_gmp_99);
      __gmpz_clear(__stady_gmp_98);
      __gmpz_clear(__stady_gmp_99);
      int __stady_pred_16;
      __stady_pred_16 = __stady_term_41 <= 0;
      if(__stady_pred_16) {
        mpz_t __stady_gmp_100;
        __gmpz_init_set_si(__stady_gmp_100, width);
        mpz_t __stady_gmp_101;
        __gmpz_init_set_str(__stady_gmp_101, "2", 10);
        mpz_t __stady_gmp_102;
        __gmpz_init_set_si(__stady_gmp_102, n);
        mpz_t __stady_gmp_103;
        __gmpz_init(__stady_gmp_103);
        __gmpz_mul(__stady_gmp_103, __stady_gmp_101, __stady_gmp_102);
        __gmpz_clear(__stady_gmp_101);
        __gmpz_clear(__stady_gmp_102);
        mpz_t __stady_gmp_104;
        __gmpz_init_set_str(__stady_gmp_104, "1", 10);
        mpz_t __stady_gmp_105;
        __gmpz_init(__stady_gmp_105);
        __gmpz_sub(__stady_gmp_105, __stady_gmp_103, __stady_gmp_104);
        __gmpz_clear(__stady_gmp_103);
        __gmpz_clear(__stady_gmp_104);
        int __stady_term_42;
        __stady_term_42 = __gmpz_cmp(__stady_gmp_100, __stady_gmp_105);
        __gmpz_clear(__stady_gmp_100);
        __gmpz_clear(__stady_gmp_105);
        __stady_pred_16 = __stady_term_42 <= 0;
      }
      if(! __stady_pred_16) {
        pathcrawler_assert_exception("Loop invariant not established!", 22);
      }
      mpz_t __stady_gmp_114;
      __gmpz_init_set_si(__stady_gmp_114, n);
      mpz_t __stady_gmp_115;
      __gmpz_init_set_si(__stady_gmp_115, width);
      mpz_t __stady_gmp_116;
      __gmpz_init(__stady_gmp_116);
      __gmpz_sub(__stady_gmp_116, __stady_gmp_114, __stady_gmp_115);
      __gmpz_clear(__stady_gmp_114);
      __gmpz_clear(__stady_gmp_115);
      int __stady_term_45;
      __stady_term_45 = __gmpz_cmp_ui(__stady_gmp_116, 0);
      if(__stady_term_45 < 0) {
        pathcrawler_assert_exception("Variant non positive", 5);
      }
      while (1) {
        mpz_t __stady_gmp_117;
        __gmpz_init_set_si(__stady_gmp_117, n);
        mpz_t __stady_gmp_118;
        __gmpz_init_set_si(__stady_gmp_118, width);
        mpz_t __stady_gmp_119;
        __gmpz_init(__stady_gmp_119);
        __gmpz_sub(__stady_gmp_119, __stady_gmp_117, __stady_gmp_118);
        __gmpz_clear(__stady_gmp_117);
        __gmpz_clear(__stady_gmp_118);
        mpz_t __stady_gmp_120;
        __gmpz_init_set(__stady_gmp_120, __stady_gmp_119);
        {
          if (! (width < n)) {
                               pathcrawler_to_framac("@FC:REACHABLE_STMT:48");
                               break;
                             }
          {
            int i;
            i = 0;
            {
              mpz_t __stady_gmp_68;
              __gmpz_init_set_str(__stady_gmp_68, "0", 10);
              mpz_t __stady_gmp_69;
              __gmpz_init_set_si(__stady_gmp_69, i);
              int __stady_term_36;
              __stady_term_36 = __gmpz_cmp(__stady_gmp_68, __stady_gmp_69);
              __gmpz_clear(__stady_gmp_68);
              __gmpz_clear(__stady_gmp_69);
              int __stady_pred_14;
              __stady_pred_14 = __stady_term_36 <= 0;
              if(__stady_pred_14) {
                mpz_t __stady_gmp_70;
                __gmpz_init_set_si(__stady_gmp_70, i);
                mpz_t __stady_gmp_71;
                __gmpz_init_set_si(__stady_gmp_71, n);
                mpz_t __stady_gmp_72;
                __gmpz_init_set_str(__stady_gmp_72, "2", 10);
                mpz_t __stady_gmp_73;
                __gmpz_init_set_si(__stady_gmp_73, width);
                mpz_t __stady_gmp_74;
                __gmpz_init(__stady_gmp_74);
                __gmpz_mul(__stady_gmp_74, __stady_gmp_72, __stady_gmp_73);
                __gmpz_clear(__stady_gmp_72);
                __gmpz_clear(__stady_gmp_73);
                mpz_t __stady_gmp_75;
                __gmpz_init(__stady_gmp_75);
                __gmpz_add(__stady_gmp_75, __stady_gmp_71, __stady_gmp_74);
                __gmpz_clear(__stady_gmp_71);
                __gmpz_clear(__stady_gmp_74);
                mpz_t __stady_gmp_76;
                __gmpz_init_set_str(__stady_gmp_76, "1", 10);
                mpz_t __stady_gmp_77;
                __gmpz_init(__stady_gmp_77);
                __gmpz_sub(__stady_gmp_77, __stady_gmp_75, __stady_gmp_76);
                __gmpz_clear(__stady_gmp_75);
                __gmpz_clear(__stady_gmp_76);
                int __stady_term_37;
                __stady_term_37 = __gmpz_cmp(__stady_gmp_70, __stady_gmp_77);
                __gmpz_clear(__stady_gmp_70);
                __gmpz_clear(__stady_gmp_77);
                __stady_pred_14 = __stady_term_37 <= 0;
              }
              if(! __stady_pred_14) {
                pathcrawler_assert_exception("Loop invariant not established!", 
                11);
              }
              mpz_t __stady_gmp_88;
              __gmpz_init_set_si(__stady_gmp_88, n);
              mpz_t __stady_gmp_89;
              __gmpz_init_set_si(__stady_gmp_89, i);
              mpz_t __stady_gmp_90;
              __gmpz_init(__stady_gmp_90);
              __gmpz_sub(__stady_gmp_90, __stady_gmp_88, __stady_gmp_89);
              __gmpz_clear(__stady_gmp_88);
              __gmpz_clear(__stady_gmp_89);
              int __stady_term_40;
              __stady_term_40 = __gmpz_cmp_ui(__stady_gmp_90, 0);
              if(__stady_term_40 < 0) {
                pathcrawler_assert_exception("Variant non positive", 3);
              }
              while (1) {
                mpz_t __stady_gmp_91;
                __gmpz_init_set_si(__stady_gmp_91, n);
                mpz_t __stady_gmp_92;
                __gmpz_init_set_si(__stady_gmp_92, i);
                mpz_t __stady_gmp_93;
                __gmpz_init(__stady_gmp_93);
                __gmpz_sub(__stady_gmp_93, __stady_gmp_91, __stady_gmp_92);
                __gmpz_clear(__stady_gmp_91);
                __gmpz_clear(__stady_gmp_92);
                mpz_t __stady_gmp_94;
                __gmpz_init_set(__stady_gmp_94, __stady_gmp_93);
                {
                  if (! (i < n)) {
                                   pathcrawler_to_framac("@FC:REACHABLE_STMT:54");
                                   break;
                                 }
                  {
                    int tmp;
                    int tmp_0;
                    {
                      ;
                      tmp = min(i + 2 * width,n);
                      tmp_0 = min(i + width,n);
                      ;
                      ;
                    }
                    BottomUpMerge(A,i,tmp_0,tmp,B);
                  }
                  i += 2 * width;
                }mpz_t __stady_gmp_78;
                __gmpz_init_set_str(__stady_gmp_78, "0", 10);
                mpz_t __stady_gmp_79;
                __gmpz_init_set_si(__stady_gmp_79, i);
                int __stady_term_38;
                __stady_term_38 = __gmpz_cmp(__stady_gmp_78, __stady_gmp_79);
                __gmpz_clear(__stady_gmp_78);
                __gmpz_clear(__stady_gmp_79);
                int __stady_pred_15;
                __stady_pred_15 = __stady_term_38 <= 0;
                if(__stady_pred_15) {
                  mpz_t __stady_gmp_80;
                  __gmpz_init_set_si(__stady_gmp_80, i);
                  mpz_t __stady_gmp_81;
                  __gmpz_init_set_si(__stady_gmp_81, n);
                  mpz_t __stady_gmp_82;
                  __gmpz_init_set_str(__stady_gmp_82, "2", 10);
                  mpz_t __stady_gmp_83;
                  __gmpz_init_set_si(__stady_gmp_83, width);
                  mpz_t __stady_gmp_84;
                  __gmpz_init(__stady_gmp_84);
                  __gmpz_mul(__stady_gmp_84, __stady_gmp_82, __stady_gmp_83);
                  __gmpz_clear(__stady_gmp_82);
                  __gmpz_clear(__stady_gmp_83);
                  mpz_t __stady_gmp_85;
                  __gmpz_init(__stady_gmp_85);
                  __gmpz_add(__stady_gmp_85, __stady_gmp_81, __stady_gmp_84);
                  __gmpz_clear(__stady_gmp_81);
                  __gmpz_clear(__stady_gmp_84);
                  mpz_t __stady_gmp_86;
                  __gmpz_init_set_str(__stady_gmp_86, "1", 10);
                  mpz_t __stady_gmp_87;
                  __gmpz_init(__stady_gmp_87);
                  __gmpz_sub(__stady_gmp_87, __stady_gmp_85, __stady_gmp_86);
                  __gmpz_clear(__stady_gmp_85);
                  __gmpz_clear(__stady_gmp_86);
                  int __stady_term_39;
                  __stady_term_39 = __gmpz_cmp(__stady_gmp_80, 
                  __stady_gmp_87);
                  __gmpz_clear(__stady_gmp_80);
                  __gmpz_clear(__stady_gmp_87);
                  __stady_pred_15 = __stady_term_39 <= 0;
                }
                if(! __stady_pred_15) {
                  pathcrawler_assert_exception("Loop invariant not preserved!", 
                  11);
                }
                mpz_t __stady_gmp_95;
                __gmpz_init_set_si(__stady_gmp_95, n);
                mpz_t __stady_gmp_96;
                __gmpz_init_set_si(__stady_gmp_96, i);
                mpz_t __stady_gmp_97;
                __gmpz_init(__stady_gmp_97);
                __gmpz_sub(__stady_gmp_97, __stady_gmp_95, __stady_gmp_96);
                __gmpz_clear(__stady_gmp_95);
                __gmpz_clear(__stady_gmp_96);
                __stady_term_40 = __gmpz_cmp_ui(__stady_gmp_94, 0);
                if(__stady_term_40 < 0) {
                  pathcrawler_assert_exception("Variant non positive", 3);
                }
                __stady_term_40 = __gmpz_cmp(__stady_gmp_97, __stady_gmp_94);
                if(__stady_term_40 >= 0) {
                  pathcrawler_assert_exception("Variant non decreasing", 3);
                }
                __gmpz_clear(__stady_gmp_94);
                }
                 __gmpz_clear(__stady_gmp_90);
              
            }
            CopyArray(A,B,n);
          }
          width = 2 * width;
        }mpz_t __stady_gmp_106;
        __gmpz_init_set_str(__stady_gmp_106, "1", 10);
        mpz_t __stady_gmp_107;
        __gmpz_init_set_si(__stady_gmp_107, width);
        int __stady_term_43;
        __stady_term_43 = __gmpz_cmp(__stady_gmp_106, __stady_gmp_107);
        __gmpz_clear(__stady_gmp_106);
        __gmpz_clear(__stady_gmp_107);
        int __stady_pred_17;
        __stady_pred_17 = __stady_term_43 <= 0;
        if(__stady_pred_17) {
          mpz_t __stady_gmp_108;
          __gmpz_init_set_si(__stady_gmp_108, width);
          mpz_t __stady_gmp_109;
          __gmpz_init_set_str(__stady_gmp_109, "2", 10);
          mpz_t __stady_gmp_110;
          __gmpz_init_set_si(__stady_gmp_110, n);
          mpz_t __stady_gmp_111;
          __gmpz_init(__stady_gmp_111);
          __gmpz_mul(__stady_gmp_111, __stady_gmp_109, __stady_gmp_110);
          __gmpz_clear(__stady_gmp_109);
          __gmpz_clear(__stady_gmp_110);
          mpz_t __stady_gmp_112;
          __gmpz_init_set_str(__stady_gmp_112, "1", 10);
          mpz_t __stady_gmp_113;
          __gmpz_init(__stady_gmp_113);
          __gmpz_sub(__stady_gmp_113, __stady_gmp_111, __stady_gmp_112);
          __gmpz_clear(__stady_gmp_111);
          __gmpz_clear(__stady_gmp_112);
          int __stady_term_44;
          __stady_term_44 = __gmpz_cmp(__stady_gmp_108, __stady_gmp_113);
          __gmpz_clear(__stady_gmp_108);
          __gmpz_clear(__stady_gmp_113);
          __stady_pred_17 = __stady_term_44 <= 0;
        }
        if(! __stady_pred_17) {
          pathcrawler_assert_exception("Loop invariant not preserved!", 22);
        }
        mpz_t __stady_gmp_121;
        __gmpz_init_set_si(__stady_gmp_121, n);
        mpz_t __stady_gmp_122;
        __gmpz_init_set_si(__stady_gmp_122, width);
        mpz_t __stady_gmp_123;
        __gmpz_init(__stady_gmp_123);
        __gmpz_sub(__stady_gmp_123, __stady_gmp_121, __stady_gmp_122);
        __gmpz_clear(__stady_gmp_121);
        __gmpz_clear(__stady_gmp_122);
        __stady_term_45 = __gmpz_cmp_ui(__stady_gmp_120, 0);
        if(__stady_term_45 < 0) {
          pathcrawler_assert_exception("Variant non positive", 5);
        }
        __stady_term_45 = __gmpz_cmp(__stady_gmp_123, __stady_gmp_120);
        if(__stady_term_45 >= 0) {
          pathcrawler_assert_exception("Variant non decreasing", 5);
        }
        __gmpz_clear(__stady_gmp_120);
        }
         __gmpz_clear(__stady_gmp_116);
      
    }
    free(old_ptr_A);
    free(old_ptr_B);
    return;
  }
}

int merge_sort_precond(int *table, int l, int *ret)
{
  return 1;
}

void merge_sort(int *table, int l, int *ret)
{
  int *old_table;
  int *old_ptr_table;
  old_table = table;
  mpz_t __stady_gmp_132;
  __gmpz_init_set_si(__stady_gmp_132, l);
  int __stady_term_49;
  unsigned long __stady_term_50;
  __stady_term_50 = __gmpz_get_si(__stady_gmp_132);
  old_ptr_table = malloc(__stady_term_50 * (unsigned long)sizeof(int));
  __stady_term_50 = __gmpz_get_si(__stady_gmp_132);
  for(__stady_term_49 = 0; (unsigned long)__stady_term_49 < __stady_term_50; __stady_term_49 = 
    __stady_term_49 + 1) {
    old_ptr_table[__stady_term_49] = table[__stady_term_49];
  }
  __gmpz_clear(__stady_gmp_132);
  int old_l;
  old_l = l;
  int *old_ret;
  int *old_ptr_ret;
  old_ret = ret;
  mpz_t __stady_gmp_133;
  __gmpz_init_set_si(__stady_gmp_133, l);
  int __stady_term_51;
  unsigned long __stady_term_52;
  __stady_term_52 = __gmpz_get_si(__stady_gmp_133);
  old_ptr_ret = malloc(__stady_term_52 * (unsigned long)sizeof(int));
  __stady_term_52 = __gmpz_get_si(__stady_gmp_133);
  for(__stady_term_51 = 0; (unsigned long)__stady_term_51 < __stady_term_52; __stady_term_51 = 
    __stady_term_51 + 1) {
    old_ptr_ret[__stady_term_51] = ret[__stady_term_51];
  }
  __gmpz_clear(__stady_gmp_133);
  {
    BottomUpSort(l,table,ret);
    {
      int __stady_pred_18;
      __stady_pred_18 = 1;
      {
        mpz_t __q_i;
        mpz_t __stady_gmp_124;
        __gmpz_init_set_str(__stady_gmp_124, "0", 10);
        mpz_t __stady_gmp_125;
        __gmpz_init_set_si(__stady_gmp_125, old_l);
        mpz_t __stady_gmp_126;
        __gmpz_init_set_str(__stady_gmp_126, "1", 10);
        mpz_t __stady_gmp_127;
        __gmpz_init(__stady_gmp_127);
        __gmpz_sub(__stady_gmp_127, __stady_gmp_125, __stady_gmp_126);
        __gmpz_clear(__stady_gmp_125);
        __gmpz_clear(__stady_gmp_126);
        __gmpz_init_set(__q_i, __stady_gmp_124);
        int __stady_term_46;
        __stady_term_46 = __gmpz_cmp(__q_i, __stady_gmp_127);
        for(; __stady_term_46 < 0 && __stady_pred_18; ) {
          mpz_t __stady_gmp_128;
          __gmpz_init_set(__stady_gmp_128, __q_i);
          int __stady_term_47;
          __stady_term_47 = __gmpz_get_si(__stady_gmp_128);
          __gmpz_clear(__stady_gmp_128);
          mpz_t __stady_gmp_129;
          __gmpz_init_set(__stady_gmp_129, __q_i);
          mpz_t __stady_gmp_130;
          __gmpz_init_set_str(__stady_gmp_130, "1", 10);
          mpz_t __stady_gmp_131;
          __gmpz_init(__stady_gmp_131);
          __gmpz_add(__stady_gmp_131, __stady_gmp_129, __stady_gmp_130);
          __gmpz_clear(__stady_gmp_129);
          __gmpz_clear(__stady_gmp_130);
          int __stady_term_48;
          __stady_term_48 = __gmpz_get_si(__stady_gmp_131);
          __gmpz_clear(__stady_gmp_131);
          __stady_pred_18 = *(old_ret + __stady_term_47) <= *(old_ret + __stady_term_48);
          __gmpz_add_ui(__q_i, __q_i, 1);
          __stady_term_46 = __gmpz_cmp(__q_i, __stady_gmp_127);
        }
        __gmpz_clear(__q_i);
        __gmpz_clear(__stady_gmp_124);
        __gmpz_clear(__stady_gmp_127);
      }
      if(! __stady_pred_18) {
        pathcrawler_assert_exception("Post-condition!", 10);
      }
    }
    free(old_ptr_table);
    free(old_ptr_ret);
    return;
  }
}


[kernel] preprocessing with "gcc -C -E -I.  __sd_instru_merge_sort_merge_sort.c"
[kernel] preprocessing with "gcc -C -E -I. -include /usr/local/share/frama-c/pc/lib/lanceur_deb.h __sd_instru_merge_sort_merge_sort.c"
[pc] analyzing...
[pc] Compiling pathcrawler___sd_instru_merge_sort_merge_sort/lanceur_merge_sort utilities ...
[pc] Compiling pathcrawler___sd_instru_merge_sort_merge_sort/lanceur_merge_sort ...
[pc] generating tests...
[pc] Starting lanceur_merge_sort (isc version)
[pc] Starting lanceur_pathcrawler__merge_sort_precond (isc version)
[pc] generation finished
[stady] all-paths: true
[stady] 1334 test cases
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'BottomUpMerge'
--------------------------------------------------------------------------------

[  Valid  ] Pre-condition (file tests/merge_sort/merge_sort.c, line 6)
            by StaDy.
[  Valid  ] Pre-condition (file tests/merge_sort/merge_sort.c, line 7)
            by StaDy.
[  Valid  ] Loop variant at loop (file tests/merge_sort/merge_sort.c, line 20)
            by StaDy.
[  Valid  ] Invariant (file tests/merge_sort/merge_sort.c, line 13)
            by StaDy.
[  Valid  ] Invariant (file tests/merge_sort/merge_sort.c, line 14)
            by StaDy.
[  Valid  ] Invariant (file tests/merge_sort/merge_sort.c, line 15)
            by StaDy.
[  Valid  ] Invariant (file tests/merge_sort/merge_sort.c, line 16)
            by StaDy.
[  Valid  ] Default behavior
            by Frama-C kernel.

--------------------------------------------------------------------------------
--- Properties of Function 'CopyArray'
--------------------------------------------------------------------------------

[  Valid  ] Pre-condition (file tests/merge_sort/merge_sort.c, line 34)
            by StaDy.
[  Valid  ] Pre-condition (file tests/merge_sort/merge_sort.c, line 35)
            by StaDy.
[  Valid  ] Loop variant at loop (file tests/merge_sort/merge_sort.c, line 44)
            by StaDy.
[  Valid  ] Invariant (file tests/merge_sort/merge_sort.c, line 39)
            by StaDy.
[  Valid  ] Default behavior
            by Frama-C kernel.

--------------------------------------------------------------------------------
--- Properties of Function 'BottomUpSort'
--------------------------------------------------------------------------------

[  Valid  ] Pre-condition (file tests/merge_sort/merge_sort.c, line 55)
            by StaDy.
[  Valid  ] Pre-condition (file tests/merge_sort/merge_sort.c, line 56)
            by StaDy.
[  Valid  ] Loop variant at loop (file tests/merge_sort/merge_sort.c, line 68)
            by StaDy.
[  Valid  ] Loop variant at loop (file tests/merge_sort/merge_sort.c, line 75)
            by StaDy.
[  Valid  ] Invariant (file tests/merge_sort/merge_sort.c, line 65)
            by StaDy.
[  Valid  ] Invariant (file tests/merge_sort/merge_sort.c, line 72)
            by StaDy.
[  Valid  ] Default behavior
            by Frama-C kernel.

--------------------------------------------------------------------------------
--- Properties of Function 'merge_sort'
--------------------------------------------------------------------------------

[  Valid  ] Post-condition (file tests/merge_sort/merge_sort.c, line 94)
            by StaDy.
[  Valid  ] Default behavior
            by Frama-C kernel.

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
    22 Completely validated
    22 Total
--------------------------------------------------------------------------------
