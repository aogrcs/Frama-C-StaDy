[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/inv_insuf_ko/inv_insuf_ko.c (with preprocessing)
[stady:generated-pl] generated Prolog precondition:
:- module(test_parameters).
:- import create_input_val/3 from substitution.
:- export dom/4.
:- export create_input_vals/2.
:- export unquantif_preconds/2.
:- export quantif_preconds/2.
:- export strategy/2.
:- export precondition_of/2.

dom(0,0,0,0).
dom('f', dim('t'), [], int([5..4294967295])).
dom('f', cont('t',_), [], int([-2147483648..2147483647])).
dom('pathcrawler__f_precond',A,B,C) :-
  dom('f',A,B,C).
create_input_vals('f', Ins):-
  create_input_val('__stady_term_2', int([-2147483648..2147483647]),Ins),
  create_input_val('__stady_term_3', int([-2147483648..2147483647]),Ins),
  create_input_val(dim('t'), int([5..4294967295]),Ins),
  create_input_val('x', int([-2147483648..2147483647]),Ins),
  create_input_val('found', int([-2147483648..2147483647]),Ins),
  true.
create_input_vals('pathcrawler__f_precond',Ins) :-
  create_input_vals('f',Ins).
quantif_preconds('f',
  [

  ]
).
quantif_preconds('pathcrawler__f_precond',A) :-
  quantif_preconds('f',A).
unquantif_preconds('f',
  [

  ]
).
unquantif_preconds('pathcrawler__f_precond',A) :-
  unquantif_preconds('f',A).
strategy('f',[]).
strategy('pathcrawler__f_precond',A) :-
  strategy('f',A).
precondition_of('f','pathcrawler__f_precond').
[stady:generated-c] generated C file:
/* Generated by Frama-C */
struct __anonstruct___mpz_struct_1 {int _mp_alloc ;int _mp_size ;unsigned long *_mp_d ;};typedef struct __anonstruct___mpz_struct_1 __mpz_struct;typedef __mpz_struct mpz_t[1];
extern unsigned long int __gmpz_get_ui(mpz_t);
extern signed long int __gmpz_get_si(mpz_t);
extern int __gmpz_cmp(mpz_t, mpz_t);
extern void __gmpz_clear(mpz_t);
extern void __gmpz_init(mpz_t);
extern void __gmpz_init_set(mpz_t, mpz_t);
extern void __gmpz_init_set_si(mpz_t, signed long int);
extern void __gmpz_init_set_str(mpz_t, const char*, int);
extern void __gmpz_add(mpz_t, const mpz_t, const mpz_t);
extern void __gmpz_add_ui(mpz_t, const mpz_t, unsigned long int);
extern int pathcrawler_assert_exception(char*,int);
extern void pathcrawler_to_framac(char*);
extern int pathcrawler_assume_exception(char*,int);
extern void* malloc(unsigned long);
extern void free(void*);
int found;
int __stady_term_3;
int __stady_term_2;
int f_precond(int *t, int x)
{
  return 1;
}

void f(int *t, int x)
{
  int old_found;
  old_found = found;
  int *old_t;
  int *old_ptr_t;
  old_t = t;
  mpz_t __stady_gmp_0;
  __gmpz_init_set_str(__stady_gmp_0,"4",10);
  mpz_t __stady_gmp_1;
  __gmpz_init_set_str(__stady_gmp_1,"1",10);
  mpz_t __stady_gmp_2;
  __gmpz_init(__stady_gmp_2);
  __gmpz_add(__stady_gmp_2,__stady_gmp_0,__stady_gmp_1);
  __gmpz_clear(__stady_gmp_0);
  __gmpz_clear(__stady_gmp_1);
  unsigned long __stady_term_0;
  unsigned long __stady_term_1;
  __stady_term_1 = __gmpz_get_ui(__stady_gmp_2);
  old_ptr_t = (int *)malloc(__stady_term_1 * (unsigned long)sizeof(int));
  __stady_term_1 = __gmpz_get_ui(__stady_gmp_2);
  __stady_term_0 = 0;
  while(__stady_term_0 < __stady_term_1) {
    *(old_ptr_t + __stady_term_0) = *(t + __stady_term_0);
    __stady_term_0 ++;
  }
  __gmpz_clear(__stady_gmp_2);
  int old_x;
  old_x = x;
  {
    int i;
    found = 0;
    i = 0;
    {
      if(1) {
        i = __stady_term_3;
        found = __stady_term_2;
        mpz_t __stady_gmp_3;
        __gmpz_init_set_str(__stady_gmp_3,"0",10);
        mpz_t __stady_gmp_4;
        __gmpz_init_set_si(__stady_gmp_4,i);
        int __stady_term_4;
        __stady_term_4 = __gmpz_cmp(__stady_gmp_3,__stady_gmp_4);
        __gmpz_clear(__stady_gmp_3);
        __gmpz_clear(__stady_gmp_4);
        int __stady_pred_0;
        __stady_pred_0 = __stady_term_4 <= 0;
        if(__stady_pred_0) {
          mpz_t __stady_gmp_5;
          __gmpz_init_set_si(__stady_gmp_5,i);
          mpz_t __stady_gmp_6;
          __gmpz_init_set_str(__stady_gmp_6,"5",10);
          int __stady_term_5;
          __stady_term_5 = __gmpz_cmp(__stady_gmp_5,__stady_gmp_6);
          __gmpz_clear(__stady_gmp_5);
          __gmpz_clear(__stady_gmp_6);
          __stady_pred_0 = __stady_term_5 <= 0;
        }
        if(! __stady_pred_0) {
          pathcrawler_assume_exception("",0);
        }
      }
      mpz_t __stady_gmp_7;
      __gmpz_init_set_str(__stady_gmp_7,"0",10);
      mpz_t __stady_gmp_8;
      __gmpz_init_set_si(__stady_gmp_8,i);
      int __stady_term_6;
      __stady_term_6 = __gmpz_cmp(__stady_gmp_7,__stady_gmp_8);
      __gmpz_clear(__stady_gmp_7);
      __gmpz_clear(__stady_gmp_8);
      int __stady_pred_1;
      __stady_pred_1 = __stady_term_6 <= 0;
      if(__stady_pred_1) {
        mpz_t __stady_gmp_9;
        __gmpz_init_set_si(__stady_gmp_9,i);
        mpz_t __stady_gmp_10;
        __gmpz_init_set_str(__stady_gmp_10,"5",10);
        int __stady_term_7;
        __stady_term_7 = __gmpz_cmp(__stady_gmp_9,__stady_gmp_10);
        __gmpz_clear(__stady_gmp_9);
        __gmpz_clear(__stady_gmp_10);
        __stady_pred_1 = __stady_term_7 <= 0;
      }
      if(! __stady_pred_1) {
        pathcrawler_assert_exception("Loop invariant not established!",2);
      }
      while (1) {
        if (! (i <= 4)) {
                          pathcrawler_to_framac("@FC:REACHABLE_STMT:6");
                          break;
                        }if (*(t + i) == x) {
                                              pathcrawler_to_framac("@FC:REACHABLE_STMT:10");
                                              found = 1;
                                            }
                         i ++;mpz_t __stady_gmp_11;
        __gmpz_init_set_str(__stady_gmp_11,"0",10);
        mpz_t __stady_gmp_12;
        __gmpz_init_set_si(__stady_gmp_12,i);
        int __stady_term_8;
        __stady_term_8 = __gmpz_cmp(__stady_gmp_11,__stady_gmp_12);
        __gmpz_clear(__stady_gmp_11);
        __gmpz_clear(__stady_gmp_12);
        int __stady_pred_2;
        __stady_pred_2 = __stady_term_8 <= 0;
        if(__stady_pred_2) {
          mpz_t __stady_gmp_13;
          __gmpz_init_set_si(__stady_gmp_13,i);
          mpz_t __stady_gmp_14;
          __gmpz_init_set_str(__stady_gmp_14,"5",10);
          int __stady_term_9;
          __stady_term_9 = __gmpz_cmp(__stady_gmp_13,__stady_gmp_14);
          __gmpz_clear(__stady_gmp_13);
          __gmpz_clear(__stady_gmp_14);
          __stady_pred_2 = __stady_term_9 <= 0;
        }
        if(! __stady_pred_2) {
          pathcrawler_assert_exception("Loop invariant not preserved!",2);
        }
        }
         
    }
    {
      mpz_t __stady_gmp_15;
      __gmpz_init_set_str(__stady_gmp_15,"0",10);
      mpz_t __stady_gmp_16;
      __gmpz_init_set_si(__stady_gmp_16,found);
      int __stady_term_10;
      __stady_term_10 = __gmpz_cmp(__stady_gmp_16,__stady_gmp_15);
      __gmpz_clear(__stady_gmp_16);
      __gmpz_clear(__stady_gmp_15);
      int __stady_pred_3;
      __stady_pred_3 = 0;
      {
        mpz_t __q_i;
        mpz_t __stady_gmp_17;
        __gmpz_init_set_str(__stady_gmp_17,"0",10);
        mpz_t __stady_gmp_18;
        __gmpz_init_set_str(__stady_gmp_18,"4",10);
        __gmpz_init_set(__q_i,__stady_gmp_17);
        int __stady_term_11;
        __stady_term_11 = __gmpz_cmp(__q_i,__stady_gmp_18);
        while(__stady_term_11 <= 0 && ! __stady_pred_3) {
          mpz_t __stady_gmp_19;
          __gmpz_init_set(__stady_gmp_19,__q_i);
          int __stady_term_12;
          __stady_term_12 = (int)__gmpz_get_si(__stady_gmp_19);
          __gmpz_clear(__stady_gmp_19);
          __stady_pred_3 = *(t + __stady_term_12) == x;
          __gmpz_add_ui(__q_i,__q_i,1);
          __stady_term_11 = __gmpz_cmp(__q_i,__stady_gmp_18);
        }
        __gmpz_clear(__q_i);
        __gmpz_clear(__stady_gmp_17);
        __gmpz_clear(__stady_gmp_18);
      }
      if(! ((! (__stady_term_10 != 0) || __stady_pred_3) && (! __stady_pred_3 || 
                                                             __stady_term_10 != 0))) {
        pathcrawler_assert_exception("Assert!",1);
      }
      ;
    }
    free(old_ptr_t);
    return;
  }
}


[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing __sd_instru_inv_insuf_ko_f.c (with preprocessing)
[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing __sd_instru_inv_insuf_ko_f.c (with preprocessing)
[pc] analyzing...
[pc] Compiling pathcrawler___sd_instru_inv_insuf_ko_f/lanceur_f utilities ...
[pc] Compiling pathcrawler___sd_instru_inv_insuf_ko_f/lanceur_f ...
[pc] generating tests...
[pc] Starting lanceur_f (isc version)
[pc] Starting lanceur_pathcrawler__f_precond (isc version)
[pc] Starting lanceur_f (isc version)
[pc] Starting lanceur_f (isc version)
[pc] Starting lanceur_f (isc version)
[pc] Starting lanceur_f (isc version)
[pc] Starting lanceur_f (isc version)
[pc] Starting lanceur_f (isc version)
[pc] generation finished
[stady] all-paths: true
[stady] 53 test cases
[stady]  Counter-example for assert
                            found ≢ 0 ⇔
                            (∃ ℤ i; 0 ≤ i ≤ 4 ∧ *(t+i) ≡ x); (tests/inv_insuf_ko/inv_insuf_ko.c:23)
[stady]  testcases___sd_instru_inv_insuf_ko_f/f/testdrivers/TC_2.c
[stady]           variable|            input|  concrete output|  symbolic output
[stady]     __stady_term_2|           161763|                 |
[stady]     __stady_term_3|                0|                 |
[stady]              found|           104588|           161763|   __stady_term_2
[stady]               t[0]|            25937|                 |
[stady]               t[1]|           132958|                 |
[stady]               t[2]|            39479|                 |
[stady]               t[3]|             5031|                 |
[stady]               t[4]|            35317|                 |
[stady]                  x|          -176288|                 |
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'f'
--------------------------------------------------------------------------------

[   Bug   ] Assertion (file tests/inv_insuf_ko/inv_insuf_ko.c, line 23)
            by StaDy.
[  Valid  ] Default behavior
            by Frama-C kernel.

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
     1 Completely validated
     1 Bugs found
     2 Total
--------------------------------------------------------------------------------
