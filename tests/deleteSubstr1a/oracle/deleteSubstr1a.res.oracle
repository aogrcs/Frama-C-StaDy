[kernel] preprocessing with "gcc -C -E -I.  tests/deleteSubstr1a/deleteSubstr1a.c"
[stady] warning: Native Precondition:
                 \separated(dest+(0 .. strlen-1), substr+(0 .. sublen-1)) unsupported
[stady] warning: Native Precondition:
                 \separated(dest+(0 .. strlen-1), str+(0 .. strlen-1)) unsupported
[stady:generated-pl] generated Prolog precondition:
:- module(test_parameters).
:- import create_input_val/3 from substitution.
:- export dom/4.
:- export create_input_vals/2.
:- export unquantif_preconds/2.
:- export quantif_preconds/2.
:- export strategy/2.
:- export precondition_of/2.

dom(0,0,0,0).
dom('delete_substr', cont('str',_), [], int([-128..127])).
dom('delete_substr', cont('substr',_), [], int([-128..127])).
dom('delete_substr', cont('dest',_), [], int([-128..127])).
dom('pathcrawler__delete_substr_precond',A,B,C) :-
  dom('delete_substr',A,B,C).
create_input_vals('delete_substr', Ins):-
  create_input_val(dim('str'), int([1..4294967295]),Ins),
  create_input_val(dim('substr'), int([1..4294967295]),Ins),
  create_input_val(dim('dest'), int([1..4294967295]),Ins),
  create_input_val('strlen', int([-2147483648..2]),Ins),
  create_input_val('sublen', int([1..2147483647]),Ins),
  true.
create_input_vals('pathcrawler__delete_substr_precond',Ins) :-
  create_input_vals('delete_substr',Ins).
quantif_preconds('delete_substr',
  [
  ]
).
quantif_preconds('pathcrawler__delete_substr_precond',A) :-
  quantif_preconds('delete_substr',A).
unquantif_preconds('delete_substr',
  [
    cond(egal,dim('substr'),+(int(math), -(int(math), 'sublen', 1), 1),pre),
    cond(egal,dim('dest'),+(int(math), -(int(math), 'strlen', 1), 1),pre),
    cond(egal,dim('str'),+(int(math), -(int(math), 'strlen', 1), 1),pre),
    cond(infegal,'sublen','strlen',pre)
  ]
).
unquantif_preconds('pathcrawler__delete_substr_precond',A) :-
  unquantif_preconds('delete_substr',A).
strategy('delete_substr',[]).
strategy('pathcrawler__delete_substr_precond',A) :-
  strategy('delete_substr',A).
precondition_of('delete_substr','pathcrawler__delete_substr_precond').
[stady] warning: \separated(dest+(0 .. strlen-1), substr+(0 .. sublen-1)) unsupported
[stady] warning: \separated(dest+(0 .. strlen-1), str+(0 .. strlen-1)) unsupported
[stady:generated-c] generated C file:
/* Generated by Frama-C */
extern int pathcrawler_assert_exception(char*,int);
extern int pathcrawler_dimension(void*);
extern void pathcrawler_to_framac(char*);
int find_substr(char *str, int strlen, char *substr, int sublen)
{
  int __stady_pred_0 = (0 < sublen);
  if (__stady_pred_0) {
  __stady_pred_0 = (sublen <= strlen);
  }
  if(!__stady_pred_0)pathcrawler_assert_exception("Pre-condition!", 25);
  if(!((strlen - 1) >= 0 && pathcrawler_dimension(str) > (strlen - 1)))pathcrawler_assert_exception("Pre-condition!", 31);
  if(!((sublen - 1) >= 0 && pathcrawler_dimension(substr) > (sublen - 1)))pathcrawler_assert_exception("Pre-condition!", 7);
  char *old_str = str;
  char *old_ptr_str;
  old_ptr_str = malloc((strlen)*sizeof(char));
  int __stady_iter_0;
  for (__stady_iter_0 = 0; __stady_iter_0 < strlen; __stady_iter_0++) {
  old_ptr_str[__stady_iter_0] = str[__stady_iter_0];
  }
  int old_strlen = strlen;
  char *old_substr = substr;
  char *old_ptr_substr;
  old_ptr_substr = malloc((sublen)*sizeof(char));
  int __stady_iter_1;
  for (__stady_iter_1 = 0; __stady_iter_1 < sublen; __stady_iter_1++) {
  old_ptr_substr[__stady_iter_1] = substr[__stady_iter_1];
  }
  int old_sublen = sublen;
  {
    int __retres;
    int i;
    i = 0;
    i = 0;
    {
      if ((((strlen - sublen) - i)) < 0)pathcrawler_assert_exception("Variant non positive",13);int __stady_pred_1 = 1;
      {
      int __q_k;
      for (__q_k = 0; __q_k < i &&  __stady_pred_1; __q_k++) {
      int __stady_pred_2 = 0;
      {
      int __q_l;
      for (__q_l = 0; __q_l < sublen && ! __stady_pred_2; __q_l++) {
      __stady_pred_2 = (*(str + (__q_k + __q_l)) != *(substr + __q_l));
      }
      }
      __stady_pred_1 = __stady_pred_2;
      }
      }
      if(!__stady_pred_1)pathcrawler_assert_exception("Loop invariant not established!", 22);
      int __stady_pred_3 = (0 <= i);
      if (__stady_pred_3) {
      __stady_pred_3 = (i <= (strlen - sublen));
      }
      if(!__stady_pred_3)pathcrawler_assert_exception("Loop invariant not established!", 10);
      while (1) {
        int old_variant_13 = ((strlen - sublen) - i);
        {
          if (! (i < strlen - sublen)) { pathcrawler_to_framac("@FC:REACHABLE_STMT:6");
                                       break; }
                                       
          {
            int j;
            j = 0;
            j = 0;
            {
              if (((sublen - j)) < 0)pathcrawler_assert_exception("Variant non positive",19);int __stady_pred_4 = 1;
              {
              int __q_k;
              for (__q_k = 0; __q_k < j &&  __stady_pred_4; __q_k++) {
              __stady_pred_4 = (*(str + (i + __q_k)) == *(substr + __q_k));
              }
              }
              if(!__stady_pred_4)pathcrawler_assert_exception("Loop invariant not established!", 26);
              int __stady_pred_5 = (0 <= j);
              if (__stady_pred_5) {
              __stady_pred_5 = (j <= sublen);
              }
              if(!__stady_pred_5)pathcrawler_assert_exception("Loop invariant not established!", 17);
              while (1) {
                int old_variant_19 = (sublen - j);
                {
                  if (! (j < sublen)) { pathcrawler_to_framac("@FC:REACHABLE_STMT:13");
                                      break; }
                                      
                  if ((int)*(str + (i + j)) != (int)*(substr + j)) { pathcrawler_to_framac("@FC:REACHABLE_STMT:17");
                                                                   break; }
                                                                   
                  j ++;
                }int __stady_pred_6 = (0 <= j);
                if (__stady_pred_6) {
                __stady_pred_6 = (j <= sublen);
                }
                if(!__stady_pred_6)pathcrawler_assert_exception("Loop invariant not preserved!", 17);
                int __stady_pred_7 = 1;
                {
                int __q_k;
                for (__q_k = 0; __q_k < j &&  __stady_pred_7; __q_k++) {
                __stady_pred_7 = (*(str + (i + __q_k)) == *(substr + __q_k));
                }
                }
                if(!__stady_pred_7)pathcrawler_assert_exception("Loop invariant not preserved!", 26);
                if ((old_variant_19) < 0)pathcrawler_assert_exception("Variant non positive",19);
                if (((sublen - j)) >= old_variant_19)pathcrawler_assert_exception("Variant non decreasing",19);}
                 }
               
            if (j == sublen) {
              { pathcrawler_to_framac("@FC:REACHABLE_STMT:23");
              __retres = i; }
              
              goto return_label;
            }
          }
          i ++;
        }int __stady_pred_8 = (0 <= i);
        if (__stady_pred_8) {
        __stady_pred_8 = (i <= (strlen - sublen));
        }
        if(!__stady_pred_8)pathcrawler_assert_exception("Loop invariant not preserved!", 10);
        int __stady_pred_9 = 1;
        {
        int __q_k;
        for (__q_k = 0; __q_k < i &&  __stady_pred_9; __q_k++) {
        int __stady_pred_10 = 0;
        {
        int __q_l;
        for (__q_l = 0; __q_l < sublen && ! __stady_pred_10; __q_l++) {
        __stady_pred_10 = (*(str + (__q_k + __q_l)) != *(substr + __q_l));
        }
        }
        __stady_pred_9 = __stady_pred_10;
        }
        }
        if(!__stady_pred_9)pathcrawler_assert_exception("Loop invariant not preserved!", 22);
        if ((old_variant_13) < 0)pathcrawler_assert_exception("Variant non positive",13);
        if ((((strlen - sublen) - i)) >= old_variant_13)pathcrawler_assert_exception("Variant non decreasing",13);}
         }
       
    __retres = -1;
    return_label:
      {
        int __stady_pred_11 = 0;
        {
        int __q_i;
        for (__q_i = 0; __q_i < (strlen - sublen) && ! __stady_pred_11; __q_i++) {
        int __stady_pred_12 = 1;
        {
        int __q_j;
        for (__q_j = 0; __q_j < sublen &&  __stady_pred_12; __q_j++) {
        __stady_pred_12 = (*(str + (__q_i + __q_j)) == *(substr + __q_j));
        }
        }
        __stady_pred_11 = __stady_pred_12;
        }
        }
        if (__stady_pred_11 && 1) {
          int __stady_pred_13 = (0 <= __retres);
          if (__stady_pred_13) {
          __stady_pred_13 = (__retres < (old_strlen - old_sublen));
          }
          if(!__stady_pred_13)pathcrawler_assert_exception("Post-condition!", 20);
          int __stady_pred_14 = 1;
          {
          int __q_j;
          for (__q_j = 0; __q_j < old_sublen &&  __stady_pred_14; __q_j++) {
          __stady_pred_14 = (*(old_str + (__retres + __q_j)) == *(old_substr + __q_j));
          }
          }
          if(!__stady_pred_14)pathcrawler_assert_exception("Post-condition!", 28);
          }
        int __stady_pred_15 = 1;
        {
        int __q_i;
        for (__q_i = 0; __q_i < (strlen - sublen) &&  __stady_pred_15; __q_i++) {
        int __stady_pred_16 = 0;
        {
        int __q_j;
        for (__q_j = 0; __q_j < sublen && ! __stady_pred_16; __q_j++) {
        __stady_pred_16 = (*(str + (__q_i + __q_j)) != *(substr + __q_j));
        }
        }
        __stady_pred_15 = __stady_pred_16;
        }
        }
        if (__stady_pred_15 && 1) {
          if(!(__retres == (- 1)))pathcrawler_assert_exception("Post-condition!", 11);
          }
        
        }
      free(old_ptr_str);
      free(old_ptr_substr);
      return __retres;
  }
}

int delete_substr_precond(char *str, int strlen, char *substr, int sublen,
                          char *dest)
{
return 1;
}

int delete_substr(char *str, int strlen, char *substr, int sublen, char *dest)
{
  char *old_str = str;
  char *old_ptr_str;
  old_ptr_str = malloc((strlen)*sizeof(char));
  int __stady_iter_0;
  for (__stady_iter_0 = 0; __stady_iter_0 < strlen; __stady_iter_0++) {
  old_ptr_str[__stady_iter_0] = str[__stady_iter_0];
  }
  int old_strlen = strlen;
  char *old_substr = substr;
  char *old_ptr_substr;
  old_ptr_substr = malloc((sublen)*sizeof(char));
  int __stady_iter_1;
  for (__stady_iter_1 = 0; __stady_iter_1 < sublen; __stady_iter_1++) {
  old_ptr_substr[__stady_iter_1] = substr[__stady_iter_1];
  }
  int old_sublen = sublen;
  char *old_dest = dest;
  char *old_ptr_dest;
  old_ptr_dest = malloc((strlen)*sizeof(char));
  int __stady_iter_2;
  for (__stady_iter_2 = 0; __stady_iter_2 < strlen; __stady_iter_2++) {
  old_ptr_dest[__stady_iter_2] = dest[__stady_iter_2];
  }
  {
    int __retres;
    int start;
    int j;
    int k;
    start = find_substr(str,strlen,substr,sublen);
    if (start == -1) {
      { pathcrawler_to_framac("@FC:REACHABLE_STMT:31");
      k = 0; }
      
      while (1) {
        {
          if (! (k < strlen)) { pathcrawler_to_framac("@FC:REACHABLE_STMT:35");
                              break; }
                              
          *(dest + k) = *(str + k);
          k ++;
        }}
         
      __retres = 0;
      goto return_label;
    }
    j = 0;
    while (1) {
      {
        if (! (j < start)) { pathcrawler_to_framac("@FC:REACHABLE_STMT:44");
                           break; }
                           
        *(dest + j) = *(str + j);
        j ++;
      }}
       
    j = start;
    while (1) {
      {
        if (! (j < strlen - sublen)) { pathcrawler_to_framac("@FC:REACHABLE_STMT:51");
                                     break; }
                                     
        *(dest + j) = *(str + (j + sublen));
        j ++;
      }}
       
    __retres = 1;
    return_label:
      {
        int __stady_pred_17 = 0;
        {
        int __q_i;
        for (__q_i = 0; __q_i < (strlen - sublen) && ! __stady_pred_17; __q_i++) {
        int __stady_pred_18 = 1;
        {
        int __q_j;
        for (__q_j = 0; __q_j < sublen &&  __stady_pred_18; __q_j++) {
        __stady_pred_18 = (*(str + (__q_i + __q_j)) != *(substr + __q_j));
        }
        }
        __stady_pred_17 = __stady_pred_18;
        }
        }
        if ((! __stady_pred_17) && 1) {
          int __stady_pred_19 = 1;
          {
          int __q_k;
          for (__q_k = 0; __q_k < old_strlen &&  __stady_pred_19; __q_k++) {
          __stady_pred_19 = (*(old_ptr_str + __q_k) == *(old_dest + __q_k));
          }
          }
          if(!__stady_pred_19)pathcrawler_assert_exception("Post-condition!", 29);
          if(!(__retres == 0))pathcrawler_assert_exception("Post-condition!", 4);
          }
        
        }
      free(old_ptr_str);
      free(old_ptr_substr);
      free(old_ptr_dest);
      return __retres;
  }
}


[kernel] preprocessing with "gcc -C -E -I.  stady_temp.c"
stady_temp.c:16:[kernel] warning: Calling undeclared function malloc. Old style K&R code?
stady_temp.c:190:[kernel] warning: Calling undeclared function free. Old style K&R code?
[kernel] preprocessing with "gcc -C -E -I. -include /usr/local/share/frama-c/pc/lib/lanceur_deb.h stady_temp.c"
stady_temp.c:16:[kernel] warning: Calling undeclared function malloc. Old style K&R code?
stady_temp.c:190:[kernel] warning: Calling undeclared function free. Old style K&R code?
[pc] analyzing...
[pc] Compiling pathcrawler_stady_temp/lanceur_delete_substr utilities ...
[pc] Compiling pathcrawler_stady_temp/lanceur_delete_substr ...
[pc] generating tests...
[pc] Starting lanceur_delete_substr (isc version)
[pc] Starting lanceur_pathcrawler__delete_substr_precond (isc version)
[pc] Starting lanceur_delete_substr (isc version)
[pc] Starting lanceur_delete_substr (isc version)
[pc] Starting lanceur_delete_substr (isc version)
[pc] generation finished
[stady] all-paths: false
[stady] 234 test cases
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'delete_substr'
--------------------------------------------------------------------------------

[   Bug   ] Post-condition for 'not_present' (file tests/deleteSubstr1a/deleteSubstr1a.c, line 58)
            by StaDy.
[   Bug   ] Post-condition for 'not_present' (file tests/deleteSubstr1a/deleteSubstr1a.c, line 59)
            by StaDy.
[  Dead   ] Behavior 'not_present'
            Locally invalid, but unreachable.
            By Frama-C kernel because:
             - Post-condition for 'not_present' (file tests/deleteSubstr1a/deleteSubstr1a.c, line 58)
             - Post-condition for 'not_present' (file tests/deleteSubstr1a/deleteSubstr1a.c, line 59)

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
     2 Bugs found
     1 Dead property
     3 Total
--------------------------------------------------------------------------------
