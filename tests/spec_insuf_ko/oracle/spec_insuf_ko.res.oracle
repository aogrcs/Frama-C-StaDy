[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/spec_insuf_ko/spec_insuf_ko.c (with preprocessing)
[stady:generated-pl] generated Prolog precondition:
:- module(test_parameters).
:- import create_input_val/3 from substitution.
:- export dom/4.
:- export create_input_vals/2.
:- export unquantif_preconds/2.
:- export quantif_preconds/2.
:- export strategy/2.
:- export precondition_of/2.

dom(0,0,0,0).
dom('f', cont('nondet_sint_val',_), [], int([-2147483648..2147483647])).
dom('f', dim('nondet_sint_val'), [], int([0..4294967295])).
dom('f', dim('t'), [], int([4])).
dom('f', cont('t',_), [], int([-2147483648..2147483647])).
dom('pathcrawler__f_precond',A,B,C) :-
  dom('f',A,B,C).
create_input_vals('f', Ins):-
  create_input_val('nondet_sint_cpt', int([0]),Ins),
  create_input_val(dim('nondet_sint_val'), int([0..4294967295]),Ins),
  create_input_val(dim('t'), int([4]),Ins),
  create_input_val('k', int([4]),Ins),
  true.
create_input_vals('pathcrawler__f_precond',Ins) :-
  create_input_vals('f',Ins).
quantif_preconds('f',
  [

  ]
).
quantif_preconds('pathcrawler__f_precond',A) :-
  quantif_preconds('f',A).
unquantif_preconds('f',
  [

  ]
).
unquantif_preconds('pathcrawler__f_precond',A) :-
  unquantif_preconds('f',A).
strategy('f',[]).
strategy('pathcrawler__f_precond',A) :-
  strategy('f',A).
precondition_of('f','pathcrawler__f_precond').
[stady:generated-c] generated C file:
/* Generated by Frama-C */
#include "/usr/local/share/frama-c/stady/externals.h"
#include "/usr/local/share/frama-c/stady/nondet.c"
void __sd_sort_mod_0(int *A, int n);
/*@ requires n == 4;
    requires \valid(A+(0 .. n-1));
    assigns *(A+(0 .. n-1)); */
void sort(int *A, int n)
{
  mpz_t __sd_Z_to_Z_0;
  __gmpz_init_set_si(__sd_Z_to_Z_0,n);
  mpz_t __sd_Z_cst_0;
  __gmpz_init_set_str(__sd_Z_cst_0,"4",10);
  int __sd_eq_0;
  __sd_eq_0 = __gmpz_cmp(__sd_Z_to_Z_0,__sd_Z_cst_0);
  __gmpz_clear(__sd_Z_to_Z_0);
  __gmpz_clear(__sd_Z_cst_0);
  if(! (__sd_eq_0 == 0)) {
    pathcrawler_assert_exception("28$",6);
  }
  mpz_t __sd_Z_cst_1;
  __gmpz_init_set_str(__sd_Z_cst_1,"0",10);
  mpz_t __sd_Z_to_Z_1;
  __gmpz_init_set_si(__sd_Z_to_Z_1,n);
  mpz_t __sd_Z_cst_2;
  __gmpz_init_set_str(__sd_Z_cst_2,"1",10);
  mpz_t __sd_Z_sub_0;
  __gmpz_init(__sd_Z_sub_0);
  __gmpz_sub(__sd_Z_sub_0,__sd_Z_to_Z_1,__sd_Z_cst_2);
  __gmpz_clear(__sd_Z_to_Z_1);
  __gmpz_clear(__sd_Z_cst_2);
  int __sd_valid_0;
  int __sd_valid_cmp_0;
  __sd_valid_cmp_0 = __gmpz_cmp(__sd_Z_cst_1,__sd_Z_sub_0);
  if(__sd_valid_cmp_0 <= 0) {
    int __sd_valid_dim_0;
    __sd_valid_dim_0 = pathcrawler_dimension(A);
    int __sd_valid_cmp_1;
    __sd_valid_cmp_1 = __gmpz_cmp_ui(__sd_Z_sub_0,__sd_valid_dim_0);
    int __sd_valid_cmp_2;
    __sd_valid_cmp_2 = __gmpz_cmp_ui(__sd_Z_sub_0,0);
    __sd_valid_0 = __sd_valid_cmp_2 >= 0 && __sd_valid_cmp_1 < 0;
  }
  else {
    __sd_valid_0 = 1;
  }
  __gmpz_clear(__sd_Z_cst_1);
  __gmpz_clear(__sd_Z_sub_0);
  if(! __sd_valid_0) {
    pathcrawler_assert_exception("28$",8);
  }
  int *old_A;
  int *old_ptr_A;
  old_A = A;
  mpz_t __sd_Z_to_Z_2;
  __gmpz_init_set_si(__sd_Z_to_Z_2,n);
  unsigned long __sd_to_ctype_0;
  __sd_to_ctype_0 = __gmpz_get_ui(__sd_Z_to_Z_2);
  __gmpz_clear(__sd_Z_to_Z_2);
  unsigned long __sd_iter_0;
  old_ptr_A = (int *)malloc(__sd_to_ctype_0 * (unsigned long)sizeof(int));
  __sd_iter_0 = 0;
  while(__sd_iter_0 < __sd_to_ctype_0) {
    *(old_ptr_A + __sd_iter_0) = *(A + __sd_iter_0);
    __sd_iter_0 ++;
  }
  int old_n;
  old_n = n;
  {
    int c;
    int position;
    c = 0;
    while (1) {
      if (! (c < n - 1)) break;{
                                 int d;
                                 position = c;
                                 d = c + 1;
                                 while (1) {
                                   if (! (d < n)) break;if (*(A + position) > *(
                                                            A + d)) position = d;
                                                        d ++;}
                                    
                                 if (position != c) {
                                   int swap;
                                   swap = *(A + c);
                                   *(A + c) = *(A + position);
                                   *(A + position) = swap;
                                 }
                               }
                               c ++;}
       
    free(old_ptr_A);
    return;
  }
}

int f_precond(int *t, int k)
{
  return 1;
}

void f(int *t, int k)
{
  int *old_t;
  int *old_ptr_t;
  old_t = t;
  mpz_t __sd_Z_to_Z_3;
  __gmpz_init_set_si(__sd_Z_to_Z_3,k);
  unsigned long __sd_to_ctype_3;
  __sd_to_ctype_3 = __gmpz_get_ui(__sd_Z_to_Z_3);
  __gmpz_clear(__sd_Z_to_Z_3);
  unsigned long __sd_iter_1;
  old_ptr_t = (int *)malloc(__sd_to_ctype_3 * (unsigned long)sizeof(int));
  __sd_iter_1 = 0;
  while(__sd_iter_1 < __sd_to_ctype_3) {
    *(old_ptr_t + __sd_iter_1) = *(t + __sd_iter_1);
    __sd_iter_1 ++;
  }
  int old_k;
  old_k = k;
  {
    {
      __sd_sort_mod_0(t,k);
      
    }
    {
      mpz_t __sd_Z_cst_3;
      __gmpz_init_set_str(__sd_Z_cst_3,"0",10);
      int __sd_to_ctype_1;
      __sd_to_ctype_1 = (int)__gmpz_get_si(__sd_Z_cst_3);
      __gmpz_clear(__sd_Z_cst_3);
      mpz_t __sd_Z_cst_4;
      __gmpz_init_set_str(__sd_Z_cst_4,"1",10);
      int __sd_to_ctype_2;
      __sd_to_ctype_2 = (int)__gmpz_get_si(__sd_Z_cst_4);
      __gmpz_clear(__sd_Z_cst_4);
      if(! (*(old_t + __sd_to_ctype_1) <= *(old_t + __sd_to_ctype_2))) {
        pathcrawler_assert_exception("28$",3);
      }
    }
    free(old_ptr_t);
    return;
  }
}

void __sd_sort_mod_0(int *A, int n) {
  if(1) {
    int old_n;
    int *old_A;
    int *old_ptr_A;
    old_n = n;
    old_A = A;
    mpz_t __sd_Z_to_Z_4;
    __gmpz_init_set_si(__sd_Z_to_Z_4,n);
    unsigned long __sd_to_ctype_4;
    __sd_to_ctype_4 = __gmpz_get_ui(__sd_Z_to_Z_4);
    __gmpz_clear(__sd_Z_to_Z_4);
    unsigned long __sd_iter_2;
    old_ptr_A = (int *)malloc(__sd_to_ctype_4 * (unsigned long)sizeof(int));
    __sd_iter_2 = 0;
    while(__sd_iter_2 < __sd_to_ctype_4) {
      *(old_ptr_A + __sd_iter_2) = *(A + __sd_iter_2);
      __sd_iter_2 ++;
    }
    int __sd_iter_3;
    mpz_t __sd_Z_cst_5;
    __gmpz_init_set_str(__sd_Z_cst_5,"0",10);
    int __sd_to_ctype_5;
    __sd_to_ctype_5 = (int)__gmpz_get_si(__sd_Z_cst_5);
    __gmpz_clear(__sd_Z_cst_5);
    __sd_iter_3 = __sd_to_ctype_5;
    mpz_t __sd_Z_to_Z_5;
    __gmpz_init_set_si(__sd_Z_to_Z_5,n);
    mpz_t __sd_Z_cst_6;
    __gmpz_init_set_str(__sd_Z_cst_6,"1",10);
    mpz_t __sd_Z_sub_1;
    __gmpz_init(__sd_Z_sub_1);
    __gmpz_sub(__sd_Z_sub_1,__sd_Z_to_Z_5,__sd_Z_cst_6);
    __gmpz_clear(__sd_Z_to_Z_5);
    __gmpz_clear(__sd_Z_cst_6);
    int __sd_to_ctype_6;
    __sd_to_ctype_6 = (int)__gmpz_get_si(__sd_Z_sub_1);
    __gmpz_clear(__sd_Z_sub_1);
    while(__sd_iter_3 <= __sd_to_ctype_6) {
      *(A + __sd_iter_3) = nondet_sint();
      __sd_iter_3 ++;
    }
    free(old_ptr_A);
  }
}

[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing __sd_instru_spec_insuf_ko_f.c (with preprocessing)
[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing __sd_instru_spec_insuf_ko_f.c (with preprocessing)
[pc] analyzing...
[pc] Compiling pathcrawler___sd_instru_spec_insuf_ko_f/lanceur_f utilities ...
[pc] Compiling pathcrawler___sd_instru_spec_insuf_ko_f/lanceur_f ...
[pc] generating tests...
[pc] Starting lanceur_f (isc version)
[pc] Starting lanceur_pathcrawler__f_precond (isc version)
[pc] Starting lanceur_f (isc version)
[pc] generation finished
[stady] all-paths: true
[stady] 21 test cases
[stady] CW of sort(t,k); for ensures *(\old(t)+0) â‰¤ *(\old(t)+1) 
        LOCATION: tests/spec_insuf_ko/spec_insuf_ko.c:37
        TEST DRIVER: testcases___sd_instru_spec_insuf_ko_f/f/testdrivers/TC_5.c
        k = 4
        nondet_sint_val[0] = 174739
        nondet_sint_val[1] = 171583
        nondet_sint_val[2] = 172458
        nondet_sint_val[3] = -144005
        t[0] = 65712 -- OUTPUT: 174739 (nondet_sint_val[0])
        t[1] = 198227 -- OUTPUT: 171583 (nondet_sint_val[1])
        t[2] = 153754 -- OUTPUT: 172458 (nondet_sint_val[2])
        t[3] = -88465 -- OUTPUT: -144005 (nondet_sint_val[3])
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'sort'
--------------------------------------------------------------------------------

[  Valid  ] Pre-condition (file tests/spec_insuf_ko/spec_insuf_ko.c, line 6)
            by StaDy.
[  Valid  ] Pre-condition (file tests/spec_insuf_ko/spec_insuf_ko.c, line 7)
            by StaDy.

--------------------------------------------------------------------------------
--- Properties of Function 'f'
--------------------------------------------------------------------------------

[  Valid  ] Post-condition (file tests/spec_insuf_ko/spec_insuf_ko.c, line 34)
            by StaDy.
[    -    ] Default behavior
            tried with Frama-C kernel.

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
     3 Completely validated
     1 To be validated
     4 Total
--------------------------------------------------------------------------------
