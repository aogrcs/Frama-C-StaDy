[kernel] preprocessing with "gcc -C -E -I.  tests/binary_search/binary_search.c"
[stady] warning: Native Precondition:
                 ∀ ℤ __q_j;
                   0 ≤ __q_j ∧ __q_j < length-1 ⇒ *(arr+__q_j) ≤ *(arr+(__q_j+1)) unsupported
[stady:generated-pl] generated Prolog precondition:
:- module(test_parameters).
:- import create_input_val/3 from substitution.
:- export dom/4.
:- export create_input_vals/2.
:- export unquantif_preconds/2.
:- export quantif_preconds/2.
:- export strategy/2.
:- export precondition_of/2.

dom(0,0,0,0).
dom('binary_search', dim('arr'), [], int([1..4294967295])).
dom('binary_search', cont('arr',_), [], int([-2147483648..2147483647])).
dom('pathcrawler__binary_search_precond',A,B,C) :-
  dom('binary_search',A,B,C).
create_input_vals('binary_search', Ins):-
  create_input_val(dim('arr'), int([1..4294967295]),Ins),
  create_input_val('length', int([1..3]),Ins),
  create_input_val('query', int([-2147483648..2147483647]),Ins),
  true.
create_input_vals('pathcrawler__binary_search_precond',Ins) :-
  create_input_vals('binary_search',Ins).
quantif_preconds('binary_search',
  [
  ]
).
quantif_preconds('pathcrawler__binary_search_precond',A) :-
  quantif_preconds('binary_search',A).
unquantif_preconds('binary_search',
  [
    cond(egal,dim('arr'),+(int(math), -(int(math), 'length', 1), 1),pre)
  ]
).
unquantif_preconds('pathcrawler__binary_search_precond',A) :-
  unquantif_preconds('binary_search',A).
strategy('binary_search',[]).
strategy('pathcrawler__binary_search_precond',A) :-
  strategy('binary_search',A).
precondition_of('binary_search','pathcrawler__binary_search_precond').
[stady:generated-c] generated C file:
/* Generated by Frama-C */
#include <gmp.h>
extern int pathcrawler_assert_exception(char*,int);
extern int pathcrawler_dimension(void*);
extern void pathcrawler_to_framac(char*);
extern void* malloc(unsigned);
extern void free(void*);
int binary_search_precond(int *arr, int length, int query)
{
int __stady_pred_0 = 1;
{
mpz_t __q_j;
mpz_t __stady_gmp_0;
__gmpz_init_set_si(__stady_gmp_0, 0);
mpz_t __stady_gmp_1;
__gmpz_init_set_si(__stady_gmp_1, length);
mpz_t __stady_gmp_2;
__gmpz_init_set_si(__stady_gmp_2, 1);
mpz_t __stady_gmp_3;
__gmpz_init(__stady_gmp_3);
__gmpz_sub(__stady_gmp_3, __stady_gmp_1, __stady_gmp_2);
__gmpz_clear(__stady_gmp_1);
__gmpz_clear(__stady_gmp_2);
__gmpz_init_set(__q_j, __stady_gmp_0);
for (; __gmpz_cmp(__q_j, __stady_gmp_3) < 0 &&  __stady_pred_0;) {
mpz_t __stady_gmp_4;
__gmpz_init_set(__stady_gmp_4, __q_j);
mpz_t __stady_gmp_5;
__gmpz_init_set(__stady_gmp_5, __q_j);
mpz_t __stady_gmp_6;
__gmpz_init_set_si(__stady_gmp_6, 1);
mpz_t __stady_gmp_7;
__gmpz_init(__stady_gmp_7);
__gmpz_add(__stady_gmp_7, __stady_gmp_5, __stady_gmp_6);
__gmpz_clear(__stady_gmp_5);
__gmpz_clear(__stady_gmp_6);
__stady_pred_0 = (*(arr + __gmpz_get_si(__stady_gmp_4)) <= *(arr + __gmpz_get_si(__stady_gmp_7)));
__gmpz_add_ui(__q_j, __q_j, 1);
}
__gmpz_clear(__q_j);
__gmpz_clear(__stady_gmp_0);
__gmpz_clear(__stady_gmp_3);
}
if (!__stady_pred_0) return 0;
return 1;
}

int binary_search(int *arr, int length, int query)
{
  int *old_arr = arr;
  int *old_ptr_arr;
  mpz_t __stady_gmp_8;
  __gmpz_init_set_si(__stady_gmp_8, length);
  mpz_t __stady_gmp_9;
  __gmpz_init_set_si(__stady_gmp_9, 1);
  mpz_t __stady_gmp_10;
  __gmpz_init(__stady_gmp_10);
  __gmpz_sub(__stady_gmp_10, __stady_gmp_8, __stady_gmp_9);
  __gmpz_clear(__stady_gmp_8);
  __gmpz_clear(__stady_gmp_9);
  mpz_t __stady_gmp_11;
  __gmpz_init_set_si(__stady_gmp_11, 1);
  mpz_t __stady_gmp_12;
  __gmpz_init(__stady_gmp_12);
  __gmpz_add(__stady_gmp_12, __stady_gmp_10, __stady_gmp_11);
  __gmpz_clear(__stady_gmp_10);
  __gmpz_clear(__stady_gmp_11);
  int __stady_iter_0;
  old_ptr_arr = malloc(__gmpz_get_si(__stady_gmp_12)*sizeof(int));
  for (__stady_iter_0 = 0; __stady_iter_0 < __gmpz_get_si(__stady_gmp_12); __stady_iter_0++) {
  old_ptr_arr[__stady_iter_0] = arr[__stady_iter_0];
  }
  int old_length = length;
  int old_query = query;
  {
    int __retres;
    int low;
    int high;
    low = 0;
    high = length - 1;
    {
      mpz_t __stady_gmp_13;
      __gmpz_init_set_si(__stady_gmp_13, high);
      mpz_t __stady_gmp_14;
      __gmpz_init_set_si(__stady_gmp_14, low);
      mpz_t __stady_gmp_15;
      __gmpz_init(__stady_gmp_15);
      __gmpz_sub(__stady_gmp_15, __stady_gmp_13, __stady_gmp_14);
      __gmpz_clear(__stady_gmp_13);
      __gmpz_clear(__stady_gmp_14);
      if (__gmpz_cmp_ui(__stady_gmp_15, 0) < 0)pathcrawler_assert_exception("Variant non positive",7);mpz_t __stady_gmp_16;
      __gmpz_init_set_si(__stady_gmp_16, low);
      mpz_t __stady_gmp_17;
      __gmpz_init_set_si(__stady_gmp_17, 1);
      mpz_t __stady_gmp_18;
      __gmpz_init(__stady_gmp_18);
      __gmpz_sub(__stady_gmp_18, __stady_gmp_16, __stady_gmp_17);
      __gmpz_clear(__stady_gmp_16);
      __gmpz_clear(__stady_gmp_17);
      mpz_t __stady_gmp_19;
      __gmpz_init_set_si(__stady_gmp_19, high);
      int __stady_pred_2 = __gmpz_cmp(__stady_gmp_18, __stady_gmp_19) <= 0;
      __gmpz_clear(__stady_gmp_18);
      __gmpz_clear(__stady_gmp_19);
      int __stady_pred_1 = __stady_pred_2;
      if (__stady_pred_1) {
      mpz_t __stady_gmp_20;
      __gmpz_init_set_si(__stady_gmp_20, high);
      mpz_t __stady_gmp_21;
      __gmpz_init_set_si(__stady_gmp_21, length);
      mpz_t __stady_gmp_22;
      __gmpz_init_set_si(__stady_gmp_22, 1);
      mpz_t __stady_gmp_23;
      __gmpz_init(__stady_gmp_23);
      __gmpz_sub(__stady_gmp_23, __stady_gmp_21, __stady_gmp_22);
      __gmpz_clear(__stady_gmp_21);
      __gmpz_clear(__stady_gmp_22);
      int __stady_pred_3 = __gmpz_cmp(__stady_gmp_20, __stady_gmp_23) <= 0;
      __gmpz_clear(__stady_gmp_20);
      __gmpz_clear(__stady_gmp_23);
      __stady_pred_1 = __stady_pred_3;
      }
      if(!__stady_pred_1)pathcrawler_assert_exception("Loop invariant not established!", 10);
      mpz_t __stady_gmp_24;
      __gmpz_init_set_si(__stady_gmp_24, 0);
      mpz_t __stady_gmp_25;
      __gmpz_init_set_si(__stady_gmp_25, low);
      int __stady_pred_5 = __gmpz_cmp(__stady_gmp_24, __stady_gmp_25) <= 0;
      __gmpz_clear(__stady_gmp_24);
      __gmpz_clear(__stady_gmp_25);
      int __stady_pred_4 = __stady_pred_5;
      if (__stady_pred_4) {
      mpz_t __stady_gmp_26;
      __gmpz_init_set_si(__stady_gmp_26, low);
      mpz_t __stady_gmp_27;
      __gmpz_init_set_si(__stady_gmp_27, high);
      mpz_t __stady_gmp_28;
      __gmpz_init_set_si(__stady_gmp_28, 1);
      mpz_t __stady_gmp_29;
      __gmpz_init(__stady_gmp_29);
      __gmpz_add(__stady_gmp_29, __stady_gmp_27, __stady_gmp_28);
      __gmpz_clear(__stady_gmp_27);
      __gmpz_clear(__stady_gmp_28);
      int __stady_pred_6 = __gmpz_cmp(__stady_gmp_26, __stady_gmp_29) <= 0;
      __gmpz_clear(__stady_gmp_26);
      __gmpz_clear(__stady_gmp_29);
      __stady_pred_4 = __stady_pred_6;
      }
      if(!__stady_pred_4)pathcrawler_assert_exception("Loop invariant not established!", 4);
      while (1) {
        mpz_t __stady_gmp_30;
        __gmpz_init_set_si(__stady_gmp_30, high);
        mpz_t __stady_gmp_31;
        __gmpz_init_set_si(__stady_gmp_31, low);
        mpz_t __stady_gmp_32;
        __gmpz_init(__stady_gmp_32);
        __gmpz_sub(__stady_gmp_32, __stady_gmp_30, __stady_gmp_31);
        __gmpz_clear(__stady_gmp_30);
        __gmpz_clear(__stady_gmp_31);
        mpz_t old_variant_7;
        __gmpz_init_set(old_variant_7, __stady_gmp_32);
        {
          if (! (low <= high)) { pathcrawler_to_framac("@FC:REACHABLE_STMT:7");
                               break; }
                               
          {
            int mean;
            mean = low + (high - low) / 2;
            {
              int __stady_pred_7 = (low <= mean);
              if (__stady_pred_7) {
              __stady_pred_7 = (mean <= high);
              }
              if(!__stady_pred_7)pathcrawler_assert_exception("Assert!", 5);
              ;}
               
            {
              int __stady_pred_8 = 1;
              if ((low < mean)) {
              int __stady_pred_9 = 1;
              {
              mpz_t __q_x;
              mpz_t __stady_gmp_33;
              __gmpz_init_set_si(__stady_gmp_33, 0);
              __gmpz_init_set(__q_x, __stady_gmp_33);
              for (; __gmpz_cmp_si(__q_x, low) < 0 &&  __stady_pred_9;) {
              mpz_t __stady_gmp_34;
              __gmpz_init_set_si(__stady_gmp_34, __q_x);
              __stady_pred_9 = (*(arr + __gmpz_get_si(__stady_gmp_34)) != query);
              __gmpz_add_ui(__q_x, __q_x, 1);
              }
              __gmpz_clear(__q_x);
              __gmpz_clear(__stady_gmp_33);
              }
              __stady_pred_8 = __stady_pred_9;
              }
              if(!__stady_pred_8)pathcrawler_assert_exception("Assert!", 12);
              ;}
               
            {
              int __stady_pred_10 = 1;
              mpz_t __stady_gmp_35;
              __gmpz_init_set_si(__stady_gmp_35, mean);
              mpz_t __stady_gmp_36;
              __gmpz_init_set_si(__stady_gmp_36, 1);
              mpz_t __stady_gmp_37;
              __gmpz_init(__stady_gmp_37);
              __gmpz_add(__stady_gmp_37, __stady_gmp_35, __stady_gmp_36);
              __gmpz_clear(__stady_gmp_35);
              __gmpz_clear(__stady_gmp_36);
              mpz_t __stady_gmp_38;
              __gmpz_init_set_si(__stady_gmp_38, high);
              int __stady_pred_11 = __gmpz_cmp(__stady_gmp_37, __stady_gmp_38) < 0;
              __gmpz_clear(__stady_gmp_37);
              __gmpz_clear(__stady_gmp_38);
              if (__stady_pred_11) {
              int __stady_pred_12 = 1;
              {
              int __q_x;
              for (__q_x = high+1; __q_x < length &&  __stady_pred_12; __q_x++) {
              mpz_t __stady_gmp_39;
              __gmpz_init_set_si(__stady_gmp_39, __q_x);
              __stady_pred_12 = (*(arr + __gmpz_get_si(__stady_gmp_39)) != query);
              }
              }
              __stady_pred_10 = __stady_pred_12;
              }
              if(!__stady_pred_10)pathcrawler_assert_exception("Assert!", 0);
              ;}
               
            if (*(arr + mean) == query) {
              { pathcrawler_to_framac("@FC:REACHABLE_STMT:18");
              __retres = mean; }
              
              goto return_label;
            }
            if (*(arr + mean) < query) { pathcrawler_to_framac("@FC:REACHABLE_STMT:22");
                                       low = mean + 1; }
                                       
            else { pathcrawler_to_framac("@FC:REACHABLE_STMT:23");
                 high = mean - 1; }
                 
          }
        }mpz_t __stady_gmp_40;
        __gmpz_init_set_si(__stady_gmp_40, 0);
        mpz_t __stady_gmp_41;
        __gmpz_init_set_si(__stady_gmp_41, low);
        int __stady_pred_14 = __gmpz_cmp(__stady_gmp_40, __stady_gmp_41) <= 0;
        __gmpz_clear(__stady_gmp_40);
        __gmpz_clear(__stady_gmp_41);
        int __stady_pred_13 = __stady_pred_14;
        if (__stady_pred_13) {
        mpz_t __stady_gmp_42;
        __gmpz_init_set_si(__stady_gmp_42, low);
        mpz_t __stady_gmp_43;
        __gmpz_init_set_si(__stady_gmp_43, high);
        mpz_t __stady_gmp_44;
        __gmpz_init_set_si(__stady_gmp_44, 1);
        mpz_t __stady_gmp_45;
        __gmpz_init(__stady_gmp_45);
        __gmpz_add(__stady_gmp_45, __stady_gmp_43, __stady_gmp_44);
        __gmpz_clear(__stady_gmp_43);
        __gmpz_clear(__stady_gmp_44);
        int __stady_pred_15 = __gmpz_cmp(__stady_gmp_42, __stady_gmp_45) <= 0;
        __gmpz_clear(__stady_gmp_42);
        __gmpz_clear(__stady_gmp_45);
        __stady_pred_13 = __stady_pred_15;
        }
        if(!__stady_pred_13)pathcrawler_assert_exception("Loop invariant not preserved!", 4);
        mpz_t __stady_gmp_46;
        __gmpz_init_set_si(__stady_gmp_46, low);
        mpz_t __stady_gmp_47;
        __gmpz_init_set_si(__stady_gmp_47, 1);
        mpz_t __stady_gmp_48;
        __gmpz_init(__stady_gmp_48);
        __gmpz_sub(__stady_gmp_48, __stady_gmp_46, __stady_gmp_47);
        __gmpz_clear(__stady_gmp_46);
        __gmpz_clear(__stady_gmp_47);
        mpz_t __stady_gmp_49;
        __gmpz_init_set_si(__stady_gmp_49, high);
        int __stady_pred_17 = __gmpz_cmp(__stady_gmp_48, __stady_gmp_49) <= 0;
        __gmpz_clear(__stady_gmp_48);
        __gmpz_clear(__stady_gmp_49);
        int __stady_pred_16 = __stady_pred_17;
        if (__stady_pred_16) {
        mpz_t __stady_gmp_50;
        __gmpz_init_set_si(__stady_gmp_50, high);
        mpz_t __stady_gmp_51;
        __gmpz_init_set_si(__stady_gmp_51, length);
        mpz_t __stady_gmp_52;
        __gmpz_init_set_si(__stady_gmp_52, 1);
        mpz_t __stady_gmp_53;
        __gmpz_init(__stady_gmp_53);
        __gmpz_sub(__stady_gmp_53, __stady_gmp_51, __stady_gmp_52);
        __gmpz_clear(__stady_gmp_51);
        __gmpz_clear(__stady_gmp_52);
        int __stady_pred_18 = __gmpz_cmp(__stady_gmp_50, __stady_gmp_53) <= 0;
        __gmpz_clear(__stady_gmp_50);
        __gmpz_clear(__stady_gmp_53);
        __stady_pred_16 = __stady_pred_18;
        }
        if(!__stady_pred_16)pathcrawler_assert_exception("Loop invariant not preserved!", 10);
        mpz_t __stady_gmp_54;
        __gmpz_init_set_si(__stady_gmp_54, high);
        mpz_t __stady_gmp_55;
        __gmpz_init_set_si(__stady_gmp_55, low);
        mpz_t __stady_gmp_56;
        __gmpz_init(__stady_gmp_56);
        __gmpz_sub(__stady_gmp_56, __stady_gmp_54, __stady_gmp_55);
        __gmpz_clear(__stady_gmp_54);
        __gmpz_clear(__stady_gmp_55);
        if (__gmpz_cmp_ui(old_variant_7,0) < 0)pathcrawler_assert_exception("Variant non positive",7);
        if (__gmpz_cmp(__stady_gmp_56, old_variant_7) >= 0)pathcrawler_assert_exception("Variant non decreasing",7);__gmpz_clear(old_variant_7);
        }
         __gmpz_clear(__stady_gmp_15);
      }
       
    __retres = -1;
    return_label:
      {
        mpz_t __stady_gmp_57;
        __gmpz_init_set_si(__stady_gmp_57, 1);
        mpz_t __stady_gmp_58;
        mpz_t __stady_gmp_59;
        __gmpz_init(__stady_gmp_58);
        __gmpz_init_set_si(__stady_gmp_59, 0);
        __gmpz_sub(__stady_gmp_58, __stady_gmp_59, __stady_gmp_57);
        __gmpz_clear(__stady_gmp_57);
        __gmpz_clear(__stady_gmp_59);
        mpz_t __stady_gmp_60;
        __gmpz_init_set_si(__stady_gmp_60, __retres);
        int __stady_pred_20 = __gmpz_cmp(__stady_gmp_58, __stady_gmp_60) <= 0;
        __gmpz_clear(__stady_gmp_58);
        __gmpz_clear(__stady_gmp_60);
        int __stady_pred_19 = __stady_pred_20;
        if (__stady_pred_19) {
        __stady_pred_19 = (__retres < old_length);
        }
        if(!__stady_pred_19)pathcrawler_assert_exception("Post-condition!", 11);
        int __stady_pred_21 = 1;
        mpz_t __stady_gmp_61;
        __gmpz_init_set_si(__stady_gmp_61, __retres);
        mpz_t __stady_gmp_62;
        __gmpz_init_set_si(__stady_gmp_62, 1);
        mpz_t __stady_gmp_63;
        mpz_t __stady_gmp_64;
        __gmpz_init(__stady_gmp_63);
        __gmpz_init_set_si(__stady_gmp_64, 0);
        __gmpz_sub(__stady_gmp_63, __stady_gmp_64, __stady_gmp_62);
        __gmpz_clear(__stady_gmp_62);
        __gmpz_clear(__stady_gmp_64);
        int __stady_pred_22 = __gmpz_cmp(__stady_gmp_61, __stady_gmp_63) == 0;
        __gmpz_clear(__stady_gmp_61);
        __gmpz_clear(__stady_gmp_63);
        if (__stady_pred_22) {
        int __stady_pred_23 = 1;
        {
        mpz_t __q_i;
        mpz_t __stady_gmp_65;
        __gmpz_init_set_si(__stady_gmp_65, 0);
        mpz_t __stady_gmp_66;
        __gmpz_init_set_si(__stady_gmp_66, old_length);
        __gmpz_init_set(__q_i, __stady_gmp_65);
        for (; __gmpz_cmp(__q_i, __stady_gmp_66) < 0 &&  __stady_pred_23;) {
        mpz_t __stady_gmp_67;
        __gmpz_init_set(__stady_gmp_67, __q_i);
        __stady_pred_23 = (*(old_arr + __gmpz_get_si(__stady_gmp_67)) != old_query);
        __gmpz_add_ui(__q_i, __q_i, 1);
        }
        __gmpz_clear(__q_i);
        __gmpz_clear(__stady_gmp_65);
        __gmpz_clear(__stady_gmp_66);
        }
        __stady_pred_21 = __stady_pred_23;
        }
        if(!__stady_pred_21)pathcrawler_assert_exception("Post-condition!", 14);
        int __stady_pred_24 = 1;
        mpz_t __stady_gmp_68;
        __gmpz_init_set_si(__stady_gmp_68, __retres);
        mpz_t __stady_gmp_69;
        __gmpz_init_set_si(__stady_gmp_69, 0);
        int __stady_pred_25 = __gmpz_cmp(__stady_gmp_68, __stady_gmp_69) >= 0;
        __gmpz_clear(__stady_gmp_68);
        __gmpz_clear(__stady_gmp_69);
        if (__stady_pred_25) {
        mpz_t __stady_gmp_70;
        __gmpz_init_set_si(__stady_gmp_70, __retres);
        __stady_pred_24 = (*(old_arr + __gmpz_get_si(__stady_gmp_70)) == old_query);
        }
        if(!__stady_pred_24)pathcrawler_assert_exception("Post-condition!", 2);
        
        }
      free(old_ptr_arr);
      return __retres;
  }
}


[kernel] preprocessing with "gcc -C -E -I.  stady_temp.c"
[kernel] preprocessing with "gcc -C -E -I. -include /usr/local/share/frama-c/pc/lib/lanceur_deb.h stady_temp.c"
[pc] analyzing...
[pc] Compiling pathcrawler_stady_temp/lanceur_binary_search utilities ...
[pc] Compiling pathcrawler_stady_temp/lanceur_binary_search ...
[pc] generating tests...
[pc] Starting lanceur_binary_search (isc version)
[pc] Starting lanceur_pathcrawler__binary_search_precond (isc version)
[pc] generation finished
[stady] all-paths: true
[stady] 459 test cases
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'binary_search'
--------------------------------------------------------------------------------

[  Valid  ] Post-condition (file tests/binary_search/binary_search.c, line 12)
            by StaDy.
[  Valid  ] Post-condition (file tests/binary_search/binary_search.c, line 13)
            by StaDy.
[  Valid  ] Post-condition (file tests/binary_search/binary_search.c, line 14)
            by StaDy.
[    -    ] Assigns nothing
[  Valid  ] Loop variant at loop (file tests/binary_search/binary_search.c, line 24)
            by StaDy.
[  Valid  ] Invariant (file tests/binary_search/binary_search.c, line 19)
            by StaDy.
[  Valid  ] Invariant (file tests/binary_search/binary_search.c, line 20)
            by StaDy.
[  Valid  ] Assertion (file tests/binary_search/binary_search.c, line 26)
            by StaDy.
[  Valid  ] Assertion (file tests/binary_search/binary_search.c, line 27)
            by StaDy.
[  Valid  ] Assertion (file tests/binary_search/binary_search.c, line 28)
            by StaDy.
[    -    ] Default behavior
            tried with Frama-C kernel.

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
     9 Completely validated
     2 To be validated
    11 Total
--------------------------------------------------------------------------------
