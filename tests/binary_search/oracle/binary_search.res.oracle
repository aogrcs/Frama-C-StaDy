[kernel] preprocessing with "gcc -C -E -I.  tests/binary_search/binary_search.c"
tests/binary_search/binary_search.c:16:[stady] warning: Native Precondition:
                 ∀ ℤ __q_j; 0 ≤ __q_j < length-1 ⇒ *(arr+__q_j) ≤ *(arr+(__q_j+1)) unsupported
[stady:generated-pl] generated Prolog precondition:
:- module(test_parameters).
:- import create_input_val/3 from substitution.
:- export dom/4.
:- export create_input_vals/2.
:- export unquantif_preconds/2.
:- export quantif_preconds/2.
:- export strategy/2.
:- export precondition_of/2.

dom(0,0,0,0).
dom('binary_search', dim('arr'), [], int([1..4294967295])).
dom('binary_search', cont('arr',_), [], int([-2147483648..2147483647])).
dom('pathcrawler__binary_search_precond',A,B,C) :-
  dom('binary_search',A,B,C).
create_input_vals('binary_search', Ins):-
  create_input_val(dim('arr'), int([1..4294967295]),Ins),
  create_input_val('length', int([1..3]),Ins),
  create_input_val('query', int([-2147483648..2147483647]),Ins),
  true.
create_input_vals('pathcrawler__binary_search_precond',Ins) :-
  create_input_vals('binary_search',Ins).
quantif_preconds('binary_search',
  [
  ]
).
quantif_preconds('pathcrawler__binary_search_precond',A) :-
  quantif_preconds('binary_search',A).
unquantif_preconds('binary_search',
  [
    cond(egal,dim('arr'),+(int(math), -(int(math), 'length', 1), 1),pre)
  ]
).
unquantif_preconds('pathcrawler__binary_search_precond',A) :-
  unquantif_preconds('binary_search',A).
strategy('binary_search',[]).
strategy('pathcrawler__binary_search_precond',A) :-
  strategy('binary_search',A).
precondition_of('binary_search','pathcrawler__binary_search_precond').
[stady:generated-c] generated C file:
/* Generated by Frama-C */
struct __anonstruct___mpz_struct_1 {int _mp_alloc ;int _mp_size ;unsigned long *_mp_d ;};typedef struct __anonstruct___mpz_struct_1 __mpz_struct;typedef __mpz_struct ( __attribute__((__FC_BUILTIN__)) mpz_t)[1];
extern signed int __gmpz_get_si(mpz_t);
extern int __gmpz_cmp_ui(mpz_t, unsigned long int);
extern int __gmpz_cmp_si(mpz_t, signed long int);
extern int __gmpz_cmp(mpz_t, mpz_t);
extern void __gmpz_clear(mpz_t);
extern void __gmpz_init(mpz_t);
extern void __gmpz_init_set(mpz_t, mpz_t);
extern void __gmpz_init_set_si(mpz_t, signed long int);
extern void __gmpz_init_set_str(mpz_t, const char*, int);
extern void __gmpz_add(mpz_t, const mpz_t, const mpz_t);
extern void __gmpz_add_ui(mpz_t, const mpz_t, unsigned long int);
extern void __gmpz_sub(mpz_t, const mpz_t, const mpz_t);
extern void __gmpz_ui_sub(mpz_t, unsigned long int, const mpz_t);
extern int pathcrawler_assert_exception(char*,int);
extern void pathcrawler_to_framac(char*);
extern void* malloc(unsigned);
extern void free(void*);
int binary_search_precond(int *arr, int length, int query)
{
  int __stady_pred_0;
  __stady_pred_0 = 1;
  {
    mpz_t __q_j;
    mpz_t __stady_gmp_0;
    __gmpz_init_set_str(__stady_gmp_0, "0", 10);
    mpz_t __stady_gmp_1;
    __gmpz_init_set_si(__stady_gmp_1, length);
    mpz_t __stady_gmp_2;
    __gmpz_init_set_str(__stady_gmp_2, "1", 10);
    mpz_t __stady_gmp_3;
    __gmpz_init(__stady_gmp_3);
    __gmpz_sub(__stady_gmp_3, __stady_gmp_1, __stady_gmp_2);
    __gmpz_clear(__stady_gmp_1);
    __gmpz_clear(__stady_gmp_2);
    __gmpz_init_set(__q_j, __stady_gmp_0);
    while((__gmpz_cmp(__q_j, __stady_gmp_3) < 0 && __stady_pred_0)) {
      mpz_t __stady_gmp_4;
      __gmpz_init_set(__stady_gmp_4, __q_j);
      int __stady_term_0;
      __stady_term_0 = __gmpz_get_si(__stady_gmp_4);
      __gmpz_clear(__stady_gmp_4);
      mpz_t __stady_gmp_5;
      __gmpz_init_set(__stady_gmp_5, __q_j);
      mpz_t __stady_gmp_6;
      __gmpz_init_set_str(__stady_gmp_6, "1", 10);
      mpz_t __stady_gmp_7;
      __gmpz_init(__stady_gmp_7);
      __gmpz_add(__stady_gmp_7, __stady_gmp_5, __stady_gmp_6);
      __gmpz_clear(__stady_gmp_5);
      __gmpz_clear(__stady_gmp_6);
      int __stady_term_1;
      __stady_term_1 = __gmpz_get_si(__stady_gmp_7);
      __gmpz_clear(__stady_gmp_7);
      __stady_pred_0 = *(arr + __stady_term_0) <= *(arr + __stady_term_1);
      __gmpz_add_ui(__q_j, __q_j, 1);
    }
    __gmpz_clear(__q_j);
    __gmpz_clear(__stady_gmp_0);
    __gmpz_clear(__stady_gmp_3);
  }
  if(!(__stady_pred_0)) {
    return 0;
  }
  return 1;
}

int binary_search(int *arr, int length, int query)
{
  int *old_arr;
  int *old_ptr_arr;
  old_arr = arr;
  mpz_t __stady_gmp_20;
  __gmpz_init_set_si(__stady_gmp_20, length);
  int __stady_term_4;
  old_ptr_arr = malloc((__gmpz_get_si(__stady_gmp_20) * sizeof(int)));
  for(__stady_term_4 = 0; __stady_term_4 < __gmpz_get_si(__stady_gmp_20); __stady_term_4 = (__stady_term_4 + 1)) {
    old_ptr_arr[__stady_term_4] = arr[__stady_term_4];
  }
  __gmpz_clear(__stady_gmp_20);
  int old_length;
  old_length = length;
  int old_query;
  old_query = query;
  {
    int __retres;
    int low;
    int high;
    low = 0;
    high = length - 1;
    {
      mpz_t __stady_gmp_28;
      __gmpz_init_set_str(__stady_gmp_28, "0", 10);
      mpz_t __stady_gmp_29;
      __gmpz_init_set_si(__stady_gmp_29, low);
      int __stady_pred_15;
      __stady_pred_15 = __gmpz_cmp(__stady_gmp_28, __stady_gmp_29) <= 0;
      __gmpz_clear(__stady_gmp_28);
      __gmpz_clear(__stady_gmp_29);
      int __stady_pred_14;
      __stady_pred_14 = __stady_pred_15;
      if(__stady_pred_14) {
        mpz_t __stady_gmp_30;
        __gmpz_init_set_si(__stady_gmp_30, low);
        mpz_t __stady_gmp_31;
        __gmpz_init_set_si(__stady_gmp_31, high);
        mpz_t __stady_gmp_32;
        __gmpz_init_set_str(__stady_gmp_32, "1", 10);
        mpz_t __stady_gmp_33;
        __gmpz_init(__stady_gmp_33);
        __gmpz_add(__stady_gmp_33, __stady_gmp_31, __stady_gmp_32);
        __gmpz_clear(__stady_gmp_31);
        __gmpz_clear(__stady_gmp_32);
        int __stady_pred_16;
        __stady_pred_16 = __gmpz_cmp(__stady_gmp_30, __stady_gmp_33) <= 0;
        __gmpz_clear(__stady_gmp_30);
        __gmpz_clear(__stady_gmp_33);
        __stady_pred_14 = __stady_pred_16;
      }
      if(!(__stady_pred_14)) {
        pathcrawler_assert_exception("Loop invariant not established!",4);
      }
      mpz_t __stady_gmp_40;
      __gmpz_init_set_si(__stady_gmp_40, low);
      mpz_t __stady_gmp_41;
      __gmpz_init_set_str(__stady_gmp_41, "1", 10);
      mpz_t __stady_gmp_42;
      __gmpz_init(__stady_gmp_42);
      __gmpz_sub(__stady_gmp_42, __stady_gmp_40, __stady_gmp_41);
      __gmpz_clear(__stady_gmp_40);
      __gmpz_clear(__stady_gmp_41);
      mpz_t __stady_gmp_43;
      __gmpz_init_set_si(__stady_gmp_43, high);
      int __stady_pred_21;
      __stady_pred_21 = __gmpz_cmp(__stady_gmp_42, __stady_gmp_43) <= 0;
      __gmpz_clear(__stady_gmp_42);
      __gmpz_clear(__stady_gmp_43);
      int __stady_pred_20;
      __stady_pred_20 = __stady_pred_21;
      if(__stady_pred_20) {
        mpz_t __stady_gmp_44;
        __gmpz_init_set_si(__stady_gmp_44, high);
        mpz_t __stady_gmp_45;
        __gmpz_init_set_si(__stady_gmp_45, length);
        mpz_t __stady_gmp_46;
        __gmpz_init_set_str(__stady_gmp_46, "1", 10);
        mpz_t __stady_gmp_47;
        __gmpz_init(__stady_gmp_47);
        __gmpz_sub(__stady_gmp_47, __stady_gmp_45, __stady_gmp_46);
        __gmpz_clear(__stady_gmp_45);
        __gmpz_clear(__stady_gmp_46);
        int __stady_pred_22;
        __stady_pred_22 = __gmpz_cmp(__stady_gmp_44, __stady_gmp_47) <= 0;
        __gmpz_clear(__stady_gmp_44);
        __gmpz_clear(__stady_gmp_47);
        __stady_pred_20 = __stady_pred_22;
      }
      if(!(__stady_pred_20)) {
        pathcrawler_assert_exception("Loop invariant not established!",10);
      }
      mpz_t __stady_gmp_56;
      __gmpz_init_set_si(__stady_gmp_56, high);
      mpz_t __stady_gmp_57;
      __gmpz_init_set_si(__stady_gmp_57, low);
      mpz_t __stady_gmp_58;
      __gmpz_init(__stady_gmp_58);
      __gmpz_sub(__stady_gmp_58, __stady_gmp_56, __stady_gmp_57);
      __gmpz_clear(__stady_gmp_56);
      __gmpz_clear(__stady_gmp_57);
      if(__gmpz_cmp_ui(__stady_gmp_58, 0) < 0) {
        pathcrawler_assert_exception("Variant non positive",5);
      }
      while (1) {
        mpz_t __stady_gmp_59;
        __gmpz_init_set_si(__stady_gmp_59, high);
        mpz_t __stady_gmp_60;
        __gmpz_init_set_si(__stady_gmp_60, low);
        mpz_t __stady_gmp_61;
        __gmpz_init(__stady_gmp_61);
        __gmpz_sub(__stady_gmp_61, __stady_gmp_59, __stady_gmp_60);
        __gmpz_clear(__stady_gmp_59);
        __gmpz_clear(__stady_gmp_60);
        mpz_t __stady_gmp_62;
        __gmpz_init_set(__stady_gmp_62, __stady_gmp_61);
        {
          if (! (low <= high)) {
                                 pathcrawler_to_framac("@FC:REACHABLE_STMT:7");
                                 break;
                               }
          {
            int mean;
            mean = low + (high - low) / 2;
            {
              int __stady_pred_8;
              __stady_pred_8 = low <= mean;
              if(__stady_pred_8) {
                __stady_pred_8 = mean <= high;
              }
              if(!(__stady_pred_8)) {
                pathcrawler_assert_exception("Assert!",8);
              }
              ;
            }
            {
              int __stady_pred_9;
              __stady_pred_9 = 1;
              if(low < mean) {
                int __stady_pred_10;
                __stady_pred_10 = 1;
                {
                  mpz_t __q_x;
                  mpz_t __stady_gmp_21;
                  __gmpz_init_set_str(__stady_gmp_21, "0", 10);
                  __gmpz_init_set(__q_x, __stady_gmp_21);
                  while((__gmpz_cmp_si(__q_x, low) < 0 && __stady_pred_10)) {
                    mpz_t __stady_gmp_22;
                    __gmpz_init_set_si(__stady_gmp_22, __q_x);
                    int __stady_term_5;
                    __stady_term_5 = __gmpz_get_si(__stady_gmp_22);
                    __gmpz_clear(__stady_gmp_22);
                    __stady_pred_10 = *(arr + __stady_term_5) != query;
                    __gmpz_add_ui(__q_x, __q_x, 1);
                  }
                  __gmpz_clear(__q_x);
                  __gmpz_clear(__stady_gmp_21);
                }
                __stady_pred_9 = __stady_pred_10;
              }
              if(!(__stady_pred_9)) {
                pathcrawler_assert_exception("Assert!",12);
              }
              ;
            }
            {
              int __stady_pred_11;
              __stady_pred_11 = 1;
              mpz_t __stady_gmp_23;
              __gmpz_init_set_si(__stady_gmp_23, mean);
              mpz_t __stady_gmp_24;
              __gmpz_init_set_str(__stady_gmp_24, "1", 10);
              mpz_t __stady_gmp_25;
              __gmpz_init(__stady_gmp_25);
              __gmpz_add(__stady_gmp_25, __stady_gmp_23, __stady_gmp_24);
              __gmpz_clear(__stady_gmp_23);
              __gmpz_clear(__stady_gmp_24);
              mpz_t __stady_gmp_26;
              __gmpz_init_set_si(__stady_gmp_26, high);
              int __stady_pred_12;
              __stady_pred_12 = __gmpz_cmp(__stady_gmp_25, __stady_gmp_26) < 0;
              __gmpz_clear(__stady_gmp_25);
              __gmpz_clear(__stady_gmp_26);
              if(__stady_pred_12) {
                int __stady_pred_13;
                __stady_pred_13 = 1;
                {
                  int __q_x;
                  for(__q_x = (high + 1); (__q_x < length && __stady_pred_13); __q_x = (__q_x + 1)) {
                    mpz_t __stady_gmp_27;
                    __gmpz_init_set_si(__stady_gmp_27, __q_x);
                    int __stady_term_6;
                    __stady_term_6 = __gmpz_get_si(__stady_gmp_27);
                    __gmpz_clear(__stady_gmp_27);
                    __stady_pred_13 = *(arr + __stady_term_6) != query;
                  }
                }
                __stady_pred_11 = __stady_pred_13;
              }
              if(!(__stady_pred_11)) {
                pathcrawler_assert_exception("Assert!",0);
              }
              ;
            }
            if (*(arr + mean) == query) {
              {
                pathcrawler_to_framac("@FC:REACHABLE_STMT:18");
                __retres = mean;
              }
              goto return_label;
            }
            if (*(arr + mean) < query) {
                                         pathcrawler_to_framac("@FC:REACHABLE_STMT:22");
                                         low = mean + 1;
                                       }
            else {
                   pathcrawler_to_framac("@FC:REACHABLE_STMT:23");
                   high = mean - 1;
                 }
          }
        }mpz_t __stady_gmp_34;
        __gmpz_init_set_str(__stady_gmp_34, "0", 10);
        mpz_t __stady_gmp_35;
        __gmpz_init_set_si(__stady_gmp_35, low);
        int __stady_pred_18;
        __stady_pred_18 = __gmpz_cmp(__stady_gmp_34, __stady_gmp_35) <= 0;
        __gmpz_clear(__stady_gmp_34);
        __gmpz_clear(__stady_gmp_35);
        int __stady_pred_17;
        __stady_pred_17 = __stady_pred_18;
        if(__stady_pred_17) {
          mpz_t __stady_gmp_36;
          __gmpz_init_set_si(__stady_gmp_36, low);
          mpz_t __stady_gmp_37;
          __gmpz_init_set_si(__stady_gmp_37, high);
          mpz_t __stady_gmp_38;
          __gmpz_init_set_str(__stady_gmp_38, "1", 10);
          mpz_t __stady_gmp_39;
          __gmpz_init(__stady_gmp_39);
          __gmpz_add(__stady_gmp_39, __stady_gmp_37, __stady_gmp_38);
          __gmpz_clear(__stady_gmp_37);
          __gmpz_clear(__stady_gmp_38);
          int __stady_pred_19;
          __stady_pred_19 = __gmpz_cmp(__stady_gmp_36, __stady_gmp_39) <= 0;
          __gmpz_clear(__stady_gmp_36);
          __gmpz_clear(__stady_gmp_39);
          __stady_pred_17 = __stady_pred_19;
        }
        if(!(__stady_pred_17)) {
          pathcrawler_assert_exception("Loop invariant not preserved!",4);
        }
        mpz_t __stady_gmp_48;
        __gmpz_init_set_si(__stady_gmp_48, low);
        mpz_t __stady_gmp_49;
        __gmpz_init_set_str(__stady_gmp_49, "1", 10);
        mpz_t __stady_gmp_50;
        __gmpz_init(__stady_gmp_50);
        __gmpz_sub(__stady_gmp_50, __stady_gmp_48, __stady_gmp_49);
        __gmpz_clear(__stady_gmp_48);
        __gmpz_clear(__stady_gmp_49);
        mpz_t __stady_gmp_51;
        __gmpz_init_set_si(__stady_gmp_51, high);
        int __stady_pred_24;
        __stady_pred_24 = __gmpz_cmp(__stady_gmp_50, __stady_gmp_51) <= 0;
        __gmpz_clear(__stady_gmp_50);
        __gmpz_clear(__stady_gmp_51);
        int __stady_pred_23;
        __stady_pred_23 = __stady_pred_24;
        if(__stady_pred_23) {
          mpz_t __stady_gmp_52;
          __gmpz_init_set_si(__stady_gmp_52, high);
          mpz_t __stady_gmp_53;
          __gmpz_init_set_si(__stady_gmp_53, length);
          mpz_t __stady_gmp_54;
          __gmpz_init_set_str(__stady_gmp_54, "1", 10);
          mpz_t __stady_gmp_55;
          __gmpz_init(__stady_gmp_55);
          __gmpz_sub(__stady_gmp_55, __stady_gmp_53, __stady_gmp_54);
          __gmpz_clear(__stady_gmp_53);
          __gmpz_clear(__stady_gmp_54);
          int __stady_pred_25;
          __stady_pred_25 = __gmpz_cmp(__stady_gmp_52, __stady_gmp_55) <= 0;
          __gmpz_clear(__stady_gmp_52);
          __gmpz_clear(__stady_gmp_55);
          __stady_pred_23 = __stady_pred_25;
        }
        if(!(__stady_pred_23)) {
          pathcrawler_assert_exception("Loop invariant not preserved!",10);
        }
        mpz_t __stady_gmp_63;
        __gmpz_init_set_si(__stady_gmp_63, high);
        mpz_t __stady_gmp_64;
        __gmpz_init_set_si(__stady_gmp_64, low);
        mpz_t __stady_gmp_65;
        __gmpz_init(__stady_gmp_65);
        __gmpz_sub(__stady_gmp_65, __stady_gmp_63, __stady_gmp_64);
        __gmpz_clear(__stady_gmp_63);
        __gmpz_clear(__stady_gmp_64);
        if(__gmpz_cmp_ui(__stady_gmp_62, 0) < 0) {
          pathcrawler_assert_exception("Variant non positive",5);
        }
        if(__gmpz_cmp(__stady_gmp_65, __stady_gmp_62) >= 0) {
          pathcrawler_assert_exception("Variant non decreasing",5);
        }
        __gmpz_clear(__stady_gmp_62);
        }
         __gmpz_clear(__stady_gmp_58);
      
    }
    __retres = -1;
    return_label:
      {
        mpz_t __stady_gmp_8;
        __gmpz_init_set_str(__stady_gmp_8, "1", 10);
        mpz_t __stady_gmp_9;
        __gmpz_init(__stady_gmp_9);
        __gmpz_ui_sub(__stady_gmp_9, 0, __stady_gmp_8);
        __gmpz_clear(__stady_gmp_8);
        mpz_t __stady_gmp_10;
        __gmpz_init_set_si(__stady_gmp_10, __retres);
        int __stady_pred_2;
        __stady_pred_2 = __gmpz_cmp(__stady_gmp_9, __stady_gmp_10) <= 0;
        __gmpz_clear(__stady_gmp_9);
        __gmpz_clear(__stady_gmp_10);
        int __stady_pred_1;
        __stady_pred_1 = __stady_pred_2;
        if(__stady_pred_1) {
          __stady_pred_1 = __retres < old_length;
        }
        if(!(__stady_pred_1)) {
          pathcrawler_assert_exception("Post-condition!",11);
        }
        int __stady_pred_3;
        __stady_pred_3 = 1;
        mpz_t __stady_gmp_11;
        __gmpz_init_set_si(__stady_gmp_11, __retres);
        mpz_t __stady_gmp_12;
        __gmpz_init_set_str(__stady_gmp_12, "1", 10);
        mpz_t __stady_gmp_13;
        __gmpz_init(__stady_gmp_13);
        __gmpz_ui_sub(__stady_gmp_13, 0, __stady_gmp_12);
        __gmpz_clear(__stady_gmp_12);
        int __stady_pred_4;
        __stady_pred_4 = __gmpz_cmp(__stady_gmp_11, __stady_gmp_13) == 0;
        __gmpz_clear(__stady_gmp_11);
        __gmpz_clear(__stady_gmp_13);
        if(__stady_pred_4) {
          int __stady_pred_5;
          __stady_pred_5 = 1;
          {
            mpz_t __q_i;
            mpz_t __stady_gmp_14;
            __gmpz_init_set_str(__stady_gmp_14, "0", 10);
            mpz_t __stady_gmp_15;
            __gmpz_init_set_si(__stady_gmp_15, old_length);
            __gmpz_init_set(__q_i, __stady_gmp_14);
            while((__gmpz_cmp(__q_i, __stady_gmp_15) < 0 && __stady_pred_5)) {
              mpz_t __stady_gmp_16;
              __gmpz_init_set(__stady_gmp_16, __q_i);
              int __stady_term_2;
              __stady_term_2 = __gmpz_get_si(__stady_gmp_16);
              __gmpz_clear(__stady_gmp_16);
              __stady_pred_5 = *(old_arr + __stady_term_2) != old_query;
              __gmpz_add_ui(__q_i, __q_i, 1);
            }
            __gmpz_clear(__q_i);
            __gmpz_clear(__stady_gmp_14);
            __gmpz_clear(__stady_gmp_15);
          }
          __stady_pred_3 = __stady_pred_5;
        }
        if(!(__stady_pred_3)) {
          pathcrawler_assert_exception("Post-condition!",14);
        }
        int __stady_pred_6;
        __stady_pred_6 = 1;
        mpz_t __stady_gmp_17;
        __gmpz_init_set_si(__stady_gmp_17, __retres);
        mpz_t __stady_gmp_18;
        __gmpz_init_set_str(__stady_gmp_18, "0", 10);
        int __stady_pred_7;
        __stady_pred_7 = __gmpz_cmp(__stady_gmp_17, __stady_gmp_18) >= 0;
        __gmpz_clear(__stady_gmp_17);
        __gmpz_clear(__stady_gmp_18);
        if(__stady_pred_7) {
          mpz_t __stady_gmp_19;
          __gmpz_init_set_si(__stady_gmp_19, __retres);
          int __stady_term_3;
          __stady_term_3 = __gmpz_get_si(__stady_gmp_19);
          __gmpz_clear(__stady_gmp_19);
          __stady_pred_6 = *(old_arr + __stady_term_3) == old_query;
        }
        if(!(__stady_pred_6)) {
          pathcrawler_assert_exception("Post-condition!",3);
        }
      }
      free(old_ptr_arr);
      return __retres;
  }
}


[kernel] preprocessing with "gcc -C -E -I.  __sd_instru_binary_search_binary_search.c"
[kernel] preprocessing with "gcc -C -E -I. -include /usr/local/share/frama-c/pc/lib/lanceur_deb.h __sd_instru_binary_search_binary_search.c"
[pc] analyzing...
[pc] Compiling pathcrawler___sd_instru_binary_search_binary_search/lanceur_binary_search utilities ...
[pc] Compiling pathcrawler___sd_instru_binary_search_binary_search/lanceur_binary_search ...
[pc] generating tests...
[pc] Starting lanceur_binary_search (isc version)
[pc] Starting lanceur_pathcrawler__binary_search_precond (isc version)
[pc] generation finished
[stady] all-paths: true
[stady] 459 test cases
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'binary_search'
--------------------------------------------------------------------------------

[  Valid  ] Post-condition (file tests/binary_search/binary_search.c, line 12)
            by StaDy.
[  Valid  ] Post-condition (file tests/binary_search/binary_search.c, line 13)
            by StaDy.
[  Valid  ] Post-condition (file tests/binary_search/binary_search.c, line 14)
            by StaDy.
[  Valid  ] Loop variant at loop (file tests/binary_search/binary_search.c, line 24)
            by StaDy.
[  Valid  ] Invariant (file tests/binary_search/binary_search.c, line 19)
            by StaDy.
[  Valid  ] Invariant (file tests/binary_search/binary_search.c, line 20)
            by StaDy.
[  Valid  ] Assertion (file tests/binary_search/binary_search.c, line 26)
            by StaDy.
[  Valid  ] Assertion (file tests/binary_search/binary_search.c, line 27)
            by StaDy.
[  Valid  ] Assertion (file tests/binary_search/binary_search.c, line 28)
            by StaDy.
[    -    ] Default behavior
            tried with Frama-C kernel.

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
     9 Completely validated
     1 To be validated
    10 Total
--------------------------------------------------------------------------------
