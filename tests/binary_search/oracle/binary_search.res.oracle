[kernel] preprocessing with "gcc -C -E -I.  tests/binary_search/binary_search.c"
[stady:generated-pl] :- module(test_parameters).
                     :- import create_input_val/3 from substitution.
                     :- export dom/4.
                     :- export create_input_vals/2.
                     :- export unquantif_preconds/2.
                     :- export quantif_preconds/2.
                     :- export strategy/2.
                     :- export precondition_of/2.
                     
                     dom(0,0,0,0).
[stady:generated-pl] dom('binary_search', cont('arr',_), [], int([-2147483648..2147483647])).
[stady:generated-pl] dom('pathcrawler__binary_search_precond',A,B,C) :- dom('binary_search',A,B,C).
[stady:generated-pl] create_input_vals('binary_search', Ins):-
[stady:generated-pl] create_input_val('query', int([-2147483648..2147483647]),Ins),
[stady:generated-pl] create_input_val('length', int([-2147483648..2147483647]),Ins),
[stady:generated-pl] create_input_val(dim('arr'), int([0..4294967295]),Ins),
[stady:generated-pl] true.
[stady:generated-pl] create_input_vals('pathcrawler__binary_search_precond',Ins) :- create_input_vals('binary_search',Ins).
[stady:generated-pl] quantif_preconds('binary_search',[]).
[stady:generated-pl] quantif_preconds('pathcrawler__binary_search_precond',A) :- quantif_preconds('binary_search',A).
[stady:generated-pl] unquantif_preconds('binary_search',[cond(egal,dim('arr'),+(int(math), -(int(math), 'length', 1), 1),pre), cond(infegal,'length',3,pre), cond(inf,0,'length',pre)]).
[stady:generated-pl] unquantif_preconds('pathcrawler__binary_search_precond',A) :- unquantif_preconds('binary_search',A).
[stady:generated-pl] strategy('binary_search',[]).
[stady:generated-pl] strategy('pathcrawler__binary_search_precond',A) :- strategy('binary_search',A).
[stady:generated-pl] precondition_of('binary_search','pathcrawler__binary_search_precond').
[stady:generated-c] /* Generated by Frama-C */
                    int binary_search_precond(int *arr, int length, int query)
                    {
                    if (!((0 < (length)) && ((length) <= 3))) return 0;if (!((length-1) >= 0 && (pathcrawler_dimension((arr)) > (length-1)))) return 0;int __stady_pred_8 = 1;
                    {
                    int __q_j;
                    for (__q_j = 0; __q_j < length-1 &&  __stady_pred_8; __q_j++) {
                    __stady_pred_8 = ((*(arr+__q_j)) <= (*(arr+(__q_j+1))));
                    }
                    }
                    if (!__stady_pred_8) return 0;return 1;
                    }
                    
                    int binary_search(int *arr, int length, int query)
                    {
                      int *old_arr = arr;
                      int *old_ptr_arr;
                      old_ptr_arr = malloc(((length-1)+1)*sizeof(int));
                      int __stady_iter_0;
                      for (__stady_iter_0 = 0; __stady_iter_0 < (length-1)+1; __stady_iter_0++) {
                      old_ptr_arr[__stady_iter_0] = arr[__stady_iter_0];
                      }
                      int old_length = length;
                      int old_query = query;
                      {
                        int __retres;
                        int low;
                        int high;
                        low = 0;
                        high = length - 1;
                        {
                           if((high-low)<0)pathcrawler_assert_exception("Variant non positive",5);
                           if(!((low-1 <= (high)) && ((high) <= length-1))) pathcrawler_assert_exception("Loop invariant not established!", 10);
                           if(!((0 <= (low)) && ((low) <= high+1))) pathcrawler_assert_exception("Loop invariant not established!", 4);
                           while (1) {
                             int old_variant_5 = high-low;
                    {
                                                             if (! (low <= high)) break;
                                                             {
                                                               int mean;
                                                               mean = low + (high - low) / 2;
                                                               {
                                                                  if(!(((low) <= (mean)) && ((mean) <= (high)))) pathcrawler_assert_exception("Assert!", 6);
                                                                  ;
                                                               }
                                                               {
                                                                  int __stady_pred_9 = 1;
                                                                  if (((low) < (mean))) {
                                                                  int __stady_pred_10 = 1;
                                                                  {
                                                                  int __q_x;
                                                                  for (__q_x = 0; __q_x < (low) &&  __stady_pred_10; __q_x++) {
                                                                  __stady_pred_10 = ((*(arr+__q_x)) != (query));
                                                                  }
                                                                  }
                                                                  __stady_pred_9 = __stady_pred_10;
                                                                  }
                                                                  if(!__stady_pred_9) pathcrawler_assert_exception("Assert!", 12);
                                                                  ;
                                                               }
                                                               {
                                                                  int __stady_pred_11 = 1;
                                                                  if ((mean+1 < (high))) {
                                                                  int __stady_pred_12 = 1;
                                                                  {
                                                                  int __q_x;
                                                                  for (__q_x = (high)+1; __q_x < (length) &&  __stady_pred_12; __q_x++) {
                                                                  __stady_pred_12 = ((*(arr+__q_x)) != (query));
                                                                  }
                                                                  }
                                                                  __stady_pred_11 = __stady_pred_12;
                                                                  }
                                                                  if(!__stady_pred_11) pathcrawler_assert_exception("Assert!", 0);
                                                                  ;
                                                               }
                                                               if (*(arr + mean) == query) {
                                                                 __retres = mean;
                                                                 goto return_label;
                                                               }
                                                               if (*(arr + mean) < query) low = 
                                                                 mean + 1;
                                                               else high = mean - 1;
                                                             }
                                                           }if(!((0 <= (low)) && ((low) <= high+1))) pathcrawler_assert_exception("Loop invariant not preserved!", 4);
                             if(!((low-1 <= (high)) && ((high) <= length-1))) pathcrawler_assert_exception("Loop invariant not preserved!", 10);
                             if((old_variant_5)<0)pathcrawler_assert_exception("Variant non positive",5);
                             if((high-low) >= old_variant_5) pathcrawler_assert_exception("Variant non decreasing",5);
                             }
                              
                        }
                        __retres = -1;
                        return_label:
                        {
                          if(!((-1 <= __retres) && (__retres < (old_length))))pathcrawler_assert_exception("Post-condition!", 11);int __stady_pred_13 = 1;
                          if ((__retres == -1)) {
                          int __stady_pred_14 = 1;
                          {
                          int __q_i;
                          for (__q_i = 0; __q_i < (old_length) &&  __stady_pred_14; __q_i++) {
                          __stady_pred_14 = ((*(old_arr+__q_i)) != (old_query));
                          }
                          }
                          __stady_pred_13 = __stady_pred_14;
                          }
                          if(!__stady_pred_13)pathcrawler_assert_exception("Post-condition!", 14);int __stady_pred_15 = 1;
                          if ((__retres >= 0)) {
                          __stady_pred_15 = ((*(old_arr+__retres)) == (old_query));
                          }
                          if(!__stady_pred_15)pathcrawler_assert_exception("Post-condition!", 3);
                          }
                        free(old_ptr_arr);
                        return __retres;
                      }
                    }
[kernel] preprocessing with "gcc -C -E -I.  stady_temp.c"
stady_temp.c:20:[kernel] warning: Calling undeclared function malloc. Old style K&R code?
stady_temp.c:113:[kernel] warning: Calling undeclared function free. Old style K&R code?
[kernel] preprocessing with "gcc -C -E -I. -include /usr/local/share/frama-c/pc/lib/lanceur_deb.h stady_temp.c"
stady_temp.c:20:[kernel] warning: Calling undeclared function malloc. Old style K&R code?
stady_temp.c:113:[kernel] warning: Calling undeclared function free. Old style K&R code?
[pc] analyzing...
[pc] Compiling pathcrawler_stady_temp/lanceur_binary_search utilities ...
[pc] Compiling pathcrawler_stady_temp/lanceur_binary_search ...
[pc] generating tests...
[pc] Starting lanceur_binary_search (isc version)
[pc] Starting lanceur_pathcrawler__binary_search_precond (isc version)
[pc] generation finished
[stady] all-paths: true
[stady] 321 test cases
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'binary_search'
--------------------------------------------------------------------------------

[  Valid  ] Post-condition (file tests/binary_search/binary_search.c, line 12)
            by StaDyPlus.
[  Valid  ] Post-condition (file tests/binary_search/binary_search.c, line 13)
            by StaDyPlus.
[  Valid  ] Post-condition (file tests/binary_search/binary_search.c, line 14)
            by StaDyPlus.
[    -    ] Assigns nothing
[  Valid  ] Loop variant at loop (file tests/binary_search/binary_search.c, line 24)
            by StaDyPlus.
[  Valid  ] Invariant (file tests/binary_search/binary_search.c, line 19)
            by StaDyPlus.
[  Valid  ] Invariant (file tests/binary_search/binary_search.c, line 20)
            by StaDyPlus.
[  Valid  ] Assertion (file tests/binary_search/binary_search.c, line 26)
            by StaDyPlus.
[  Valid  ] Assertion (file tests/binary_search/binary_search.c, line 27)
            by StaDyPlus.
[  Valid  ] Assertion (file tests/binary_search/binary_search.c, line 28)
            by StaDyPlus.
[    -    ] Default behavior
            tried with Frama-C kernel.

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
     9 Completely validated
     2 To be validated
    11 Total
--------------------------------------------------------------------------------
