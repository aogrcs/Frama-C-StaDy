[kernel] preprocessing with "gcc -C -E -I.  -dD tests/quick_sort/quick_sort.c"
[stady:generated-pl] generated Prolog precondition:
:- module(test_parameters).
:- import create_input_val/3 from substitution.
:- export dom/4.
:- export create_input_vals/2.
:- export unquantif_preconds/2.
:- export quantif_preconds/2.
:- export strategy/2.
:- export precondition_of/2.

dom(0,0,0,0).
dom('quick_sort', dim('arr'), [], int([1..4294967295])).
dom('quick_sort', dim('beg'), [], int([100..4294967295])).
dom('quick_sort', dim('end'), [], int([100..4294967295])).
dom('quick_sort', cont('arr',_), [], int([-2147483648..2147483647])).
dom('quick_sort', cont('beg',_), [], int([-2147483648..2147483647])).
dom('quick_sort', cont('end',_), [], int([-2147483648..2147483647])).
dom('pathcrawler__quick_sort_precond',A,B,C) :-
  dom('quick_sort',A,B,C).
create_input_vals('quick_sort', Ins):-
  create_input_val(dim('arr'), int([1..4294967295]),Ins),
  create_input_val(dim('beg'), int([100..4294967295]),Ins),
  create_input_val(dim('end'), int([100..4294967295]),Ins),
  create_input_val('elements', int([0..3]),Ins),
  true.
create_input_vals('pathcrawler__quick_sort_precond',Ins) :-
  create_input_vals('quick_sort',Ins).
quantif_preconds('quick_sort',
  [
  ]
).
quantif_preconds('pathcrawler__quick_sort_precond',A) :-
  quantif_preconds('quick_sort',A).
unquantif_preconds('quick_sort',
  [
    cond(egal,dim('arr'),+(int(math), -(int(math), 'elements', 1), 1),pre)
  ]
).
unquantif_preconds('pathcrawler__quick_sort_precond',A) :-
  unquantif_preconds('quick_sort',A).
strategy('quick_sort',[]).
strategy('pathcrawler__quick_sort_precond',A) :-
  strategy('quick_sort',A).
precondition_of('quick_sort','pathcrawler__quick_sort_precond').
[stady:generated-c] generated C file:
/* Generated by Frama-C */
#include <gmp.h>
extern int pathcrawler_assert_exception(char*,int);
extern int pathcrawler_dimension(void*);
extern void pathcrawler_to_framac(char*);
extern void* malloc(unsigned);
extern void free(void*);
int quick_sort_precond(int *arr, int elements, int *beg, int *end)
{
return 1;
}

int quick_sort(int *arr, int elements, int *beg, int *end)
{
  int *old_arr = arr;
  int *old_ptr_arr;
  mpz_t __stady_gmp_0;
  __gmpz_init_set_si(__stady_gmp_0, elements);
  int __stady_iter_0;
  old_ptr_arr = malloc(__gmpz_get_si(__stady_gmp_0)*sizeof(int));
  for (__stady_iter_0 = 0; __stady_iter_0 < __gmpz_get_si(__stady_gmp_0); __stady_iter_0++) {
  old_ptr_arr[__stady_iter_0] = arr[__stady_iter_0];
  }
  int old_elements = elements;
  int *old_beg = beg;
  int *old_ptr_beg;
  mpz_t __stady_gmp_1;
  __gmpz_init_set_str(__stady_gmp_1, "99", 10);
  mpz_t __stady_gmp_2;
  __gmpz_init_set_str(__stady_gmp_2, "1", 10);
  mpz_t __stady_gmp_3;
  __gmpz_init(__stady_gmp_3);
  __gmpz_add(__stady_gmp_3, __stady_gmp_1, __stady_gmp_2);
  __gmpz_clear(__stady_gmp_1);
  __gmpz_clear(__stady_gmp_2);
  int __stady_iter_1;
  old_ptr_beg = malloc(__gmpz_get_si(__stady_gmp_3)*sizeof(int));
  for (__stady_iter_1 = 0; __stady_iter_1 < __gmpz_get_si(__stady_gmp_3); __stady_iter_1++) {
  old_ptr_beg[__stady_iter_1] = beg[__stady_iter_1];
  }
  int *old_end = end;
  int *old_ptr_end;
  mpz_t __stady_gmp_4;
  __gmpz_init_set_str(__stady_gmp_4, "99", 10);
  mpz_t __stady_gmp_5;
  __gmpz_init_set_str(__stady_gmp_5, "1", 10);
  mpz_t __stady_gmp_6;
  __gmpz_init(__stady_gmp_6);
  __gmpz_add(__stady_gmp_6, __stady_gmp_4, __stady_gmp_5);
  __gmpz_clear(__stady_gmp_4);
  __gmpz_clear(__stady_gmp_5);
  int __stady_iter_2;
  old_ptr_end = malloc(__gmpz_get_si(__stady_gmp_6)*sizeof(int));
  for (__stady_iter_2 = 0; __stady_iter_2 < __gmpz_get_si(__stady_gmp_6); __stady_iter_2++) {
  old_ptr_end[__stady_iter_2] = end[__stady_iter_2];
  }
  {
    int __retres;
    int piv;
    int i;
    int L;
    int R;
    i = 0;
    *(beg + 0) = 0;
    *(end + 0) = elements;
    while (1) {
      {
        if (! (i >= 0)) { pathcrawler_to_framac("@FC:REACHABLE_STMT:7");
                        break; }
                        
        L = *(beg + i);
        R = *(end + i) - 1;
        if (L < R) {
          int tmp_1;
          { pathcrawler_to_framac("@FC:REACHABLE_STMT:13");
          piv = *(arr + L); }
          
          if (i == 50 - 1) {
            { pathcrawler_to_framac("@FC:REACHABLE_STMT:16");
            __retres = -1; }
            
            goto return_label;
          }
          {
            mpz_t __stady_gmp_7;
            __gmpz_init_set_si(__stady_gmp_7, R);
            mpz_t __stady_gmp_8;
            __gmpz_init_set_si(__stady_gmp_8, L);
            mpz_t __stady_gmp_9;
            __gmpz_init(__stady_gmp_9);
            __gmpz_sub(__stady_gmp_9, __stady_gmp_7, __stady_gmp_8);
            __gmpz_clear(__stady_gmp_7);
            __gmpz_clear(__stady_gmp_8);
            if (__gmpz_cmp_ui(__stady_gmp_9, 0) < 0)pathcrawler_assert_exception("Variant non positive",8);
            if(!(L <= R))pathcrawler_assert_exception("Loop invariant not established!", 3);
            while (1) {
              mpz_t __stady_gmp_10;
              __gmpz_init_set_si(__stady_gmp_10, R);
              mpz_t __stady_gmp_11;
              __gmpz_init_set_si(__stady_gmp_11, L);
              mpz_t __stady_gmp_12;
              __gmpz_init(__stady_gmp_12);
              __gmpz_sub(__stady_gmp_12, __stady_gmp_10, __stady_gmp_11);
              __gmpz_clear(__stady_gmp_10);
              __gmpz_clear(__stady_gmp_11);
              mpz_t old_variant_8;
              __gmpz_init_set(old_variant_8, __stady_gmp_12);
              {
                if (! (L < R)) { pathcrawler_to_framac("@FC:REACHABLE_STMT:21");
                               break; }
                               
                {
                  mpz_t __stady_gmp_13;
                  __gmpz_init_set_si(__stady_gmp_13, R);
                  mpz_t __stady_gmp_14;
                  __gmpz_init_set_si(__stady_gmp_14, L);
                  mpz_t __stady_gmp_15;
                  __gmpz_init(__stady_gmp_15);
                  __gmpz_sub(__stady_gmp_15, __stady_gmp_13, __stady_gmp_14);
                  __gmpz_clear(__stady_gmp_13);
                  __gmpz_clear(__stady_gmp_14);
                  if (__gmpz_cmp_ui(__stady_gmp_15, 0) < 0)pathcrawler_assert_exception("Variant non positive",5);
                  if(!(L <= R))pathcrawler_assert_exception("Loop invariant not established!", 11);
                  while (1) {
                    mpz_t __stady_gmp_16;
                    __gmpz_init_set_si(__stady_gmp_16, R);
                    mpz_t __stady_gmp_17;
                    __gmpz_init_set_si(__stady_gmp_17, L);
                    mpz_t __stady_gmp_18;
                    __gmpz_init(__stady_gmp_18);
                    __gmpz_sub(__stady_gmp_18, __stady_gmp_16, __stady_gmp_17);
                    __gmpz_clear(__stady_gmp_16);
                    __gmpz_clear(__stady_gmp_17);
                    mpz_t old_variant_5;
                    __gmpz_init_set(old_variant_5, __stady_gmp_18);
                    {
                      if (*(arr + R) >= piv) {
                        { pathcrawler_to_framac("@FC:REACHABLE_STMT:27");
                        if (! (L < R)) { pathcrawler_to_framac("@FC:REACHABLE_STMT:28");
                                       break; }
                                        }
                        
                      }
                      else { pathcrawler_to_framac("@FC:REACHABLE_STMT:29");
                           break; }
                           
                      R --;
                    }if(!(L <= R))pathcrawler_assert_exception("Loop invariant not preserved!", 11);
                    mpz_t __stady_gmp_19;
                    __gmpz_init_set_si(__stady_gmp_19, R);
                    mpz_t __stady_gmp_20;
                    __gmpz_init_set_si(__stady_gmp_20, L);
                    mpz_t __stady_gmp_21;
                    __gmpz_init(__stady_gmp_21);
                    __gmpz_sub(__stady_gmp_21, __stady_gmp_19, __stady_gmp_20);
                    __gmpz_clear(__stady_gmp_19);
                    __gmpz_clear(__stady_gmp_20);
                    if (__gmpz_cmp_ui(old_variant_5,0) < 0)pathcrawler_assert_exception("Variant non positive",5);
                    if (__gmpz_cmp(__stady_gmp_21, old_variant_5) >= 0)pathcrawler_assert_exception("Variant non decreasing",5);__gmpz_clear(old_variant_5);
                    }
                     __gmpz_clear(__stady_gmp_15);
                  }
                   
                if (L < R) {
                  int tmp;
                  { pathcrawler_to_framac("@FC:REACHABLE_STMT:33");
                  {
                    /*sequence*/
                    tmp = L;
                    L ++;
                    *(arr + tmp) = *(arr + R);
                  } }
                  
                }
                {
                  mpz_t __stady_gmp_22;
                  __gmpz_init_set_si(__stady_gmp_22, R);
                  mpz_t __stady_gmp_23;
                  __gmpz_init_set_si(__stady_gmp_23, L);
                  mpz_t __stady_gmp_24;
                  __gmpz_init(__stady_gmp_24);
                  __gmpz_sub(__stady_gmp_24, __stady_gmp_22, __stady_gmp_23);
                  __gmpz_clear(__stady_gmp_22);
                  __gmpz_clear(__stady_gmp_23);
                  if (__gmpz_cmp_ui(__stady_gmp_24, 0) < 0)pathcrawler_assert_exception("Variant non positive",10);
                  if(!(L <= R))pathcrawler_assert_exception("Loop invariant not established!", 4);
                  while (1) {
                    mpz_t __stady_gmp_25;
                    __gmpz_init_set_si(__stady_gmp_25, R);
                    mpz_t __stady_gmp_26;
                    __gmpz_init_set_si(__stady_gmp_26, L);
                    mpz_t __stady_gmp_27;
                    __gmpz_init(__stady_gmp_27);
                    __gmpz_sub(__stady_gmp_27, __stady_gmp_25, __stady_gmp_26);
                    __gmpz_clear(__stady_gmp_25);
                    __gmpz_clear(__stady_gmp_26);
                    mpz_t old_variant_10;
                    __gmpz_init_set(old_variant_10, __stady_gmp_27);
                    {
                      if (*(arr + L) <= piv) {
                        { pathcrawler_to_framac("@FC:REACHABLE_STMT:42");
                        if (! (L < R)) { pathcrawler_to_framac("@FC:REACHABLE_STMT:43");
                                       break; }
                                        }
                        
                      }
                      else { pathcrawler_to_framac("@FC:REACHABLE_STMT:44");
                           break; }
                           
                      L ++;
                    }if(!(L <= R))pathcrawler_assert_exception("Loop invariant not preserved!", 4);
                    mpz_t __stady_gmp_28;
                    __gmpz_init_set_si(__stady_gmp_28, R);
                    mpz_t __stady_gmp_29;
                    __gmpz_init_set_si(__stady_gmp_29, L);
                    mpz_t __stady_gmp_30;
                    __gmpz_init(__stady_gmp_30);
                    __gmpz_sub(__stady_gmp_30, __stady_gmp_28, __stady_gmp_29);
                    __gmpz_clear(__stady_gmp_28);
                    __gmpz_clear(__stady_gmp_29);
                    if (__gmpz_cmp_ui(old_variant_10,0) < 0)pathcrawler_assert_exception("Variant non positive",10);
                    if (__gmpz_cmp(__stady_gmp_30, old_variant_10) >= 0)pathcrawler_assert_exception("Variant non decreasing",10);__gmpz_clear(old_variant_10);
                    }
                     __gmpz_clear(__stady_gmp_24);
                  }
                   
                if (L < R) {
                  int tmp_0;
                  { pathcrawler_to_framac("@FC:REACHABLE_STMT:48");
                  {
                    /*sequence*/
                    tmp_0 = R;
                    R --;
                    *(arr + tmp_0) = *(arr + L);
                  } }
                  
                }
              }if(!(L <= R))pathcrawler_assert_exception("Loop invariant not preserved!", 3);
              mpz_t __stady_gmp_31;
              __gmpz_init_set_si(__stady_gmp_31, R);
              mpz_t __stady_gmp_32;
              __gmpz_init_set_si(__stady_gmp_32, L);
              mpz_t __stady_gmp_33;
              __gmpz_init(__stady_gmp_33);
              __gmpz_sub(__stady_gmp_33, __stady_gmp_31, __stady_gmp_32);
              __gmpz_clear(__stady_gmp_31);
              __gmpz_clear(__stady_gmp_32);
              if (__gmpz_cmp_ui(old_variant_8,0) < 0)pathcrawler_assert_exception("Variant non positive",8);
              if (__gmpz_cmp(__stady_gmp_33, old_variant_8) >= 0)pathcrawler_assert_exception("Variant non decreasing",8);__gmpz_clear(old_variant_8);
              }
               __gmpz_clear(__stady_gmp_9);
            }
             
          *(arr + L) = piv;
          *(beg + (i + 1)) = L + 1;
          *(end + (i + 1)) = *(end + i);
          {
            /*sequence*/
            tmp_1 = i;
            i ++;
            *(end + tmp_1) = L;
          }
        }
        else { pathcrawler_to_framac("@FC:REACHABLE_STMT:60");
             i --; }
             
      }}
       
    __retres = 0;
    return_label:
      {
        int __stady_pred_0 = 1;
        {
        mpz_t __q_i;
        mpz_t __stady_gmp_34;
        __gmpz_init_set_str(__stady_gmp_34, "0", 10);
        mpz_t __stady_gmp_35;
        __gmpz_init_set_si(__stady_gmp_35, old_elements);
        mpz_t __stady_gmp_36;
        __gmpz_init_set_str(__stady_gmp_36, "1", 10);
        mpz_t __stady_gmp_37;
        __gmpz_init(__stady_gmp_37);
        __gmpz_sub(__stady_gmp_37, __stady_gmp_35, __stady_gmp_36);
        __gmpz_clear(__stady_gmp_35);
        __gmpz_clear(__stady_gmp_36);
        __gmpz_init_set(__q_i, __stady_gmp_34);
        for (; __gmpz_cmp(__q_i, __stady_gmp_37) < 0 &&  __stady_pred_0;) {
        mpz_t __stady_gmp_38;
        __gmpz_init_set(__stady_gmp_38, __q_i);
        int __stady_term_0 = __gmpz_get_si(__stady_gmp_38);
        __gmpz_clear(__stady_gmp_38);
        mpz_t __stady_gmp_39;
        __gmpz_init_set(__stady_gmp_39, __q_i);
        mpz_t __stady_gmp_40;
        __gmpz_init_set_str(__stady_gmp_40, "1", 10);
        mpz_t __stady_gmp_41;
        __gmpz_init(__stady_gmp_41);
        __gmpz_add(__stady_gmp_41, __stady_gmp_39, __stady_gmp_40);
        __gmpz_clear(__stady_gmp_39);
        __gmpz_clear(__stady_gmp_40);
        int __stady_term_1 = __gmpz_get_si(__stady_gmp_41);
        __gmpz_clear(__stady_gmp_41);
        __stady_pred_0 = (*(old_arr + __stady_term_0) <= *(old_arr + __stady_term_1));
        __gmpz_add_ui(__q_i, __q_i, 1);
        }
        __gmpz_clear(__q_i);
        __gmpz_clear(__stady_gmp_34);
        __gmpz_clear(__stady_gmp_37);
        }
        if(!__stady_pred_0)pathcrawler_assert_exception("Post-condition!", 7);
        mpz_t __stady_gmp_42;
        __gmpz_init_set_si(__stady_gmp_42, __retres);
        mpz_t __stady_gmp_43;
        __gmpz_init_set_str(__stady_gmp_43, "0", 10);
        int __stady_pred_1 = __gmpz_cmp(__stady_gmp_42, __stady_gmp_43) == 0;
        __gmpz_clear(__stady_gmp_42);
        __gmpz_clear(__stady_gmp_43);
        if(!__stady_pred_1)pathcrawler_assert_exception("Post-condition!", 12);
        
        }
      free(old_ptr_arr);
      free(old_ptr_beg);
      free(old_ptr_end);
      return __retres;
  }
}


[kernel] preprocessing with "gcc -C -E -I.  stady_temp.c"
[kernel] preprocessing with "gcc -C -E -I. -include /usr/local/share/frama-c/pc/lib/lanceur_deb.h stady_temp.c"
[pc] analyzing...
[pc] Compiling pathcrawler_stady_temp/lanceur_quick_sort utilities ...
[pc] Compiling pathcrawler_stady_temp/lanceur_quick_sort ...
[pc] generating tests...
[pc] Starting lanceur_quick_sort (isc version)
[pc] Starting lanceur_pathcrawler__quick_sort_precond (isc version)
[pc] generation finished
[stady] all-paths: true
[stady] 903 test cases
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'quick_sort'
--------------------------------------------------------------------------------

[ Partial ] Post-condition (file tests/quick_sort/quick_sort.c, line 13)
            By StaDy, with pending:
             - Pre-condition (file tests/quick_sort/quick_sort.c, line 12)
[ Partial ] Post-condition (file tests/quick_sort/quick_sort.c, line 14)
            By StaDy, with pending:
             - Pre-condition (file tests/quick_sort/quick_sort.c, line 12)
[ Partial ] Loop variant at loop (file tests/quick_sort/quick_sort.c, line 33)
            By StaDy, with pending:
             - Pre-condition (file tests/quick_sort/quick_sort.c, line 12)
[ Partial ] Loop variant at loop (file tests/quick_sort/quick_sort.c, line 37)
            By StaDy, with pending:
             - Pre-condition (file tests/quick_sort/quick_sort.c, line 12)
[ Partial ] Loop variant at loop (file tests/quick_sort/quick_sort.c, line 44)
            By StaDy, with pending:
             - Pre-condition (file tests/quick_sort/quick_sort.c, line 12)
[ Partial ] Invariant (file tests/quick_sort/quick_sort.c, line 30)
            By StaDy, with pending:
             - Pre-condition (file tests/quick_sort/quick_sort.c, line 12)
[ Partial ] Invariant (file tests/quick_sort/quick_sort.c, line 34)
            By StaDy, with pending:
             - Pre-condition (file tests/quick_sort/quick_sort.c, line 12)
[ Partial ] Invariant (file tests/quick_sort/quick_sort.c, line 41)
            By StaDy, with pending:
             - Pre-condition (file tests/quick_sort/quick_sort.c, line 12)
[ Partial ] Default behavior
            By Frama-C kernel, with pending:
             - Pre-condition (file tests/quick_sort/quick_sort.c, line 12)

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
     9 Locally validated
     9 Total
--------------------------------------------------------------------------------
