[kernel] preprocessing with "gcc -C -E -I.  -dD tests/quick_sort/quick_sort.c"
[stady:generated-c] /* Generated by Frama-C */
                    int quick_sort_precond(int *arr, int elements, int *beg, int *end)
                    {
                    if (!((0 <= elements) && (elements <= 3))) return 0;if (!((elements-1) >= 0 && (pathcrawler_dimension(arr) > (elements-1)))) return 0;
                    if (!((99) >= 0 && (pathcrawler_dimension(beg) > (99)))) return 0;if (!((99) >= 0 && (pathcrawler_dimension(end) > (99)))) return 0;return 1;
                    }
                    
                    int quick_sort(int *arr, int elements, int *beg, int *end)
                    {
                      int *old_arr = arr;
                      int *old_ptr_arr;
                      old_ptr_arr = malloc(((elements-1)+1)*sizeof(int));
                      int __stady_iter_0;
                      for (__stady_iter_0 = 0; __stady_iter_0 < (elements-1)+1; __stady_iter_0++) {
                      old_ptr_arr[__stady_iter_0] = arr[__stady_iter_0];
                      }
                      int old_elements = elements;
                      int *old_beg = beg;
                      int *old_ptr_beg;
                      old_ptr_beg = malloc((99+1)*sizeof(int));
                      int __stady_iter_1;
                      for (__stady_iter_1 = 0; __stady_iter_1 < 99+1; __stady_iter_1++) {
                      old_ptr_beg[__stady_iter_1] = beg[__stady_iter_1];
                      }
                      int *old_end = end;
                      int *old_ptr_end;
                      old_ptr_end = malloc((99+1)*sizeof(int));
                      int __stady_iter_2;
                      for (__stady_iter_2 = 0; __stady_iter_2 < 99+1; __stady_iter_2++) {
                      old_ptr_end[__stady_iter_2] = end[__stady_iter_2];
                      }
                      {
                        int __retres;
                        int piv;
                        int i;
                        int L;
                        int R;
                        i = 0;
                        *(beg + 0) = 0;
                        *(end + 0) = elements;
                        while (1) {
                          {
                            if (! (i >= 0)) break;
                            L = *(beg + i);
                            R = *(end + i) - 1;
                            if (L < R) {
                              int tmp_1;
                              piv = *(arr + L);
                              if (i == 50 - 1) {
                                __retres = -1;
                                goto return_label;
                              }
                              {
                                 if((R-L)<0)pathcrawler_assert_exception("Variant non positive",7);
                                 if(!(L <= R)) pathcrawler_assert_exception("Loop invariant not established!", 3);
                                 while (1) {
                                   int old_variant_7 = R-L;
                    {
                                                              if (! (L < R)) break;
                                                              {
                                                                 if((R-L)<0)pathcrawler_assert_exception("Variant non positive",4);
                                                                 if(!(L <= R)) pathcrawler_assert_exception("Loop invariant not established!", 11);
                                                                 while (1) {
                                                                   int old_variant_4 = R-L;
                    
                                                                   {
                                                                     if (*(arr + R) >= piv) {
                                                                       if (! (L < R)) break;
                                                                     }
                                                                     else break;
                                                                     R --;
                                                                   }if(!(L <= R)) pathcrawler_assert_exception("Loop invariant not preserved!", 11);
                                                                   if((old_variant_4)<0)pathcrawler_assert_exception("Variant non positive",4);
                                                                   if((R-L) >= old_variant_4) pathcrawler_assert_exception("Variant non decreasing",4);
                                                                   }
                                                                    
                                                              }
                                                              if (L < R) {
                                                                int tmp;
                                                                {
                                                                  /*sequence*/
                                                                  tmp = L;
                                                                  L ++;
                                                                  *(arr + tmp) = *(arr + R);
                                                                }
                                                              }
                                                              {
                                                                 if((R-L)<0)pathcrawler_assert_exception("Variant non positive",9);
                                                                 if(!(L <= R)) pathcrawler_assert_exception("Loop invariant not established!", 5);
                                                                 while (1) {
                                                                   int old_variant_9 = R-L;
                    
                                                                   {
                                                                     if (*(arr + L) <= piv) {
                                                                       if (! (L < R)) break;
                                                                     }
                                                                     else break;
                                                                     L ++;
                                                                   }if(!(L <= R)) pathcrawler_assert_exception("Loop invariant not preserved!", 5);
                                                                   if((old_variant_9)<0)pathcrawler_assert_exception("Variant non positive",9);
                                                                   if((R-L) >= old_variant_9) pathcrawler_assert_exception("Variant non decreasing",9);
                                                                   }
                                                                    
                                                              }
                                                              if (L < R) {
                                                                int tmp_0;
                                                                {
                                                                  /*sequence*/
                                                                  tmp_0 = R;
                                                                  R --;
                                                                  *(arr + tmp_0) = *(arr + L);
                                                                }
                                                              }
                                                            }if(!(L <= R)) pathcrawler_assert_exception("Loop invariant not preserved!", 3);
                                   if((old_variant_7)<0)pathcrawler_assert_exception("Variant non positive",7);
                                   if((R-L) >= old_variant_7) pathcrawler_assert_exception("Variant non decreasing",7);
                                   }
                                    
                              }
                              *(arr + L) = piv;
                              *(beg + (i + 1)) = L + 1;
                              *(end + (i + 1)) = *(end + i);
                              {
                                /*sequence*/
                                tmp_1 = i;
                                i ++;
                                *(end + tmp_1) = L;
                              }
                            }
                            else i --;
                          }}
                           
                        __retres = 0;
                        return_label:
                        {
                          int __stady_pred_1 = 1;
                          {
                          int __q_i;
                          for (__q_i = 0; __q_i < old_elements-1 &&  __stady_pred_1; __q_i++) {
                          __stady_pred_1 = (*(old_arr+__q_i) <= *(old_arr+(__q_i+1)));
                          }
                          }
                          if(!__stady_pred_1)pathcrawler_assert_exception("Post-condition!", 8);if(!(__retres == 0))pathcrawler_assert_exception("Post-condition!", 12);
                          }
                        free(old_ptr_arr);
                        free(old_ptr_beg);
                        free(old_ptr_end);
                        return __retres;
                      }
                    }
[kernel] preprocessing with "gcc -C -E -I.  stady_temp.c"
stady_temp.c:14:[kernel] warning: Calling undeclared function malloc. Old style K&R code?
stady_temp.c:147:[kernel] warning: Calling undeclared function free. Old style K&R code?
[kernel] preprocessing with "gcc -C -E -I. -include /usr/local/share/frama-c/pc/lib/lanceur_deb.h stady_temp.c"
stady_temp.c:14:[kernel] warning: Calling undeclared function malloc. Old style K&R code?
stady_temp.c:147:[kernel] warning: Calling undeclared function free. Old style K&R code?
[pc] analyzing...
[pc] Compiling pathcrawler_stady_temp/lanceur_quick_sort utilities ...
[pc] Compiling pathcrawler_stady_temp/lanceur_quick_sort ...
[pc] generating tests...
[pc] Starting lanceur_quick_sort (isc version)
[pc] Starting lanceur_pathcrawler__quick_sort_precond (isc version)
[pc] generation finished
[stady] all-paths: true
[stady] 894 test cases
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'quick_sort'
--------------------------------------------------------------------------------

[  Valid  ] Post-condition (file tests/quick_sort/quick_sort.c, line 12)
            by StaDyPlus.
[  Valid  ] Post-condition (file tests/quick_sort/quick_sort.c, line 13)
            by StaDyPlus.
[  Valid  ] Loop variant at loop (file tests/quick_sort/quick_sort.c, line 32)
            by StaDyPlus.
[  Valid  ] Loop variant at loop (file tests/quick_sort/quick_sort.c, line 36)
            by StaDyPlus.
[  Valid  ] Loop variant at loop (file tests/quick_sort/quick_sort.c, line 43)
            by StaDyPlus.
[  Valid  ] Invariant (file tests/quick_sort/quick_sort.c, line 29)
            by StaDyPlus.
[  Valid  ] Invariant (file tests/quick_sort/quick_sort.c, line 33)
            by StaDyPlus.
[  Valid  ] Invariant (file tests/quick_sort/quick_sort.c, line 40)
            by StaDyPlus.
[  Valid  ] Default behavior
            by Frama-C kernel.

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
     9 Completely validated
     9 Total
--------------------------------------------------------------------------------
