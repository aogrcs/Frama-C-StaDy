[kernel] preprocessing with "gcc -C -E -I.  -dD tests/quick_sort/quick_sort.c"
[stady:generated-pl] :- module(test_parameters).
                     :- import create_input_val/3 from substitution.
                     :- export dom/4.
                     :- export create_input_vals/2.
                     :- export unquantif_preconds/2.
                     :- export quantif_preconds/2.
                     :- export strategy/2.
                     :- export precondition_of/2.
                     
                     dom(0,0,0,0).
[stady:generated-pl] dom('quick_sort', cont('arr',_), [], int([-2147483648..2147483647])).
[stady:generated-pl] dom('quick_sort', cont('beg',_), [], int([-2147483648..2147483647])).
[stady:generated-pl] dom('quick_sort', cont('end',_), [], int([-2147483648..2147483647])).
[stady:generated-pl] dom('pathcrawler__quick_sort_precond',A,B,C) :- dom('quick_sort',A,B,C).
[stady:generated-pl] create_input_vals('quick_sort', Ins):-
[stady:generated-pl] create_input_val(dim('arr'), int([1..4294967295]),Ins),
[stady:generated-pl] create_input_val(dim('beg'), int([100..4294967295]),Ins),
[stady:generated-pl] create_input_val(dim('end'), int([100..4294967295]),Ins),
[stady:generated-pl] create_input_val('elements', int([-2147483648..2147483647]),Ins),
[stady:generated-pl] true.
[stady:generated-pl] create_input_vals('pathcrawler__quick_sort_precond',Ins) :- create_input_vals('quick_sort',Ins).
[stady:generated-pl] quantif_preconds('quick_sort',[]).
[stady:generated-pl] quantif_preconds('pathcrawler__quick_sort_precond',A) :- quantif_preconds('quick_sort',A).
[stady:generated-pl] unquantif_preconds('quick_sort',[cond(egal,dim('arr'),+(int(math), -(int(math), 'elements', 1), 1),pre), cond(infegal,'elements',3,pre), cond(infegal,0,'elements',pre)]).
[stady:generated-pl] unquantif_preconds('pathcrawler__quick_sort_precond',A) :- unquantif_preconds('quick_sort',A).
[stady:generated-pl] strategy('quick_sort',[]).
[stady:generated-pl] strategy('pathcrawler__quick_sort_precond',A) :- strategy('quick_sort',A).
[stady:generated-pl] precondition_of('quick_sort','pathcrawler__quick_sort_precond').
[stady:generated-c] /* Generated by Frama-C */
                    int quick_sort_precond(int *arr, int elements, int *beg, int *end)
                    {
                    if (!((0 <= (elements)) && ((elements) <= 3))) return 0;if (!((elements-1) >= 0 && (pathcrawler_dimension((arr)) > (elements-1)))) return 0;
                    if (!((99) >= 0 && (pathcrawler_dimension((beg)) > (99)))) return 0;if (!((99) >= 0 && (pathcrawler_dimension((end)) > (99)))) return 0;return 1;
                    }
                    
                    int quick_sort(int *arr, int elements, int *beg, int *end)
                    {
                      int *old_arr = arr;
                      int *old_ptr_arr;
                      old_ptr_arr = malloc(((elements-1)+1)*sizeof(int));
                      int __stady_iter_0;
                      for (__stady_iter_0 = 0; __stady_iter_0 < (elements-1)+1; __stady_iter_0++) {
                      old_ptr_arr[__stady_iter_0] = arr[__stady_iter_0];
                      }
                      int old_elements = elements;
                      int *old_beg = beg;
                      int *old_ptr_beg;
                      old_ptr_beg = malloc((99+1)*sizeof(int));
                      int __stady_iter_1;
                      for (__stady_iter_1 = 0; __stady_iter_1 < 99+1; __stady_iter_1++) {
                      old_ptr_beg[__stady_iter_1] = beg[__stady_iter_1];
                      }
                      int *old_end = end;
                      int *old_ptr_end;
                      old_ptr_end = malloc((99+1)*sizeof(int));
                      int __stady_iter_2;
                      for (__stady_iter_2 = 0; __stady_iter_2 < 99+1; __stady_iter_2++) {
                      old_ptr_end[__stady_iter_2] = end[__stady_iter_2];
                      }
                      {
                        int __retres;
                        int piv;
                        int i;
                        int L;
                        int R;
                        i = 0;
                        *(beg + 0) = 0;
                        *(end + 0) = elements;
                        while (1) {
                          {
                            if (! (i >= 0)) break;
                            L = *(beg + i);
                            R = *(end + i) - 1;
                            if (L < R) {
                              int tmp_1;
                              piv = *(arr + L);
                              if (i == 50 - 1) {
                                __retres = -1;
                                goto return_label;
                              }
                              {
                                if ((R-L) < 0)pathcrawler_assert_exception("Variant non positive",8);
                                if(!((L) <= (R)))pathcrawler_assert_exception("Loop invariant not established!", 3);
                                while (1) {
                                  int old_variant_8 = R-L;
                                  {
                                    if (! (L < R)) break;
                                    {
                                      if ((R-L) < 0)pathcrawler_assert_exception("Variant non positive",5);
                                      if(!((L) <= (R)))pathcrawler_assert_exception("Loop invariant not established!", 11);
                                      while (1) {
                                        int old_variant_5 = R-L;
                                        {
                                          if (*(arr + R) >= piv) {
                                            if (! (L < R)) break;
                                          }
                                          else break;
                                          R --;
                                        }if(!((L) <= (R)))pathcrawler_assert_exception("Loop invariant not preserved!", 11);
                                        if ((old_variant_5) < 0)pathcrawler_assert_exception("Variant non positive",5);
                                        if ((R-L) >= old_variant_5)pathcrawler_assert_exception("Variant non decreasing",5);}
                                         }
                                       
                                    if (L < R) {
                                      int tmp;
                                      {
                                        /*sequence*/
                                        tmp = L;
                                        L ++;
                                        *(arr + tmp) = *(arr + R);
                                      }
                                    }
                                    {
                                      if ((R-L) < 0)pathcrawler_assert_exception("Variant non positive",10);
                                      if(!((L) <= (R)))pathcrawler_assert_exception("Loop invariant not established!", 4);
                                      while (1) {
                                        int old_variant_10 = R-L;
                                        {
                                          if (*(arr + L) <= piv) {
                                            if (! (L < R)) break;
                                          }
                                          else break;
                                          L ++;
                                        }if(!((L) <= (R)))pathcrawler_assert_exception("Loop invariant not preserved!", 4);
                                        if ((old_variant_10) < 0)pathcrawler_assert_exception("Variant non positive",10);
                                        if ((R-L) >= old_variant_10)pathcrawler_assert_exception("Variant non decreasing",10);}
                                         }
                                       
                                    if (L < R) {
                                      int tmp_0;
                                      {
                                        /*sequence*/
                                        tmp_0 = R;
                                        R --;
                                        *(arr + tmp_0) = *(arr + L);
                                      }
                                    }
                                  }if(!((L) <= (R)))pathcrawler_assert_exception("Loop invariant not preserved!", 3);
                                  if ((old_variant_8) < 0)pathcrawler_assert_exception("Variant non positive",8);
                                  if ((R-L) >= old_variant_8)pathcrawler_assert_exception("Variant non decreasing",8);}
                                   }
                                 
                              *(arr + L) = piv;
                              *(beg + (i + 1)) = L + 1;
                              *(end + (i + 1)) = *(end + i);
                              {
                                /*sequence*/
                                tmp_1 = i;
                                i ++;
                                *(end + tmp_1) = L;
                              }
                            }
                            else i --;
                          }}
                           
                        __retres = 0;
                        return_label:
                          {
                            int __stady_pred_1 = 1;
                            {
                            int __q_i;
                            for (__q_i = 0; __q_i < old_elements-1 &&  __stady_pred_1; __q_i++) {
                            __stady_pred_1 = ((*(old_arr+__q_i)) <= (*(old_arr+(__q_i+1))));
                            }
                            }
                            if(!__stady_pred_1)pathcrawler_assert_exception("Post-condition!", 7);if(!(__retres == 0))pathcrawler_assert_exception("Post-condition!", 12);
                            }
                          free(old_ptr_arr);
                          free(old_ptr_beg);
                          free(old_ptr_end);
                          return __retres;
                      }
                    }
[kernel] preprocessing with "gcc -C -E -I.  stady_temp.c"
stady_temp.c:14:[kernel] warning: Calling undeclared function malloc. Old style K&R code?
stady_temp.c:142:[kernel] warning: Calling undeclared function free. Old style K&R code?
[kernel] preprocessing with "gcc -C -E -I. -include /usr/local/share/frama-c/pc/lib/lanceur_deb.h stady_temp.c"
stady_temp.c:14:[kernel] warning: Calling undeclared function malloc. Old style K&R code?
stady_temp.c:142:[kernel] warning: Calling undeclared function free. Old style K&R code?
[pc] analyzing...
[pc] Compiling pathcrawler_stady_temp/lanceur_quick_sort utilities ...
[pc] Compiling pathcrawler_stady_temp/lanceur_quick_sort ...
[pc] generating tests...
[pc] Starting lanceur_quick_sort (isc version)
[pc] Starting lanceur_pathcrawler__quick_sort_precond (isc version)
[pc] generation finished
[stady] all-paths: true
[stady] 894 test cases
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'quick_sort'
--------------------------------------------------------------------------------

[  Valid  ] Post-condition (file tests/quick_sort/quick_sort.c, line 12)
            by StaDyPlus.
[  Valid  ] Post-condition (file tests/quick_sort/quick_sort.c, line 13)
            by StaDyPlus.
[  Valid  ] Loop variant at loop (file tests/quick_sort/quick_sort.c, line 32)
            by StaDyPlus.
[  Valid  ] Loop variant at loop (file tests/quick_sort/quick_sort.c, line 36)
            by StaDyPlus.
[  Valid  ] Loop variant at loop (file tests/quick_sort/quick_sort.c, line 43)
            by StaDyPlus.
[  Valid  ] Invariant (file tests/quick_sort/quick_sort.c, line 29)
            by StaDyPlus.
[  Valid  ] Invariant (file tests/quick_sort/quick_sort.c, line 33)
            by StaDyPlus.
[  Valid  ] Invariant (file tests/quick_sort/quick_sort.c, line 40)
            by StaDyPlus.
[  Valid  ] Default behavior
            by Frama-C kernel.

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
     9 Completely validated
     9 Total
--------------------------------------------------------------------------------
