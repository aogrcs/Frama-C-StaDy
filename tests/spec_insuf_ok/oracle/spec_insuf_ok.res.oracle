[kernel] preprocessing with "gcc -C -E -I.  tests/spec_insuf_ok/spec_insuf_ok.c"
[stady:generated-pl] generated Prolog precondition:
:- module(test_parameters).
:- import create_input_val/3 from substitution.
:- export dom/4.
:- export create_input_vals/2.
:- export unquantif_preconds/2.
:- export quantif_preconds/2.
:- export strategy/2.
:- export precondition_of/2.

dom(0,0,0,0).
dom('f', cont('t',_), [], int([-2147483648..2147483647])).
dom('f', dim('t'), [], int([4..4])).
dom('pathcrawler__f_precond',A,B,C) :-
  dom('f',A,B,C).
create_input_vals('f', Ins):-
  create_input_val('__stady_term_17', int([-2147483648..2147483647]),Ins),
  create_input_val('__stady_term_19', int([-2147483648..2147483647]),Ins),
  create_input_val('__stady_term_21', int([-2147483648..2147483647]),Ins),
  create_input_val('__stady_term_23', int([-2147483648..2147483647]),Ins),
  create_input_val('k', int([4..4]),Ins),
  create_input_val(dim('t'), int([4..4]),Ins),
  true.
create_input_vals('pathcrawler__f_precond',Ins) :-
  create_input_vals('f',Ins).
quantif_preconds('f',
  [

  ]
).
quantif_preconds('pathcrawler__f_precond',A) :-
  quantif_preconds('f',A).
unquantif_preconds('f',
  [

  ]
).
unquantif_preconds('pathcrawler__f_precond',A) :-
  unquantif_preconds('f',A).
strategy('f',[]).
strategy('pathcrawler__f_precond',A) :-
  strategy('f',A).
precondition_of('f','pathcrawler__f_precond').
[stady:generated-c] generated C file:
/* Generated by Frama-C */
struct __anonstruct___mpz_struct_1 {int _mp_alloc ;int _mp_size ;unsigned long *_mp_d ;};typedef struct __anonstruct___mpz_struct_1 __mpz_struct;typedef __mpz_struct mpz_t[1];
extern signed long int __gmpz_get_si(mpz_t);
extern int __gmpz_cmp_ui(mpz_t, unsigned long int);
extern int __gmpz_cmp(mpz_t, mpz_t);
extern void __gmpz_clear(mpz_t);
extern void __gmpz_init(mpz_t);
extern void __gmpz_init_set(mpz_t, mpz_t);
extern void __gmpz_init_set_si(mpz_t, signed long int);
extern void __gmpz_init_set_str(mpz_t, const char*, int);
extern void __gmpz_add_ui(mpz_t, const mpz_t, unsigned long int);
extern void __gmpz_sub(mpz_t, const mpz_t, const mpz_t);
extern int pathcrawler_assert_exception(char*,int);
extern int pathcrawler_dimension(void*);
extern void pathcrawler_to_framac(char*);
extern int pathcrawler_assume_exception(char*,int);
extern void* malloc(unsigned long);
extern void free(void*);
void __stady_fct_0(int *A, int n);
int __stady_term_23;
int __stady_term_21;
int __stady_term_19;
int __stady_term_17;
void sort(int *A, int n)
{
  mpz_t __stady_gmp_0;
  __gmpz_init_set_si(__stady_gmp_0, n);
  mpz_t __stady_gmp_1;
  __gmpz_init_set_str(__stady_gmp_1, "4", 10);
  int __stady_term_0;
  __stady_term_0 = __gmpz_cmp(__stady_gmp_0, __stady_gmp_1);
  __gmpz_clear(__stady_gmp_0);
  __gmpz_clear(__stady_gmp_1);
  if(! (__stady_term_0 == 0)) {
    pathcrawler_assert_exception("Pre-condition!", 9);
  }
  mpz_t __stady_gmp_2;
  __gmpz_init_set_si(__stady_gmp_2, n);
  mpz_t __stady_gmp_3;
  __gmpz_init_set_str(__stady_gmp_3, "1", 10);
  mpz_t __stady_gmp_4;
  __gmpz_init(__stady_gmp_4);
  __gmpz_sub(__stady_gmp_4, __stady_gmp_2, __stady_gmp_3);
  __gmpz_clear(__stady_gmp_2);
  __gmpz_clear(__stady_gmp_3);
  int __stady_pred_0;
  int __stady_term_1;
  __stady_term_1 = __gmpz_cmp_ui(__stady_gmp_4, 0);
  int __stady_term_2;
  __stady_term_2 = pathcrawler_dimension(A);
  int __stady_term_3;
  __stady_term_3 = __gmpz_cmp_ui(__stady_gmp_4, __stady_term_2);
  __stady_pred_0 = __stady_term_1 >= 0 && __stady_term_3 < 0;
  __gmpz_clear(__stady_gmp_4);
  if(! __stady_pred_0) {
    pathcrawler_assert_exception("Pre-condition!", 2);
  }
  int *old_A;
  int *old_ptr_A;
  old_A = A;
  mpz_t __stady_gmp_11;
  __gmpz_init_set_si(__stady_gmp_11, n);
  int __stady_term_8;
  unsigned long __stady_term_9;
  __stady_term_9 = __gmpz_get_si(__stady_gmp_11);
  old_ptr_A = malloc(__stady_term_9 * (unsigned long)sizeof(int));
  __stady_term_9 = __gmpz_get_si(__stady_gmp_11);
  for(__stady_term_8 = 0; (unsigned long)__stady_term_8 < __stady_term_9; __stady_term_8 = 
    __stady_term_8 + 1) {
    old_ptr_A[__stady_term_8] = A[__stady_term_8];
  }
  __gmpz_clear(__stady_gmp_11);
  int old_n;
  old_n = n;
  {
    int c;
    int position;
    c = 0;
    while (1) {
      {
        if (! (c < n - 1)) {
                             pathcrawler_to_framac("@FC:REACHABLE_STMT:5");
                             break;
                           }
        {
          int d;
          position = c;
          d = c + 1;
          while (1) {
            {
              if (! (d < n)) {
                               pathcrawler_to_framac("@FC:REACHABLE_STMT:12");
                               break;
                             }
              if (*(A + position) > *(A + d)) {
                                                pathcrawler_to_framac("@FC:REACHABLE_STMT:16");
                                                position = d;
                                              }
              d ++;
            }}
             
          if (position != c) {
            int swap;
            {
              pathcrawler_to_framac("@FC:REACHABLE_STMT:21");
              swap = *(A + c);
            }
            *(A + c) = *(A + position);
            *(A + position) = swap;
          }
        }
        c ++;
      }}
       
    {
      int __stady_pred_1;
      __stady_pred_1 = 1;
      {
        mpz_t __q_i;
        mpz_t __stady_gmp_5;
        __gmpz_init_set_str(__stady_gmp_5, "0", 10);
        mpz_t __stady_gmp_6;
        __gmpz_init_set_si(__stady_gmp_6, old_n);
        __gmpz_init_set(__q_i, __stady_gmp_5);
        int __stady_term_4;
        __stady_term_4 = __gmpz_cmp(__q_i, __stady_gmp_6);
        for(; __stady_term_4 < 0 && __stady_pred_1; ) {
          int __stady_pred_2;
          __stady_pred_2 = 1;
          {
            mpz_t __q_j;
            mpz_t __stady_gmp_7;
            __gmpz_init_set(__stady_gmp_7, __q_i);
            mpz_t __stady_gmp_8;
            __gmpz_init_set_si(__stady_gmp_8, old_n);
            __gmpz_init_set(__q_j, __stady_gmp_7);
            int __stady_term_5;
            __stady_term_5 = __gmpz_cmp(__q_j, __stady_gmp_8);
            for(; __stady_term_5 < 0 && __stady_pred_2; ) {
              mpz_t __stady_gmp_9;
              __gmpz_init_set(__stady_gmp_9, __q_i);
              int __stady_term_6;
              __stady_term_6 = __gmpz_get_si(__stady_gmp_9);
              __gmpz_clear(__stady_gmp_9);
              mpz_t __stady_gmp_10;
              __gmpz_init_set(__stady_gmp_10, __q_j);
              int __stady_term_7;
              __stady_term_7 = __gmpz_get_si(__stady_gmp_10);
              __gmpz_clear(__stady_gmp_10);
              __stady_pred_2 = *(old_A + __stady_term_6) <= *(old_A + __stady_term_7);
              __gmpz_add_ui(__q_j, __q_j, 1);
              __stady_term_5 = __gmpz_cmp(__q_j, __stady_gmp_8);
            }
            __gmpz_clear(__q_j);
            __gmpz_clear(__stady_gmp_7);
            __gmpz_clear(__stady_gmp_8);
          }
          __stady_pred_1 = __stady_pred_2;
          __gmpz_add_ui(__q_i, __q_i, 1);
          __stady_term_4 = __gmpz_cmp(__q_i, __stady_gmp_6);
        }
        __gmpz_clear(__q_i);
        __gmpz_clear(__stady_gmp_5);
        __gmpz_clear(__stady_gmp_6);
      }
      if(! __stady_pred_1) {
        pathcrawler_assert_exception("Post-condition!", 6);
      }
    }
    free(old_ptr_A);
    return;
  }
}

int f_precond(int *t, int k)
{
  return 1;
}

void f(int *t, int k)
{
  int *old_t;
  int *old_ptr_t;
  old_t = t;
  mpz_t __stady_gmp_14;
  __gmpz_init_set_si(__stady_gmp_14, k);
  int __stady_term_12;
  unsigned long __stady_term_13;
  __stady_term_13 = __gmpz_get_si(__stady_gmp_14);
  old_ptr_t = malloc(__stady_term_13 * (unsigned long)sizeof(int));
  __stady_term_13 = __gmpz_get_si(__stady_gmp_14);
  for(__stady_term_12 = 0; (unsigned long)__stady_term_12 < __stady_term_13; __stady_term_12 = 
    __stady_term_12 + 1) {
    old_ptr_t[__stady_term_12] = t[__stady_term_12];
  }
  __gmpz_clear(__stady_gmp_14);
  int old_k;
  old_k = k;
  {
    {
      __stady_fct_0(t, k);
      
    }
    {
      mpz_t __stady_gmp_12;
      __gmpz_init_set_str(__stady_gmp_12, "0", 10);
      int __stady_term_10;
      __stady_term_10 = __gmpz_get_si(__stady_gmp_12);
      __gmpz_clear(__stady_gmp_12);
      mpz_t __stady_gmp_13;
      __gmpz_init_set_str(__stady_gmp_13, "1", 10);
      int __stady_term_11;
      __stady_term_11 = __gmpz_get_si(__stady_gmp_13);
      __gmpz_clear(__stady_gmp_13);
      if(! (*(old_t + __stady_term_10) <= *(old_t + __stady_term_11))) {
        pathcrawler_assert_exception("Post-condition!", 5);
      }
    }
    free(old_ptr_t);
    return;
  }
}

void __stady_fct_0(int *A, int n) {
  if(1) {
    int old_n;
    int *old_A;
    int *old_ptr_A;
    old_n = n;
    old_A = A;
    mpz_t __stady_gmp_15;
    __gmpz_init_set_si(__stady_gmp_15, n);
    int __stady_term_14;
    unsigned long __stady_term_15;
    __stady_term_15 = __gmpz_get_si(__stady_gmp_15);
    old_ptr_A = malloc(__stady_term_15 * (unsigned long)sizeof(int));
    __stady_term_15 = __gmpz_get_si(__stady_gmp_15);
    for(__stady_term_14 = 0; (unsigned long)__stady_term_14 < __stady_term_15; __stady_term_14 = 
      __stady_term_14 + 1) {
      old_ptr_A[__stady_term_14] = A[__stady_term_14];
    }
    __gmpz_clear(__stady_gmp_15);
    mpz_t __stady_gmp_19;
    __gmpz_init_set_str(__stady_gmp_19, "3", 10);
    int __stady_term_22;
    __stady_term_22 = __gmpz_get_si(__stady_gmp_19);
    __gmpz_clear(__stady_gmp_19);
    *(A + __stady_term_22) = __stady_term_23;
    mpz_t __stady_gmp_18;
    __gmpz_init_set_str(__stady_gmp_18, "2", 10);
    int __stady_term_20;
    __stady_term_20 = __gmpz_get_si(__stady_gmp_18);
    __gmpz_clear(__stady_gmp_18);
    *(A + __stady_term_20) = __stady_term_21;
    mpz_t __stady_gmp_17;
    __gmpz_init_set_str(__stady_gmp_17, "1", 10);
    int __stady_term_18;
    __stady_term_18 = __gmpz_get_si(__stady_gmp_17);
    __gmpz_clear(__stady_gmp_17);
    *(A + __stady_term_18) = __stady_term_19;
    mpz_t __stady_gmp_16;
    __gmpz_init_set_str(__stady_gmp_16, "0", 10);
    int __stady_term_16;
    __stady_term_16 = __gmpz_get_si(__stady_gmp_16);
    __gmpz_clear(__stady_gmp_16);
    *(A + __stady_term_16) = __stady_term_17;
    int __stady_pred_3;
    __stady_pred_3 = 1;
    {
      mpz_t __q_i;
      mpz_t __stady_gmp_20;
      __gmpz_init_set_str(__stady_gmp_20, "0", 10);
      mpz_t __stady_gmp_21;
      __gmpz_init_set_si(__stady_gmp_21, old_n);
      __gmpz_init_set(__q_i, __stady_gmp_20);
      int __stady_term_24;
      __stady_term_24 = __gmpz_cmp(__q_i, __stady_gmp_21);
      for(; __stady_term_24 < 0 && __stady_pred_3; ) {
        int __stady_pred_4;
        __stady_pred_4 = 1;
        {
          mpz_t __q_j;
          mpz_t __stady_gmp_22;
          __gmpz_init_set(__stady_gmp_22, __q_i);
          mpz_t __stady_gmp_23;
          __gmpz_init_set_si(__stady_gmp_23, old_n);
          __gmpz_init_set(__q_j, __stady_gmp_22);
          int __stady_term_25;
          __stady_term_25 = __gmpz_cmp(__q_j, __stady_gmp_23);
          for(; __stady_term_25 < 0 && __stady_pred_4; ) {
            mpz_t __stady_gmp_24;
            __gmpz_init_set(__stady_gmp_24, __q_i);
            int __stady_term_26;
            __stady_term_26 = __gmpz_get_si(__stady_gmp_24);
            __gmpz_clear(__stady_gmp_24);
            mpz_t __stady_gmp_25;
            __gmpz_init_set(__stady_gmp_25, __q_j);
            int __stady_term_27;
            __stady_term_27 = __gmpz_get_si(__stady_gmp_25);
            __gmpz_clear(__stady_gmp_25);
            __stady_pred_4 = *(old_A + __stady_term_26) <= *(old_A + __stady_term_27);
            __gmpz_add_ui(__q_j, __q_j, 1);
            __stady_term_25 = __gmpz_cmp(__q_j, __stady_gmp_23);
          }
          __gmpz_clear(__q_j);
          __gmpz_clear(__stady_gmp_22);
          __gmpz_clear(__stady_gmp_23);
        }
        __stady_pred_3 = __stady_pred_4;
        __gmpz_add_ui(__q_i, __q_i, 1);
        __stady_term_24 = __gmpz_cmp(__q_i, __stady_gmp_21);
      }
      __gmpz_clear(__q_i);
      __gmpz_clear(__stady_gmp_20);
      __gmpz_clear(__stady_gmp_21);
    }
    if(! __stady_pred_3) {
      pathcrawler_assume_exception("", 0);
    }
    free(old_ptr_A);
  }
}

[kernel] preprocessing with "gcc -C -E -I.  __sd_instru_spec_insuf_ok_f.c"
[kernel] preprocessing with "gcc -C -E -I. -include /usr/local/share/frama-c/pc/lib/lanceur_deb.h __sd_instru_spec_insuf_ok_f.c"
[pc] analyzing...
[pc] Compiling pathcrawler___sd_instru_spec_insuf_ok_f/lanceur_f utilities ...
[pc] Compiling pathcrawler___sd_instru_spec_insuf_ok_f/lanceur_f ...
[pc] generating tests...
[pc] Starting lanceur_f (isc version)
[pc] Starting lanceur_pathcrawler__f_precond (isc version)
[pc] TEST GENERATION WARNING!!!
[pc] Unexpected failure of goal write_status_prefix_and_path(1).
[pc] Please report this bug.
[pc] TEST GENERATION WARNING!!!
[pc] Unexpected failure of goal write_status_prefix_and_path(2).
[pc] Please report this bug.
[pc] TEST GENERATION WARNING!!!
[pc] Unexpected failure of goal write_status_prefix_and_path(4).
[pc] Please report this bug.
[pc] TEST GENERATION WARNING!!!
[pc] Unexpected failure of goal write_status_prefix_and_path(5).
[pc] Please report this bug.
[pc] TEST GENERATION WARNING!!!
[pc] Unexpected failure of goal write_status_prefix_and_path(6).
[pc] Please report this bug.
[pc] TEST GENERATION WARNING!!!
[pc] Unexpected failure of goal write_status_prefix_and_path(7).
[pc] Please report this bug.
[pc] generation finished
[stady] all-paths: true
[stady] 77 test cases
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'sort'
--------------------------------------------------------------------------------

[  Valid  ] Post-condition (file tests/spec_insuf_ok/spec_insuf_ok.c, line 9)
            by StaDy.
[  Valid  ] Pre-condition (file tests/spec_insuf_ok/spec_insuf_ok.c, line 6)
            by StaDy.
[  Valid  ] Pre-condition (file tests/spec_insuf_ok/spec_insuf_ok.c, line 7)
            by StaDy.
[    -    ] Default behavior
            tried with Frama-C kernel.

--------------------------------------------------------------------------------
--- Properties of Function 'f'
--------------------------------------------------------------------------------

[  Valid  ] Post-condition (file tests/spec_insuf_ok/spec_insuf_ok.c, line 34)
            by StaDy.
[    -    ] Default behavior
            tried with Frama-C kernel.

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
     4 Completely validated
     2 To be validated
     6 Total
--------------------------------------------------------------------------------
