[kernel] preprocessing with "gcc -C -E -I.  tests/quantified/quantified.c"
[stady] warning: Native Precondition:
                 ∀ ℤ __q_i; 0 ≤ __q_i ∧ __q_i < n ⇒ \valid(*(t+__q_i)+(0 .. n-1)) unsupported
[stady] warning: Native Precondition:
                 ∀ ℤ __q_i;
                   0 ≤ __q_i ∧ __q_i < n ⇒
                   (∃ ℤ j;
                      (0 ≤ __q_j ∧ __q_j < n) ∧
                      (*(*(t+__q_i)+__q_j) ≡ 1 ∧
                       (∀ ℤ __q_k;
                          0 ≤ __q_k ∧ __q_k < n ⇒
                          (__q_k ≢ __q_j ⇒ *(*(t+__q_i)+__q_k) ≡ 0)))) unsupported
[stady:generated-pl] generated Prolog precondition:
:- module(test_parameters).
:- import create_input_val/3 from substitution.
:- export dom/4.
:- export create_input_vals/2.
:- export unquantif_preconds/2.
:- export quantif_preconds/2.
:- export strategy/2.
:- export precondition_of/2.

dom(0,0,0,0).
dom('f', dim('t'), [], int([1..4294967295])).
dom('f', dim(cont('t',_)), [], int([0..4294967295])).
dom('f', cont(cont('t',_),_), [], int([-2147483648..2147483647])).
dom('pathcrawler__f_precond',A,B,C) :-
  dom('f',A,B,C).
create_input_vals('f', Ins):-
  create_input_val(dim('t'), int([1..4294967295]),Ins),
  create_input_val('n', int([0..3]),Ins),
  true.
create_input_vals('pathcrawler__f_precond',Ins) :-
  create_input_vals('f',Ins).
quantif_preconds('f',
  [
  ]
).
quantif_preconds('pathcrawler__f_precond',A) :-
  quantif_preconds('f',A).
unquantif_preconds('f',
  [
    cond(egal,dim('t'),+(int(math), -(int(math), 'n', 1), 1),pre)
  ]
).
unquantif_preconds('pathcrawler__f_precond',A) :-
  unquantif_preconds('f',A).
strategy('f',[]).
strategy('pathcrawler__f_precond',A) :-
  strategy('f',A).
precondition_of('f','pathcrawler__f_precond').
[stady:generated-c] generated C file:
/* Generated by Frama-C */
#include <gmp.h>
extern int pathcrawler_assert_exception(char*,int);
extern int pathcrawler_dimension(void*);
extern void pathcrawler_to_framac(char*);
extern void* malloc(unsigned);
extern void free(void*);
int f_precond(int **t, int n)
{
int __stady_pred_0 = 1;
{
mpz_t __q_i;
mpz_t __stady_gmp_0;
__gmpz_init_set_str(__stady_gmp_0, "0", 10);
mpz_t __stady_gmp_1;
__gmpz_init_set_si(__stady_gmp_1, n);
__gmpz_init_set(__q_i, __stady_gmp_0);
for (; __gmpz_cmp(__q_i, __stady_gmp_1) < 0 &&  __stady_pred_0;) {
mpz_t __stady_gmp_2;
__gmpz_init_set(__stady_gmp_2, __q_i);
int __stady_term_0 = __gmpz_get_si(__stady_gmp_2);
__gmpz_clear(__stady_gmp_2);
mpz_t __stady_gmp_3;
__gmpz_init_set_si(__stady_gmp_3, n);
mpz_t __stady_gmp_4;
__gmpz_init_set_str(__stady_gmp_4, "1", 10);
mpz_t __stady_gmp_5;
__gmpz_init(__stady_gmp_5);
__gmpz_sub(__stady_gmp_5, __stady_gmp_3, __stady_gmp_4);
__gmpz_clear(__stady_gmp_3);
__gmpz_clear(__stady_gmp_4);
int __stady_pred_1 = __gmpz_cmp_ui(__stady_gmp_5, 0) >= 0 && __gmpz_cmp_ui(__stady_gmp_5, pathcrawler_dimension(*(t + __stady_term_0))) < 0;
__gmpz_clear(__stady_gmp_5);
__stady_pred_0 = __stady_pred_1;
__gmpz_add_ui(__q_i, __q_i, 1);
}
__gmpz_clear(__q_i);
__gmpz_clear(__stady_gmp_0);
__gmpz_clear(__stady_gmp_1);
}
if (!__stady_pred_0) return 0;
int __stady_pred_2 = 1;
{
mpz_t __q_i;
mpz_t __stady_gmp_6;
__gmpz_init_set_str(__stady_gmp_6, "0", 10);
mpz_t __stady_gmp_7;
__gmpz_init_set_si(__stady_gmp_7, n);
__gmpz_init_set(__q_i, __stady_gmp_6);
for (; __gmpz_cmp(__q_i, __stady_gmp_7) < 0 &&  __stady_pred_2;) {
int __stady_pred_3 = 0;
{
mpz_t __q_j;
mpz_t __stady_gmp_8;
__gmpz_init_set_str(__stady_gmp_8, "0", 10);
mpz_t __stady_gmp_9;
__gmpz_init_set_si(__stady_gmp_9, n);
__gmpz_init_set(__q_j, __stady_gmp_8);
for (; __gmpz_cmp(__q_j, __stady_gmp_9) < 0 && ! __stady_pred_3;) {
mpz_t __stady_gmp_10;
__gmpz_init_set(__stady_gmp_10, __q_i);
int __stady_term_1 = __gmpz_get_si(__stady_gmp_10);
__gmpz_clear(__stady_gmp_10);
mpz_t __stady_gmp_11;
__gmpz_init_set(__stady_gmp_11, __q_j);
int __stady_term_2 = __gmpz_get_si(__stady_gmp_11);
__gmpz_clear(__stady_gmp_11);
mpz_t __stady_gmp_12;
__gmpz_init_set_si(__stady_gmp_12, *(*(t + __stady_term_1) + __stady_term_2));
mpz_t __stady_gmp_13;
__gmpz_init_set_str(__stady_gmp_13, "1", 10);
int __stady_pred_5 = __gmpz_cmp(__stady_gmp_12, __stady_gmp_13) == 0;
__gmpz_clear(__stady_gmp_12);
__gmpz_clear(__stady_gmp_13);
int __stady_pred_4 = __stady_pred_5;
if (__stady_pred_4) {
int __stady_pred_6 = 1;
{
mpz_t __q_k;
mpz_t __stady_gmp_14;
__gmpz_init_set_str(__stady_gmp_14, "0", 10);
mpz_t __stady_gmp_15;
__gmpz_init_set_si(__stady_gmp_15, n);
__gmpz_init_set(__q_k, __stady_gmp_14);
for (; __gmpz_cmp(__q_k, __stady_gmp_15) < 0 &&  __stady_pred_6;) {
int __stady_pred_7 = 1;
mpz_t __stady_gmp_16;
__gmpz_init_set(__stady_gmp_16, __q_k);
mpz_t __stady_gmp_17;
__gmpz_init_set(__stady_gmp_17, __q_j);
int __stady_pred_8 = __gmpz_cmp(__stady_gmp_16, __stady_gmp_17) != 0;
__gmpz_clear(__stady_gmp_16);
__gmpz_clear(__stady_gmp_17);
if (__stady_pred_8) {
mpz_t __stady_gmp_18;
__gmpz_init_set(__stady_gmp_18, __q_i);
int __stady_term_3 = __gmpz_get_si(__stady_gmp_18);
__gmpz_clear(__stady_gmp_18);
mpz_t __stady_gmp_19;
__gmpz_init_set(__stady_gmp_19, __q_k);
int __stady_term_4 = __gmpz_get_si(__stady_gmp_19);
__gmpz_clear(__stady_gmp_19);
mpz_t __stady_gmp_20;
__gmpz_init_set_si(__stady_gmp_20, *(*(t + __stady_term_3) + __stady_term_4));
mpz_t __stady_gmp_21;
__gmpz_init_set_str(__stady_gmp_21, "0", 10);
int __stady_pred_9 = __gmpz_cmp(__stady_gmp_20, __stady_gmp_21) == 0;
__gmpz_clear(__stady_gmp_20);
__gmpz_clear(__stady_gmp_21);
__stady_pred_7 = __stady_pred_9;
}
__stady_pred_6 = __stady_pred_7;
__gmpz_add_ui(__q_k, __q_k, 1);
}
__gmpz_clear(__q_k);
__gmpz_clear(__stady_gmp_14);
__gmpz_clear(__stady_gmp_15);
}
__stady_pred_4 = __stady_pred_6;
}
__stady_pred_3 = __stady_pred_4;
__gmpz_add_ui(__q_j, __q_j, 1);
}
__gmpz_clear(__q_j);
__gmpz_clear(__stady_gmp_8);
__gmpz_clear(__stady_gmp_9);
}
__stady_pred_2 = __stady_pred_3;
__gmpz_add_ui(__q_i, __q_i, 1);
}
__gmpz_clear(__q_i);
__gmpz_clear(__stady_gmp_6);
__gmpz_clear(__stady_gmp_7);
}
if (!__stady_pred_2) return 0;
return 1;
}

void f(int **t, int n)
{
  int **old_t = t;
  int **old_ptr_t;
  mpz_t __stady_gmp_22;
  __gmpz_init_set_si(__stady_gmp_22, n);
  int __stady_iter_0;
  old_ptr_t = malloc(__gmpz_get_si(__stady_gmp_22)*sizeof(int *));
  for (__stady_iter_0 = 0; __stady_iter_0 < __gmpz_get_si(__stady_gmp_22); __stady_iter_0++) {
  mpz_t __stady_gmp_23;
  __gmpz_init_set_si(__stady_gmp_23, n);
  int __stady_iter_1;
  old_ptr_t[__stady_iter_0] = malloc(__gmpz_get_si(__stady_gmp_23)*sizeof(int));
  for (__stady_iter_1 = 0; __stady_iter_1 < __gmpz_get_si(__stady_gmp_23); __stady_iter_1++) {
  old_ptr_t[__stady_iter_0][__stady_iter_1] = t[__stady_iter_0][__stady_iter_1];
  }
  }
  int old_n = n;
  {
    int __stady_iter_0;
    mpz_t __stady_gmp_24;
    __gmpz_init_set_si(__stady_gmp_24, n);
    for (__stady_iter_0 = 0; __stady_iter_0 < __gmpz_get_si(__stady_gmp_24); __stady_iter_0++) {
    free(old_ptr_t[__stady_iter_0]);
    }
    __gmpz_clear(__stady_gmp_24);
    free(old_ptr_t);
    return;
  }
}


[kernel] preprocessing with "gcc -C -E -I.  __sd_instru_quantified_f.c"
[kernel] preprocessing with "gcc -C -E -I. -include /usr/local/share/frama-c/pc/lib/lanceur_deb.h __sd_instru_quantified_f.c"
[pc] analyzing...
[pc] Compiling pathcrawler___sd_instru_quantified_f/lanceur_f utilities ...
[pc] Compiling pathcrawler___sd_instru_quantified_f/lanceur_f ...
[pc] generating tests...
[pc] Starting lanceur_f (isc version)
[pc] Starting lanceur_pathcrawler__f_precond (isc version)
[pc] generation finished
[stady] all-paths: true
[stady] 32 test cases
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'f'
--------------------------------------------------------------------------------

[  Valid  ] Default behavior
            by Frama-C kernel.

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
     1 Completely validated
     1 Total
--------------------------------------------------------------------------------
