[kernel] preprocessing with "gcc -C -E -I.  tests/merge_arrays/merge_arrays.c"
[stady:generated-pl] :- module(test_parameters).
                     :- import create_input_val/3 from substitution.
                     :- export dom/4.
                     :- export create_input_vals/2.
                     :- export unquantif_preconds/2.
                     :- export quantif_preconds/2.
                     :- export strategy/2.
                     :- export precondition_of/2.
                     
                     dom(0,0,0,0).
[stady:generated-pl] dom('merge_arrays', cont('t1',_), [], int([-2147483648..2147483647])).
[stady:generated-pl] dom('merge_arrays', cont('t2',_), [], int([-2147483648..2147483647])).
[stady:generated-pl] dom('merge_arrays', cont('t3',_), [], int([-2147483648..2147483647])).
[stady:generated-pl] dom('pathcrawler__merge_arrays_precond',A,B,C) :- dom('merge_arrays',A,B,C).
[stady:generated-pl] create_input_vals('merge_arrays', Ins):-
[stady:generated-pl] create_input_val(dim('t1'), int([1..4294967295]),Ins),
[stady:generated-pl] create_input_val(dim('t2'), int([1..4294967295]),Ins),
[stady:generated-pl] create_input_val(dim('t3'), int([1..4294967295]),Ins),
[stady:generated-pl] create_input_val('l1', int([-2147483648..2147483647]),Ins),
[stady:generated-pl] create_input_val('l2', int([-2147483648..2147483647]),Ins),
[stady:generated-pl] true.
[stady:generated-pl] create_input_vals('pathcrawler__merge_arrays_precond',Ins) :- create_input_vals('merge_arrays',Ins).
[stady:generated-pl] quantif_preconds('merge_arrays',[]).
[stady:generated-pl] quantif_preconds('pathcrawler__merge_arrays_precond',A) :- quantif_preconds('merge_arrays',A).
[stady:generated-pl] unquantif_preconds('merge_arrays',[cond(egal,dim('t3'),+(int(math), -(int(math), +(int(math), 'l1', 'l2'), 1), 1),pre), cond(egal,dim('t2'),+(int(math), -(int(math), 'l2', 1), 1),pre), cond(egal,dim('t1'),+(int(math), -(int(math), 'l1', 1), 1),pre), cond(infegal,'l2',3,pre), cond(infegal,0,'l2',pre), cond(infegal,'l1',3,pre), cond(infegal,0,'l1',pre)]).
[stady:generated-pl] unquantif_preconds('pathcrawler__merge_arrays_precond',A) :- unquantif_preconds('merge_arrays',A).
[stady:generated-pl] strategy('merge_arrays',[]).
[stady:generated-pl] strategy('pathcrawler__merge_arrays_precond',A) :- strategy('merge_arrays',A).
[stady:generated-pl] precondition_of('merge_arrays','pathcrawler__merge_arrays_precond').
[stady:generated-c] /* Generated by Frama-C */
                    int merge_arrays_precond(int *t1, int *t2, int *t3, int l1, int l2)
                    {
                    if (!((0 <= (l1)) && ((l1) <= 3))) return 0;if (!((0 <= (l2)) && ((l2) <= 3))) return 0;
                    if (!((l1-1) >= 0 && (pathcrawler_dimension((t1)) > (l1-1)))) return 0;
                    if (!((l2-1) >= 0 && (pathcrawler_dimension((t2)) > (l2-1)))) return 0;
                    if (!(((l1+l2)-1) >= 0 && (pathcrawler_dimension((t3)) > ((l1+l2)-1)))) return 0;int __stady_pred_3 = 1;
                    {
                    int __q_i;
                    for (__q_i = 0; __q_i < l1-1 &&  __stady_pred_3; __q_i++) {
                    __stady_pred_3 = ((*(t1+__q_i)) <= (*(t1+(__q_i+1))));
                    }
                    }
                    if (!__stady_pred_3) return 0;int __stady_pred_4 = 1;
                    {
                    int __q_i;
                    for (__q_i = 0; __q_i < l2-1 &&  __stady_pred_4; __q_i++) {
                    __stady_pred_4 = ((*(t2+__q_i)) <= (*(t2+(__q_i+1))));
                    }
                    }
                    if (!__stady_pred_4) return 0;return 1;
                    }
                    
                    void merge_arrays(int *t1, int *t2, int *t3, int l1, int l2)
                    {
                      int *old_t1 = t1;
                      int *old_ptr_t1;
                      old_ptr_t1 = malloc(((l1-1)+1)*sizeof(int));
                      int __stady_iter_0;
                      for (__stady_iter_0 = 0; __stady_iter_0 < (l1-1)+1; __stady_iter_0++) {
                      old_ptr_t1[__stady_iter_0] = t1[__stady_iter_0];
                      }
                      int *old_t2 = t2;
                      int *old_ptr_t2;
                      old_ptr_t2 = malloc(((l2-1)+1)*sizeof(int));
                      int __stady_iter_1;
                      for (__stady_iter_1 = 0; __stady_iter_1 < (l2-1)+1; __stady_iter_1++) {
                      old_ptr_t2[__stady_iter_1] = t2[__stady_iter_1];
                      }
                      int *old_t3 = t3;
                      int *old_ptr_t3;
                      old_ptr_t3 = malloc((((l1+l2)-1)+1)*sizeof(int));
                      int __stady_iter_2;
                      for (__stady_iter_2 = 0; __stady_iter_2 < ((l1+l2)-1)+1; __stady_iter_2++) {
                      old_ptr_t3[__stady_iter_2] = t3[__stady_iter_2];
                      }
                      int old_l1 = l1;
                      int old_l2 = l2;
                      {
                        int i;
                        int j;
                        int k;
                        i = 0;
                        j = 0;
                        k = 0;
                        {
                           if(((l1+l2)-k)<0)pathcrawler_assert_exception("Variant non positive",10);
                           if(!((k) == i+j))pathcrawler_assert_exception("Loop invariant not established!", 4);if(!((0 <= (k)) && ((k) <= l1+l2)))pathcrawler_assert_exception("Loop invariant not established!", 19);if(!((0 <= (j)) && ((j) <= (l2))))pathcrawler_assert_exception("Loop invariant not established!", 12);if(!((0 <= (i)) && ((i) <= (l1))))pathcrawler_assert_exception("Loop invariant not established!", 7);while (1) {
                                                                                        int old_variant_10 = (l1+l2)-k;
                    {
                                                                                        if (
                                                                                        i < l1) {
                                                                                        if (! (
                                                                                        j < l2)) 
                                                                                        break;
                                                                                        }
                                                                                        else 
                                                                                        break;
                                                                                        if (
                                                                                        *(
                                                                                        t1 + i) < *(
                                                                                        t2 + j)) {
                                                                                        *(t3 + k) = *(
                                                                                        t1 + i);
                                                                                        i ++;
                                                                                        }
                                                                                        else {
                                                                                        *(t3 + k) = *(
                                                                                        t2 + j);
                                                                                        j ++;
                                                                                        }
                                                                                        k ++;
                                                                                        }if(!((0 <= (i)) && ((i) <= (l1))))pathcrawler_assert_exception("Loop invariant not preserved!", 7);if(!((0 <= (j)) && ((j) <= (l2))))pathcrawler_assert_exception("Loop invariant not preserved!", 12);if(!((0 <= (k)) && ((k) <= l1+l2)))pathcrawler_assert_exception("Loop invariant not preserved!", 19);if(!((k) == i+j))pathcrawler_assert_exception("Loop invariant not preserved!", 4);
                                                                                        if((old_variant_10)<0)pathcrawler_assert_exception("Variant non positive",10);
                                                                                        if(((l1+l2)-k) >= old_variant_10) pathcrawler_assert_exception("Variant non decreasing",10);
                                                                                        }
                                                                                         
                        }
                        {
                           if((l1-i)<0)pathcrawler_assert_exception("Variant non positive",16);
                           if(!((k) == i+j))pathcrawler_assert_exception("Loop invariant not established!", 6);if(!((0 <= (k)) && ((k) <= l1+l2)))pathcrawler_assert_exception("Loop invariant not established!", 0);if(!((0 <= (i)) && ((i) <= (l1))))pathcrawler_assert_exception("Loop invariant not established!", 15);while (1) {
                                                                                        int old_variant_16 = l1-i;
                    {
                                                                                        if (! (
                                                                                        i < l1)) 
                                                                                        break;
                                                                                        *(
                                                                                        t3 + k) = *(
                                                                                        t1 + i);
                                                                                        i ++;
                                                                                        k ++;
                                                                                        }if(!((0 <= (i)) && ((i) <= (l1))))pathcrawler_assert_exception("Loop invariant not preserved!", 15);if(!((0 <= (k)) && ((k) <= l1+l2)))pathcrawler_assert_exception("Loop invariant not preserved!", 0);if(!((k) == i+j))pathcrawler_assert_exception("Loop invariant not preserved!", 6);
                                                                                        if((old_variant_16)<0)pathcrawler_assert_exception("Variant non positive",16);
                                                                                        if((l1-i) >= old_variant_16) pathcrawler_assert_exception("Variant non decreasing",16);
                                                                                        }
                                                                                         
                        }
                        {
                           if((l2-j)<0)pathcrawler_assert_exception("Variant non positive",21);
                           if(!((k) == i+j))pathcrawler_assert_exception("Loop invariant not established!", 9);if(!((0 <= (k)) && ((k) <= l1+l2)))pathcrawler_assert_exception("Loop invariant not established!", 2);if(!((0 <= (j)) && ((j) <= (l2))))pathcrawler_assert_exception("Loop invariant not established!", 18);while (1) {
                                                                                        int old_variant_21 = l2-j;
                    {
                                                                                        if (! (
                                                                                        j < l2)) 
                                                                                        break;
                                                                                        *(
                                                                                        t3 + k) = *(
                                                                                        t2 + j);
                                                                                        j ++;
                                                                                        k ++;
                                                                                        }if(!((0 <= (j)) && ((j) <= (l2))))pathcrawler_assert_exception("Loop invariant not preserved!", 18);if(!((0 <= (k)) && ((k) <= l1+l2)))pathcrawler_assert_exception("Loop invariant not preserved!", 2);if(!((k) == i+j))pathcrawler_assert_exception("Loop invariant not preserved!", 9);
                                                                                        if((old_variant_21)<0)pathcrawler_assert_exception("Variant non positive",21);
                                                                                        if((l2-j) >= old_variant_21) pathcrawler_assert_exception("Variant non decreasing",21);
                                                                                        }
                                                                                         
                        }
                        {
                          int __stady_pred_5 = 1;
                          {
                          int __q_i;
                          for (__q_i = 0; __q_i < (old_l1+old_l2)-1 &&  __stady_pred_5; __q_i++) {
                          __stady_pred_5 = ((*(old_t3+__q_i)) <= (*(old_t3+(__q_i+1))));
                          }
                          }
                          if(!__stady_pred_5)pathcrawler_assert_exception("Post-condition!", 14);
                          }
                        free(old_ptr_t1);
                        free(old_ptr_t2);
                        free(old_ptr_t3);
                        return;
                      }
                    }
[kernel] preprocessing with "gcc -C -E -I.  stady_temp.c"
stady_temp.c:30:[kernel] warning: Calling undeclared function malloc. Old style K&R code?
stady_temp.c:139:[kernel] warning: Calling undeclared function free. Old style K&R code?
[kernel] preprocessing with "gcc -C -E -I. -include /usr/local/share/frama-c/pc/lib/lanceur_deb.h stady_temp.c"
stady_temp.c:30:[kernel] warning: Calling undeclared function malloc. Old style K&R code?
stady_temp.c:139:[kernel] warning: Calling undeclared function free. Old style K&R code?
[pc] analyzing...
[pc] Compiling pathcrawler_stady_temp/lanceur_merge_arrays utilities ...
[pc] Compiling pathcrawler_stady_temp/lanceur_merge_arrays ...
[pc] generating tests...
[pc] Starting lanceur_merge_arrays (isc version)
[pc] Starting lanceur_pathcrawler__merge_arrays_precond (isc version)
[pc] generation finished
[stady] all-paths: true
[stady] 3776 test cases
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'merge_arrays'
--------------------------------------------------------------------------------

[  Valid  ] Post-condition (file tests/merge_arrays/merge_arrays.c, line 13)
            by StaDyPlus.
[  Valid  ] Loop variant at loop (file tests/merge_arrays/merge_arrays.c, line 24)
            by StaDyPlus.
[  Valid  ] Loop variant at loop (file tests/merge_arrays/merge_arrays.c, line 40)
            by StaDyPlus.
[  Valid  ] Loop variant at loop (file tests/merge_arrays/merge_arrays.c, line 50)
            by StaDyPlus.
[  Valid  ] Invariant (file tests/merge_arrays/merge_arrays.c, line 18)
            by StaDyPlus.
[  Valid  ] Invariant (file tests/merge_arrays/merge_arrays.c, line 19)
            by StaDyPlus.
[  Valid  ] Invariant (file tests/merge_arrays/merge_arrays.c, line 20)
            by StaDyPlus.
[  Valid  ] Invariant (file tests/merge_arrays/merge_arrays.c, line 21)
            by StaDyPlus.
[  Valid  ] Invariant (file tests/merge_arrays/merge_arrays.c, line 35)
            by StaDyPlus.
[  Valid  ] Invariant (file tests/merge_arrays/merge_arrays.c, line 36)
            by StaDyPlus.
[  Valid  ] Invariant (file tests/merge_arrays/merge_arrays.c, line 37)
            by StaDyPlus.
[  Valid  ] Invariant (file tests/merge_arrays/merge_arrays.c, line 45)
            by StaDyPlus.
[  Valid  ] Invariant (file tests/merge_arrays/merge_arrays.c, line 46)
            by StaDyPlus.
[  Valid  ] Invariant (file tests/merge_arrays/merge_arrays.c, line 47)
            by StaDyPlus.
[  Valid  ] Default behavior
            by Frama-C kernel.

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
    15 Completely validated
    15 Total
--------------------------------------------------------------------------------
