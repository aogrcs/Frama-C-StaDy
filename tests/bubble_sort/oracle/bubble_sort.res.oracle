[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/bubble_sort/bubble_sort.c (with preprocessing)
[stady:generated-pl] generated Prolog precondition:
:- module(test_parameters).
:- import create_input_val/3 from substitution.
:- export dom/4.
:- export create_input_vals/2.
:- export unquantif_preconds/2.
:- export quantif_preconds/2.
:- export strategy/2.
:- export precondition_of/2.

dom(0,0,0,0).
dom('bubble_sort', cont('A',_), [], int([-2147483648..2147483647])).
dom('bubble_sort', dim('A'), [], int([0..4294967295])).
dom('pathcrawler__bubble_sort_precond',A,B,C) :-
  dom('bubble_sort',A,B,C).
create_input_vals('bubble_sort', Ins):-
  create_input_val('n', int([1..3]),Ins),
  create_input_val(dim('A'), int([0..4294967295]),Ins),
  true.
create_input_vals('pathcrawler__bubble_sort_precond',Ins) :-
  create_input_vals('bubble_sort',Ins).
quantif_preconds('bubble_sort',
  [

  ]
).
quantif_preconds('pathcrawler__bubble_sort_precond',A) :-
  quantif_preconds('bubble_sort',A).
unquantif_preconds('bubble_sort',
  [
    cond(egal,dim('A'),+(int(math), -(int(math), 'n', 1), 1),pre)
  ]
).
unquantif_preconds('pathcrawler__bubble_sort_precond',A) :-
  unquantif_preconds('bubble_sort',A).
strategy('bubble_sort',[]).
strategy('pathcrawler__bubble_sort_precond',A) :-
  strategy('bubble_sort',A).
precondition_of('bubble_sort','pathcrawler__bubble_sort_precond').
[stady:generated-c] generated C file:
/* Generated by Frama-C */
#include "/usr/local/share/frama-c/stady/externals.h"
int bubble_sort_precond(int *A, int n)
{
  return 1;
}

/*@ requires 0 < n <= 3;
    requires \valid(A+(0 .. n-1));
    ensures
      \forall integer i;
        0 <= i < \old(n)-1 ==> *(\old(A)+i) <= *(\old(A)+(i+1));
    assigns *(A+(0 .. n-1));
 */
void bubble_sort(int *A, int n)
{
  int *old_A;
  int *old_ptr_A;
  old_A = A;
  mpz_t __sd_Z_to_Z_1;
  __gmpz_init_set_si(__sd_Z_to_Z_1,n);
  unsigned long __sd_to_ctype_2;
  __sd_to_ctype_2 = __gmpz_get_ui(__sd_Z_to_Z_1);
  __gmpz_clear(__sd_Z_to_Z_1);
  unsigned long __sd_iter_0;
  old_ptr_A = (int *)malloc(__sd_to_ctype_2 * (unsigned long)sizeof(int));
  __sd_iter_0 = 0;
  while(__sd_iter_0 < __sd_to_ctype_2) {
    *(old_ptr_A + __sd_iter_0) = *(A + __sd_iter_0);
    __sd_iter_0 ++;
  }
  int old_n;
  old_n = n;
  {
    int j;
    int i;
    {
      i = 0;
      j = i;
    }
    i = 0;
    {
      mpz_t __sd_Z_cst_11;
      __gmpz_init_set_str(__sd_Z_cst_11,"0",10);
      mpz_t __sd_Z_to_Z_20;
      __gmpz_init_set_si(__sd_Z_to_Z_20,i);
      int __sd_le_4;
      __sd_le_4 = __gmpz_cmp(__sd_Z_cst_11,__sd_Z_to_Z_20);
      __gmpz_clear(__sd_Z_cst_11);
      __gmpz_clear(__sd_Z_to_Z_20);
      int __sd_and_2;
      __sd_and_2 = __sd_le_4 <= 0;
      if(__sd_and_2) {
        __sd_and_2 = i <= n;
      }
      if(! __sd_and_2) {
        pathcrawler_assert_exception("not established",3);
      }
      while (1) {
        if (! (i < n)) break;mpz_t __sd_Z_to_Z_22;
        __gmpz_init_set_si(__sd_Z_to_Z_22,n);
        mpz_t __sd_Z_to_Z_23;
        __gmpz_init_set_si(__sd_Z_to_Z_23,i);
        mpz_t __sd_Z_sub_11;
        __gmpz_init(__sd_Z_sub_11);
        __gmpz_sub(__sd_Z_sub_11,__sd_Z_to_Z_22,__sd_Z_to_Z_23);
        __gmpz_clear(__sd_Z_to_Z_22);
        __gmpz_clear(__sd_Z_to_Z_23);
        int __sd_variant_pos_1;
        __sd_variant_pos_1 = __gmpz_cmp_ui(__sd_Z_sub_11,0);
        if(__sd_variant_pos_1 < 0) {
          pathcrawler_assert_exception("non positive",2);
        }
        mpz_t __sd_Z_variant_save_1;
        __gmpz_init_set(__sd_Z_variant_save_1,__sd_Z_sub_11);
        j = 0;
        {
          mpz_t __sd_Z_cst_3;
          __gmpz_init_set_str(__sd_Z_cst_3,"0",10);
          mpz_t __sd_Z_to_Z_2;
          __gmpz_init_set_si(__sd_Z_to_Z_2,j);
          int __sd_le_0;
          __sd_le_0 = __gmpz_cmp(__sd_Z_cst_3,__sd_Z_to_Z_2);
          __gmpz_clear(__sd_Z_cst_3);
          __gmpz_clear(__sd_Z_to_Z_2);
          int __sd_and_0;
          __sd_and_0 = __sd_le_0 <= 0;
          if(__sd_and_0) {
            mpz_t __sd_Z_to_Z_3;
            __gmpz_init_set_si(__sd_Z_to_Z_3,j);
            mpz_t __sd_Z_to_Z_4;
            __gmpz_init_set_si(__sd_Z_to_Z_4,n);
            mpz_t __sd_Z_to_Z_5;
            __gmpz_init_set_si(__sd_Z_to_Z_5,i);
            mpz_t __sd_Z_sub_1;
            __gmpz_init(__sd_Z_sub_1);
            __gmpz_sub(__sd_Z_sub_1,__sd_Z_to_Z_4,__sd_Z_to_Z_5);
            __gmpz_clear(__sd_Z_to_Z_4);
            __gmpz_clear(__sd_Z_to_Z_5);
            mpz_t __sd_Z_cst_4;
            __gmpz_init_set_str(__sd_Z_cst_4,"1",10);
            mpz_t __sd_Z_sub_2;
            __gmpz_init(__sd_Z_sub_2);
            __gmpz_sub(__sd_Z_sub_2,__sd_Z_sub_1,__sd_Z_cst_4);
            __gmpz_clear(__sd_Z_sub_1);
            __gmpz_clear(__sd_Z_cst_4);
            int __sd_le_1;
            __sd_le_1 = __gmpz_cmp(__sd_Z_to_Z_3,__sd_Z_sub_2);
            __gmpz_clear(__sd_Z_to_Z_3);
            __gmpz_clear(__sd_Z_sub_2);
            __sd_and_0 = __sd_le_1 <= 0;
          }
          if(! __sd_and_0) {
            pathcrawler_assert_exception("not established",7);
          }
          int __sd_forall_1;
          __sd_forall_1 = 1;
          {
            mpz_t __q_a;
            mpz_t __sd_Z_cst_7;
            __gmpz_init_set_str(__sd_Z_cst_7,"0",10);
            mpz_t __sd_Z_to_Z_10;
            __gmpz_init_set_si(__sd_Z_to_Z_10,j);
            __gmpz_init_set(__q_a,__sd_Z_cst_7);
            int __sd_forall_cmp_1;
            __sd_forall_cmp_1 = __gmpz_cmp(__q_a,__sd_Z_to_Z_10);
            while(__sd_forall_cmp_1 <= 0 && __sd_forall_1) {
              mpz_t __sd_Z_lval_2;
              __gmpz_init_set(__sd_Z_lval_2,__q_a);
              int __sd_to_ctype_3;
              __sd_to_ctype_3 = (int)__gmpz_get_si(__sd_Z_lval_2);
              __gmpz_clear(__sd_Z_lval_2);
              mpz_t __sd_Z_to_Z_11;
              __gmpz_init_set_si(__sd_Z_to_Z_11,j);
              int __sd_to_ctype_4;
              __sd_to_ctype_4 = (int)__gmpz_get_si(__sd_Z_to_Z_11);
              __gmpz_clear(__sd_Z_to_Z_11);
              __sd_forall_1 = *(A + __sd_to_ctype_3) <= *(A + __sd_to_ctype_4);
              __gmpz_add_ui(__q_a,__q_a,1);
              __sd_forall_cmp_1 = __gmpz_cmp(__q_a,__sd_Z_to_Z_10);
            }
            __gmpz_clear(__q_a);
            __gmpz_clear(__sd_Z_cst_7);
            __gmpz_clear(__sd_Z_to_Z_10);
          }
          if(! __sd_forall_1) {
            pathcrawler_assert_exception("not established",9);
          }
          while (1) {
            if (! (j < (n - i) - 1)) break;mpz_t __sd_Z_to_Z_14;
            __gmpz_init_set_si(__sd_Z_to_Z_14,n);
            mpz_t __sd_Z_to_Z_15;
            __gmpz_init_set_si(__sd_Z_to_Z_15,i);
            mpz_t __sd_Z_sub_5;
            __gmpz_init(__sd_Z_sub_5);
            __gmpz_sub(__sd_Z_sub_5,__sd_Z_to_Z_14,__sd_Z_to_Z_15);
            __gmpz_clear(__sd_Z_to_Z_14);
            __gmpz_clear(__sd_Z_to_Z_15);
            mpz_t __sd_Z_cst_9;
            __gmpz_init_set_str(__sd_Z_cst_9,"1",10);
            mpz_t __sd_Z_sub_6;
            __gmpz_init(__sd_Z_sub_6);
            __gmpz_sub(__sd_Z_sub_6,__sd_Z_sub_5,__sd_Z_cst_9);
            __gmpz_clear(__sd_Z_sub_5);
            __gmpz_clear(__sd_Z_cst_9);
            mpz_t __sd_Z_to_Z_16;
            __gmpz_init_set_si(__sd_Z_to_Z_16,j);
            mpz_t __sd_Z_sub_7;
            __gmpz_init(__sd_Z_sub_7);
            __gmpz_sub(__sd_Z_sub_7,__sd_Z_sub_6,__sd_Z_to_Z_16);
            __gmpz_clear(__sd_Z_sub_6);
            __gmpz_clear(__sd_Z_to_Z_16);
            int __sd_variant_pos_0;
            __sd_variant_pos_0 = __gmpz_cmp_ui(__sd_Z_sub_7,0);
            if(__sd_variant_pos_0 < 0) {
              pathcrawler_assert_exception("non positive",5);
            }
            mpz_t __sd_Z_variant_save_0;
            __gmpz_init_set(__sd_Z_variant_save_0,__sd_Z_sub_7);
            if (*(A + j) > *(A + (j + 1))) {
              int x;
              x = *(A + j);
              *(A + j) = *(A + (j + 1));
              *(A + (j + 1)) = x;
            }
            j ++;mpz_t __sd_Z_cst_5;
            __gmpz_init_set_str(__sd_Z_cst_5,"0",10);
            mpz_t __sd_Z_to_Z_6;
            __gmpz_init_set_si(__sd_Z_to_Z_6,j);
            int __sd_le_2;
            __sd_le_2 = __gmpz_cmp(__sd_Z_cst_5,__sd_Z_to_Z_6);
            __gmpz_clear(__sd_Z_cst_5);
            __gmpz_clear(__sd_Z_to_Z_6);
            int __sd_and_1;
            __sd_and_1 = __sd_le_2 <= 0;
            if(__sd_and_1) {
              mpz_t __sd_Z_to_Z_7;
              __gmpz_init_set_si(__sd_Z_to_Z_7,j);
              mpz_t __sd_Z_to_Z_8;
              __gmpz_init_set_si(__sd_Z_to_Z_8,n);
              mpz_t __sd_Z_to_Z_9;
              __gmpz_init_set_si(__sd_Z_to_Z_9,i);
              mpz_t __sd_Z_sub_3;
              __gmpz_init(__sd_Z_sub_3);
              __gmpz_sub(__sd_Z_sub_3,__sd_Z_to_Z_8,__sd_Z_to_Z_9);
              __gmpz_clear(__sd_Z_to_Z_8);
              __gmpz_clear(__sd_Z_to_Z_9);
              mpz_t __sd_Z_cst_6;
              __gmpz_init_set_str(__sd_Z_cst_6,"1",10);
              mpz_t __sd_Z_sub_4;
              __gmpz_init(__sd_Z_sub_4);
              __gmpz_sub(__sd_Z_sub_4,__sd_Z_sub_3,__sd_Z_cst_6);
              __gmpz_clear(__sd_Z_sub_3);
              __gmpz_clear(__sd_Z_cst_6);
              int __sd_le_3;
              __sd_le_3 = __gmpz_cmp(__sd_Z_to_Z_7,__sd_Z_sub_4);
              __gmpz_clear(__sd_Z_to_Z_7);
              __gmpz_clear(__sd_Z_sub_4);
              __sd_and_1 = __sd_le_3 <= 0;
            }
            if(! __sd_and_1) {
              pathcrawler_assert_exception("not preserved",7);
            }
            int __sd_forall_2;
            __sd_forall_2 = 1;
            {
              mpz_t __q_a;
              mpz_t __sd_Z_cst_8;
              __gmpz_init_set_str(__sd_Z_cst_8,"0",10);
              mpz_t __sd_Z_to_Z_12;
              __gmpz_init_set_si(__sd_Z_to_Z_12,j);
              __gmpz_init_set(__q_a,__sd_Z_cst_8);
              int __sd_forall_cmp_2;
              __sd_forall_cmp_2 = __gmpz_cmp(__q_a,__sd_Z_to_Z_12);
              while(__sd_forall_cmp_2 <= 0 && __sd_forall_2) {
                mpz_t __sd_Z_lval_3;
                __gmpz_init_set(__sd_Z_lval_3,__q_a);
                int __sd_to_ctype_5;
                __sd_to_ctype_5 = (int)__gmpz_get_si(__sd_Z_lval_3);
                __gmpz_clear(__sd_Z_lval_3);
                mpz_t __sd_Z_to_Z_13;
                __gmpz_init_set_si(__sd_Z_to_Z_13,j);
                int __sd_to_ctype_6;
                __sd_to_ctype_6 = (int)__gmpz_get_si(__sd_Z_to_Z_13);
                __gmpz_clear(__sd_Z_to_Z_13);
                __sd_forall_2 = *(A + __sd_to_ctype_5) <= *(A + __sd_to_ctype_6);
                __gmpz_add_ui(__q_a,__q_a,1);
                __sd_forall_cmp_2 = __gmpz_cmp(__q_a,__sd_Z_to_Z_12);
              }
              __gmpz_clear(__q_a);
              __gmpz_clear(__sd_Z_cst_8);
              __gmpz_clear(__sd_Z_to_Z_12);
            }
            if(! __sd_forall_2) {
              pathcrawler_assert_exception("not preserved",9);
            }
            mpz_t __sd_Z_to_Z_17;
            __gmpz_init_set_si(__sd_Z_to_Z_17,n);
            mpz_t __sd_Z_to_Z_18;
            __gmpz_init_set_si(__sd_Z_to_Z_18,i);
            mpz_t __sd_Z_sub_8;
            __gmpz_init(__sd_Z_sub_8);
            __gmpz_sub(__sd_Z_sub_8,__sd_Z_to_Z_17,__sd_Z_to_Z_18);
            __gmpz_clear(__sd_Z_to_Z_17);
            __gmpz_clear(__sd_Z_to_Z_18);
            mpz_t __sd_Z_cst_10;
            __gmpz_init_set_str(__sd_Z_cst_10,"1",10);
            mpz_t __sd_Z_sub_9;
            __gmpz_init(__sd_Z_sub_9);
            __gmpz_sub(__sd_Z_sub_9,__sd_Z_sub_8,__sd_Z_cst_10);
            __gmpz_clear(__sd_Z_sub_8);
            __gmpz_clear(__sd_Z_cst_10);
            mpz_t __sd_Z_to_Z_19;
            __gmpz_init_set_si(__sd_Z_to_Z_19,j);
            mpz_t __sd_Z_sub_10;
            __gmpz_init(__sd_Z_sub_10);
            __gmpz_sub(__sd_Z_sub_10,__sd_Z_sub_9,__sd_Z_to_Z_19);
            __gmpz_clear(__sd_Z_sub_9);
            __gmpz_clear(__sd_Z_to_Z_19);
            int __sd_variant_decr_0;
            __sd_variant_decr_0 = __gmpz_cmp(__sd_Z_sub_10,
                                             __sd_Z_variant_save_0);
            if(__sd_variant_decr_0 >= 0) {
              pathcrawler_assert_exception("non decreasing",5);
            }
            __gmpz_clear(__sd_Z_variant_save_0);
            }
             
        }
        i ++;mpz_t __sd_Z_cst_12;
        __gmpz_init_set_str(__sd_Z_cst_12,"0",10);
        mpz_t __sd_Z_to_Z_21;
        __gmpz_init_set_si(__sd_Z_to_Z_21,i);
        int __sd_le_5;
        __sd_le_5 = __gmpz_cmp(__sd_Z_cst_12,__sd_Z_to_Z_21);
        __gmpz_clear(__sd_Z_cst_12);
        __gmpz_clear(__sd_Z_to_Z_21);
        int __sd_and_3;
        __sd_and_3 = __sd_le_5 <= 0;
        if(__sd_and_3) {
          __sd_and_3 = i <= n;
        }
        if(! __sd_and_3) {
          pathcrawler_assert_exception("not preserved",3);
        }
        mpz_t __sd_Z_to_Z_24;
        __gmpz_init_set_si(__sd_Z_to_Z_24,n);
        mpz_t __sd_Z_to_Z_25;
        __gmpz_init_set_si(__sd_Z_to_Z_25,i);
        mpz_t __sd_Z_sub_12;
        __gmpz_init(__sd_Z_sub_12);
        __gmpz_sub(__sd_Z_sub_12,__sd_Z_to_Z_24,__sd_Z_to_Z_25);
        __gmpz_clear(__sd_Z_to_Z_24);
        __gmpz_clear(__sd_Z_to_Z_25);
        int __sd_variant_decr_1;
        __sd_variant_decr_1 = __gmpz_cmp(__sd_Z_sub_12,__sd_Z_variant_save_1);
        if(__sd_variant_decr_1 >= 0) {
          pathcrawler_assert_exception("non decreasing",2);
        }
        __gmpz_clear(__sd_Z_variant_save_1);
        }
         
    }
    {
      int __sd_forall_0;
      __sd_forall_0 = 1;
      {
        mpz_t __q_i;
        mpz_t __sd_Z_cst_0;
        __gmpz_init_set_str(__sd_Z_cst_0,"0",10);
        mpz_t __sd_Z_to_Z_0;
        __gmpz_init_set_si(__sd_Z_to_Z_0,old_n);
        mpz_t __sd_Z_cst_1;
        __gmpz_init_set_str(__sd_Z_cst_1,"1",10);
        mpz_t __sd_Z_sub_0;
        __gmpz_init(__sd_Z_sub_0);
        __gmpz_sub(__sd_Z_sub_0,__sd_Z_to_Z_0,__sd_Z_cst_1);
        __gmpz_clear(__sd_Z_to_Z_0);
        __gmpz_clear(__sd_Z_cst_1);
        __gmpz_init_set(__q_i,__sd_Z_cst_0);
        int __sd_forall_cmp_0;
        __sd_forall_cmp_0 = __gmpz_cmp(__q_i,__sd_Z_sub_0);
        while(__sd_forall_cmp_0 < 0 && __sd_forall_0) {
          mpz_t __sd_Z_lval_0;
          __gmpz_init_set(__sd_Z_lval_0,__q_i);
          int __sd_to_ctype_0;
          __sd_to_ctype_0 = (int)__gmpz_get_si(__sd_Z_lval_0);
          __gmpz_clear(__sd_Z_lval_0);
          mpz_t __sd_Z_lval_1;
          __gmpz_init_set(__sd_Z_lval_1,__q_i);
          mpz_t __sd_Z_cst_2;
          __gmpz_init_set_str(__sd_Z_cst_2,"1",10);
          mpz_t __sd_Z_add_0;
          __gmpz_init(__sd_Z_add_0);
          __gmpz_add(__sd_Z_add_0,__sd_Z_lval_1,__sd_Z_cst_2);
          __gmpz_clear(__sd_Z_lval_1);
          __gmpz_clear(__sd_Z_cst_2);
          int __sd_to_ctype_1;
          __sd_to_ctype_1 = (int)__gmpz_get_si(__sd_Z_add_0);
          __gmpz_clear(__sd_Z_add_0);
          __sd_forall_0 = *(old_A + __sd_to_ctype_0) <= *(old_A + __sd_to_ctype_1);
          __gmpz_add_ui(__q_i,__q_i,1);
          __sd_forall_cmp_0 = __gmpz_cmp(__q_i,__sd_Z_sub_0);
        }
        __gmpz_clear(__q_i);
        __gmpz_clear(__sd_Z_cst_0);
        __gmpz_clear(__sd_Z_sub_0);
      }
      if(! __sd_forall_0) {
        pathcrawler_assert_exception("",10);
      }
    }
    free(old_ptr_A);
    return;
  }
}


[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing __sd_instru_bubble_sort_bubble_sort.c (with preprocessing)
[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing __sd_instru_bubble_sort_bubble_sort.c (with preprocessing)
[pc] analyzing...
[pc] Compiling pathcrawler___sd_instru_bubble_sort_bubble_sort/lanceur_bubble_sort utilities ...
[pc] Compiling pathcrawler___sd_instru_bubble_sort_bubble_sort/lanceur_bubble_sort ...
[pc] generating tests...
[pc] Starting lanceur_bubble_sort (isc version)
[pc] Starting lanceur_pathcrawler__bubble_sort_precond (isc version)
[pc] generation finished
[stady] all-paths: true
[stady] 595 test cases
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'bubble_sort'
--------------------------------------------------------------------------------

[  Valid  ] Post-condition (file tests/bubble_sort/bubble_sort.c, line 9)
            by StaDy.
[  Valid  ] Loop variant at loop (file tests/bubble_sort/bubble_sort.c, line 18)
            by StaDy.
[  Valid  ] Loop variant at loop (file tests/bubble_sort/bubble_sort.c, line 24)
            by StaDy.
[  Valid  ] Invariant (file tests/bubble_sort/bubble_sort.c, line 14)
            by StaDy.
[  Valid  ] Invariant (file tests/bubble_sort/bubble_sort.c, line 19)
            by StaDy.
[  Valid  ] Invariant (file tests/bubble_sort/bubble_sort.c, line 20)
            by StaDy.
[    -    ] Default behavior
            tried with Frama-C kernel.

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
     6 Completely validated
     1 To be validated
     7 Total
--------------------------------------------------------------------------------
