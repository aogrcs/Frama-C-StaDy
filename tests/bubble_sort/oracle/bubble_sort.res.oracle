[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/bubble_sort/bubble_sort.c (with preprocessing)
[stady:generated-pl] generated Prolog precondition:
:- module(test_parameters).
:- import create_input_val/3 from substitution.
:- export dom/4.
:- export create_input_vals/2.
:- export unquantif_preconds/2.
:- export quantif_preconds/2.
:- export strategy/2.
:- export precondition_of/2.

dom(0,0,0,0).
dom('bubble_sort', cont('A',_), [], int([-2147483648..2147483647])).
dom('bubble_sort', dim('A'), [], int([1..4294967295])).
dom('pathcrawler__bubble_sort_precond',A,B,C) :-
  dom('bubble_sort',A,B,C).
create_input_vals('bubble_sort', Ins):-
  create_input_val('n', int([1..3]),Ins),
  create_input_val(dim('A'), int([1..4294967295]),Ins),
  true.
create_input_vals('pathcrawler__bubble_sort_precond',Ins) :-
  create_input_vals('bubble_sort',Ins).
quantif_preconds('bubble_sort',
  [

  ]
).
quantif_preconds('pathcrawler__bubble_sort_precond',A) :-
  quantif_preconds('bubble_sort',A).
unquantif_preconds('bubble_sort',
  [
    cond(egal,dim('A'),+(int(math), -(int(math), 'n', 1), 1),pre)
  ]
).
unquantif_preconds('pathcrawler__bubble_sort_precond',A) :-
  unquantif_preconds('bubble_sort',A).
strategy('bubble_sort',[]).
strategy('pathcrawler__bubble_sort_precond',A) :-
  strategy('bubble_sort',A).
precondition_of('bubble_sort','pathcrawler__bubble_sort_precond').
[stady:generated-c] generated C file:
/* Generated by Frama-C */
struct __anonstruct___mpz_struct_1 {int _mp_alloc ;int _mp_size ;unsigned long *_mp_d ;};typedef struct __anonstruct___mpz_struct_1 __mpz_struct;typedef __mpz_struct mpz_t[1];
extern signed long int __gmpz_get_si(mpz_t);
extern int __gmpz_cmp_ui(mpz_t, unsigned long int);
extern int __gmpz_cmp(mpz_t, mpz_t);
extern void __gmpz_clear(mpz_t);
extern void __gmpz_init(mpz_t);
extern void __gmpz_init_set(mpz_t, mpz_t);
extern void __gmpz_init_set_si(mpz_t, signed long int);
extern void __gmpz_init_set_str(mpz_t, const char*, int);
extern void __gmpz_add(mpz_t, const mpz_t, const mpz_t);
extern void __gmpz_add_ui(mpz_t, const mpz_t, unsigned long int);
extern void __gmpz_sub(mpz_t, const mpz_t, const mpz_t);
extern int pathcrawler_assert_exception(char*,int);
extern void pathcrawler_to_framac(char*);
extern void* malloc(unsigned long);
extern void free(void*);
int bubble_sort_precond(int *A, int n)
{
  return 1;
}

void bubble_sort(int *A, int n)
{
  int *old_A;
  int *old_ptr_A;
  old_A = A;
  mpz_t __stady_gmp_8;
  __gmpz_init_set_si(__stady_gmp_8, n);
  int __stady_term_3;
  unsigned long __stady_term_4;
  __stady_term_4 = __gmpz_get_si(__stady_gmp_8);
  old_ptr_A = malloc(__stady_term_4 * (unsigned long)sizeof(int));
  __stady_term_4 = __gmpz_get_si(__stady_gmp_8);
  for(__stady_term_3 = 0; (unsigned long)__stady_term_3 < __stady_term_4; __stady_term_3 = 
    __stady_term_3 + 1) {
    old_ptr_A[__stady_term_3] = A[__stady_term_3];
  }
  __gmpz_clear(__stady_gmp_8);
  int old_n;
  old_n = n;
  {
    int j;
    int i;
    {
      i = 0;
      j = i;
    }
    i = 0;
    {
      mpz_t __stady_gmp_55;
      __gmpz_init_set_str(__stady_gmp_55, "0", 10);
      mpz_t __stady_gmp_56;
      __gmpz_init_set_si(__stady_gmp_56, i);
      int __stady_term_16;
      __stady_term_16 = __gmpz_cmp(__stady_gmp_55, __stady_gmp_56);
      __gmpz_clear(__stady_gmp_55);
      __gmpz_clear(__stady_gmp_56);
      int __stady_pred_5;
      __stady_pred_5 = __stady_term_16 <= 0;
      if(__stady_pred_5) {
        __stady_pred_5 = i <= n;
      }
      if(! __stady_pred_5) {
        pathcrawler_assert_exception("Loop invariant not established!", 3);
      }
      mpz_t __stady_gmp_59;
      __gmpz_init_set_si(__stady_gmp_59, n);
      mpz_t __stady_gmp_60;
      __gmpz_init_set_si(__stady_gmp_60, i);
      mpz_t __stady_gmp_61;
      __gmpz_init(__stady_gmp_61);
      __gmpz_sub(__stady_gmp_61, __stady_gmp_59, __stady_gmp_60);
      __gmpz_clear(__stady_gmp_59);
      __gmpz_clear(__stady_gmp_60);
      int __stady_term_18;
      __stady_term_18 = __gmpz_cmp_ui(__stady_gmp_61, 0);
      if(__stady_term_18 < 0) {
        pathcrawler_assert_exception("Variant non positive", 9);
      }
      while (1) {
        mpz_t __stady_gmp_62;
        __gmpz_init_set_si(__stady_gmp_62, n);
        mpz_t __stady_gmp_63;
        __gmpz_init_set_si(__stady_gmp_63, i);
        mpz_t __stady_gmp_64;
        __gmpz_init(__stady_gmp_64);
        __gmpz_sub(__stady_gmp_64, __stady_gmp_62, __stady_gmp_63);
        __gmpz_clear(__stady_gmp_62);
        __gmpz_clear(__stady_gmp_63);
        mpz_t __stady_gmp_65;
        __gmpz_init_set(__stady_gmp_65, __stady_gmp_64);
        {
          if (! (i < n)) {
                           pathcrawler_to_framac("@FC:REACHABLE_STMT:8");
                           break;
                         }
          j = 0;
          {
            mpz_t __stady_gmp_9;
            __gmpz_init_set_str(__stady_gmp_9, "0", 10);
            mpz_t __stady_gmp_10;
            __gmpz_init_set_si(__stady_gmp_10, j);
            int __stady_term_5;
            __stady_term_5 = __gmpz_cmp(__stady_gmp_9, __stady_gmp_10);
            __gmpz_clear(__stady_gmp_9);
            __gmpz_clear(__stady_gmp_10);
            int __stady_pred_1;
            __stady_pred_1 = __stady_term_5 <= 0;
            if(__stady_pred_1) {
              mpz_t __stady_gmp_11;
              __gmpz_init_set_si(__stady_gmp_11, j);
              mpz_t __stady_gmp_12;
              __gmpz_init_set_si(__stady_gmp_12, n);
              mpz_t __stady_gmp_13;
              __gmpz_init_set_si(__stady_gmp_13, i);
              mpz_t __stady_gmp_14;
              __gmpz_init(__stady_gmp_14);
              __gmpz_sub(__stady_gmp_14, __stady_gmp_12, __stady_gmp_13);
              __gmpz_clear(__stady_gmp_12);
              __gmpz_clear(__stady_gmp_13);
              mpz_t __stady_gmp_15;
              __gmpz_init_set_str(__stady_gmp_15, "1", 10);
              mpz_t __stady_gmp_16;
              __gmpz_init(__stady_gmp_16);
              __gmpz_sub(__stady_gmp_16, __stady_gmp_14, __stady_gmp_15);
              __gmpz_clear(__stady_gmp_14);
              __gmpz_clear(__stady_gmp_15);
              int __stady_term_6;
              __stady_term_6 = __gmpz_cmp(__stady_gmp_11, __stady_gmp_16);
              __gmpz_clear(__stady_gmp_11);
              __gmpz_clear(__stady_gmp_16);
              __stady_pred_1 = __stady_term_6 <= 0;
            }
            if(! __stady_pred_1) {
              pathcrawler_assert_exception("Loop invariant not established!", 
              1);
            }
            int __stady_pred_3;
            __stady_pred_3 = 1;
            {
              mpz_t __q_a;
              mpz_t __stady_gmp_25;
              __gmpz_init_set_str(__stady_gmp_25, "0", 10);
              mpz_t __stady_gmp_26;
              __gmpz_init_set_si(__stady_gmp_26, j);
              __gmpz_init_set(__q_a, __stady_gmp_25);
              int __stady_term_9;
              __stady_term_9 = __gmpz_cmp(__q_a, __stady_gmp_26);
              for(; __stady_term_9 <= 0 && __stady_pred_3; ) {
                mpz_t __stady_gmp_27;
                __gmpz_init_set(__stady_gmp_27, __q_a);
                int __stady_term_10;
                __stady_term_10 = __gmpz_get_si(__stady_gmp_27);
                __gmpz_clear(__stady_gmp_27);
                mpz_t __stady_gmp_28;
                __gmpz_init_set_si(__stady_gmp_28, j);
                int __stady_term_11;
                __stady_term_11 = __gmpz_get_si(__stady_gmp_28);
                __gmpz_clear(__stady_gmp_28);
                __stady_pred_3 = *(A + __stady_term_10) <= *(A + __stady_term_11);
                __gmpz_add_ui(__q_a, __q_a, 1);
                __stady_term_9 = __gmpz_cmp(__q_a, __stady_gmp_26);
              }
              __gmpz_clear(__q_a);
              __gmpz_clear(__stady_gmp_25);
              __gmpz_clear(__stady_gmp_26);
            }
            if(! __stady_pred_3) {
              pathcrawler_assert_exception("Loop invariant not established!", 
              5);
            }
            mpz_t __stady_gmp_33;
            __gmpz_init_set_si(__stady_gmp_33, n);
            mpz_t __stady_gmp_34;
            __gmpz_init_set_si(__stady_gmp_34, i);
            mpz_t __stady_gmp_35;
            __gmpz_init(__stady_gmp_35);
            __gmpz_sub(__stady_gmp_35, __stady_gmp_33, __stady_gmp_34);
            __gmpz_clear(__stady_gmp_33);
            __gmpz_clear(__stady_gmp_34);
            mpz_t __stady_gmp_36;
            __gmpz_init_set_str(__stady_gmp_36, "1", 10);
            mpz_t __stady_gmp_37;
            __gmpz_init(__stady_gmp_37);
            __gmpz_sub(__stady_gmp_37, __stady_gmp_35, __stady_gmp_36);
            __gmpz_clear(__stady_gmp_35);
            __gmpz_clear(__stady_gmp_36);
            mpz_t __stady_gmp_38;
            __gmpz_init_set_si(__stady_gmp_38, j);
            mpz_t __stady_gmp_39;
            __gmpz_init(__stady_gmp_39);
            __gmpz_sub(__stady_gmp_39, __stady_gmp_37, __stady_gmp_38);
            __gmpz_clear(__stady_gmp_37);
            __gmpz_clear(__stady_gmp_38);
            int __stady_term_15;
            __stady_term_15 = __gmpz_cmp_ui(__stady_gmp_39, 0);
            if(__stady_term_15 < 0) {
              pathcrawler_assert_exception("Variant non positive", 7);
            }
            while (1) {
              mpz_t __stady_gmp_40;
              __gmpz_init_set_si(__stady_gmp_40, n);
              mpz_t __stady_gmp_41;
              __gmpz_init_set_si(__stady_gmp_41, i);
              mpz_t __stady_gmp_42;
              __gmpz_init(__stady_gmp_42);
              __gmpz_sub(__stady_gmp_42, __stady_gmp_40, __stady_gmp_41);
              __gmpz_clear(__stady_gmp_40);
              __gmpz_clear(__stady_gmp_41);
              mpz_t __stady_gmp_43;
              __gmpz_init_set_str(__stady_gmp_43, "1", 10);
              mpz_t __stady_gmp_44;
              __gmpz_init(__stady_gmp_44);
              __gmpz_sub(__stady_gmp_44, __stady_gmp_42, __stady_gmp_43);
              __gmpz_clear(__stady_gmp_42);
              __gmpz_clear(__stady_gmp_43);
              mpz_t __stady_gmp_45;
              __gmpz_init_set_si(__stady_gmp_45, j);
              mpz_t __stady_gmp_46;
              __gmpz_init(__stady_gmp_46);
              __gmpz_sub(__stady_gmp_46, __stady_gmp_44, __stady_gmp_45);
              __gmpz_clear(__stady_gmp_44);
              __gmpz_clear(__stady_gmp_45);
              mpz_t __stady_gmp_47;
              __gmpz_init_set(__stady_gmp_47, __stady_gmp_46);
              {
                if (! (j < (n - i) - 1)) {
                                           pathcrawler_to_framac("@FC:REACHABLE_STMT:14");
                                           break;
                                         }
                if (*(A + j) > *(A + (j + 1))) {
                  int x;
                  {
                    pathcrawler_to_framac("@FC:REACHABLE_STMT:19");
                    x = *(A + j);
                  }
                  *(A + j) = *(A + (j + 1));
                  *(A + (j + 1)) = x;
                }
                j ++;
              }mpz_t __stady_gmp_17;
              __gmpz_init_set_str(__stady_gmp_17, "0", 10);
              mpz_t __stady_gmp_18;
              __gmpz_init_set_si(__stady_gmp_18, j);
              int __stady_term_7;
              __stady_term_7 = __gmpz_cmp(__stady_gmp_17, __stady_gmp_18);
              __gmpz_clear(__stady_gmp_17);
              __gmpz_clear(__stady_gmp_18);
              int __stady_pred_2;
              __stady_pred_2 = __stady_term_7 <= 0;
              if(__stady_pred_2) {
                mpz_t __stady_gmp_19;
                __gmpz_init_set_si(__stady_gmp_19, j);
                mpz_t __stady_gmp_20;
                __gmpz_init_set_si(__stady_gmp_20, n);
                mpz_t __stady_gmp_21;
                __gmpz_init_set_si(__stady_gmp_21, i);
                mpz_t __stady_gmp_22;
                __gmpz_init(__stady_gmp_22);
                __gmpz_sub(__stady_gmp_22, __stady_gmp_20, __stady_gmp_21);
                __gmpz_clear(__stady_gmp_20);
                __gmpz_clear(__stady_gmp_21);
                mpz_t __stady_gmp_23;
                __gmpz_init_set_str(__stady_gmp_23, "1", 10);
                mpz_t __stady_gmp_24;
                __gmpz_init(__stady_gmp_24);
                __gmpz_sub(__stady_gmp_24, __stady_gmp_22, __stady_gmp_23);
                __gmpz_clear(__stady_gmp_22);
                __gmpz_clear(__stady_gmp_23);
                int __stady_term_8;
                __stady_term_8 = __gmpz_cmp(__stady_gmp_19, __stady_gmp_24);
                __gmpz_clear(__stady_gmp_19);
                __gmpz_clear(__stady_gmp_24);
                __stady_pred_2 = __stady_term_8 <= 0;
              }
              if(! __stady_pred_2) {
                pathcrawler_assert_exception("Loop invariant not preserved!", 
                1);
              }
              int __stady_pred_4;
              __stady_pred_4 = 1;
              {
                mpz_t __q_a;
                mpz_t __stady_gmp_29;
                __gmpz_init_set_str(__stady_gmp_29, "0", 10);
                mpz_t __stady_gmp_30;
                __gmpz_init_set_si(__stady_gmp_30, j);
                __gmpz_init_set(__q_a, __stady_gmp_29);
                int __stady_term_12;
                __stady_term_12 = __gmpz_cmp(__q_a, __stady_gmp_30);
                for(; __stady_term_12 <= 0 && __stady_pred_4; ) {
                  mpz_t __stady_gmp_31;
                  __gmpz_init_set(__stady_gmp_31, __q_a);
                  int __stady_term_13;
                  __stady_term_13 = __gmpz_get_si(__stady_gmp_31);
                  __gmpz_clear(__stady_gmp_31);
                  mpz_t __stady_gmp_32;
                  __gmpz_init_set_si(__stady_gmp_32, j);
                  int __stady_term_14;
                  __stady_term_14 = __gmpz_get_si(__stady_gmp_32);
                  __gmpz_clear(__stady_gmp_32);
                  __stady_pred_4 = *(A + __stady_term_13) <= *(A + __stady_term_14);
                  __gmpz_add_ui(__q_a, __q_a, 1);
                  __stady_term_12 = __gmpz_cmp(__q_a, __stady_gmp_30);
                }
                __gmpz_clear(__q_a);
                __gmpz_clear(__stady_gmp_29);
                __gmpz_clear(__stady_gmp_30);
              }
              if(! __stady_pred_4) {
                pathcrawler_assert_exception("Loop invariant not preserved!", 
                5);
              }
              mpz_t __stady_gmp_48;
              __gmpz_init_set_si(__stady_gmp_48, n);
              mpz_t __stady_gmp_49;
              __gmpz_init_set_si(__stady_gmp_49, i);
              mpz_t __stady_gmp_50;
              __gmpz_init(__stady_gmp_50);
              __gmpz_sub(__stady_gmp_50, __stady_gmp_48, __stady_gmp_49);
              __gmpz_clear(__stady_gmp_48);
              __gmpz_clear(__stady_gmp_49);
              mpz_t __stady_gmp_51;
              __gmpz_init_set_str(__stady_gmp_51, "1", 10);
              mpz_t __stady_gmp_52;
              __gmpz_init(__stady_gmp_52);
              __gmpz_sub(__stady_gmp_52, __stady_gmp_50, __stady_gmp_51);
              __gmpz_clear(__stady_gmp_50);
              __gmpz_clear(__stady_gmp_51);
              mpz_t __stady_gmp_53;
              __gmpz_init_set_si(__stady_gmp_53, j);
              mpz_t __stady_gmp_54;
              __gmpz_init(__stady_gmp_54);
              __gmpz_sub(__stady_gmp_54, __stady_gmp_52, __stady_gmp_53);
              __gmpz_clear(__stady_gmp_52);
              __gmpz_clear(__stady_gmp_53);
              __stady_term_15 = __gmpz_cmp_ui(__stady_gmp_47, 0);
              if(__stady_term_15 < 0) {
                pathcrawler_assert_exception("Variant non positive", 7);
              }
              __stady_term_15 = __gmpz_cmp(__stady_gmp_54, __stady_gmp_47);
              if(__stady_term_15 >= 0) {
                pathcrawler_assert_exception("Variant non decreasing", 7);
              }
              __gmpz_clear(__stady_gmp_47);
              }
               __gmpz_clear(__stady_gmp_39);
            
          }
          i ++;
        }mpz_t __stady_gmp_57;
        __gmpz_init_set_str(__stady_gmp_57, "0", 10);
        mpz_t __stady_gmp_58;
        __gmpz_init_set_si(__stady_gmp_58, i);
        int __stady_term_17;
        __stady_term_17 = __gmpz_cmp(__stady_gmp_57, __stady_gmp_58);
        __gmpz_clear(__stady_gmp_57);
        __gmpz_clear(__stady_gmp_58);
        int __stady_pred_6;
        __stady_pred_6 = __stady_term_17 <= 0;
        if(__stady_pred_6) {
          __stady_pred_6 = i <= n;
        }
        if(! __stady_pred_6) {
          pathcrawler_assert_exception("Loop invariant not preserved!", 3);
        }
        mpz_t __stady_gmp_66;
        __gmpz_init_set_si(__stady_gmp_66, n);
        mpz_t __stady_gmp_67;
        __gmpz_init_set_si(__stady_gmp_67, i);
        mpz_t __stady_gmp_68;
        __gmpz_init(__stady_gmp_68);
        __gmpz_sub(__stady_gmp_68, __stady_gmp_66, __stady_gmp_67);
        __gmpz_clear(__stady_gmp_66);
        __gmpz_clear(__stady_gmp_67);
        __stady_term_18 = __gmpz_cmp_ui(__stady_gmp_65, 0);
        if(__stady_term_18 < 0) {
          pathcrawler_assert_exception("Variant non positive", 9);
        }
        __stady_term_18 = __gmpz_cmp(__stady_gmp_68, __stady_gmp_65);
        if(__stady_term_18 >= 0) {
          pathcrawler_assert_exception("Variant non decreasing", 9);
        }
        __gmpz_clear(__stady_gmp_65);
        }
         __gmpz_clear(__stady_gmp_61);
      
    }
    {
      int __stady_pred_0;
      __stady_pred_0 = 1;
      {
        mpz_t __q_i;
        mpz_t __stady_gmp_0;
        __gmpz_init_set_str(__stady_gmp_0, "0", 10);
        mpz_t __stady_gmp_1;
        __gmpz_init_set_si(__stady_gmp_1, old_n);
        mpz_t __stady_gmp_2;
        __gmpz_init_set_str(__stady_gmp_2, "1", 10);
        mpz_t __stady_gmp_3;
        __gmpz_init(__stady_gmp_3);
        __gmpz_sub(__stady_gmp_3, __stady_gmp_1, __stady_gmp_2);
        __gmpz_clear(__stady_gmp_1);
        __gmpz_clear(__stady_gmp_2);
        __gmpz_init_set(__q_i, __stady_gmp_0);
        int __stady_term_0;
        __stady_term_0 = __gmpz_cmp(__q_i, __stady_gmp_3);
        for(; __stady_term_0 < 0 && __stady_pred_0; ) {
          mpz_t __stady_gmp_4;
          __gmpz_init_set(__stady_gmp_4, __q_i);
          int __stady_term_1;
          __stady_term_1 = __gmpz_get_si(__stady_gmp_4);
          __gmpz_clear(__stady_gmp_4);
          mpz_t __stady_gmp_5;
          __gmpz_init_set(__stady_gmp_5, __q_i);
          mpz_t __stady_gmp_6;
          __gmpz_init_set_str(__stady_gmp_6, "1", 10);
          mpz_t __stady_gmp_7;
          __gmpz_init(__stady_gmp_7);
          __gmpz_add(__stady_gmp_7, __stady_gmp_5, __stady_gmp_6);
          __gmpz_clear(__stady_gmp_5);
          __gmpz_clear(__stady_gmp_6);
          int __stady_term_2;
          __stady_term_2 = __gmpz_get_si(__stady_gmp_7);
          __gmpz_clear(__stady_gmp_7);
          __stady_pred_0 = *(old_A + __stady_term_1) <= *(old_A + __stady_term_2);
          __gmpz_add_ui(__q_i, __q_i, 1);
          __stady_term_0 = __gmpz_cmp(__q_i, __stady_gmp_3);
        }
        __gmpz_clear(__q_i);
        __gmpz_clear(__stady_gmp_0);
        __gmpz_clear(__stady_gmp_3);
      }
      if(! __stady_pred_0) {
        pathcrawler_assert_exception("Post-condition!", 10);
      }
    }
    free(old_ptr_A);
    return;
  }
}


[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing __sd_instru_bubble_sort_bubble_sort.c (with preprocessing)
[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing __sd_instru_bubble_sort_bubble_sort.c (with preprocessing)
[pc] analyzing...
[pc] Compiling pathcrawler___sd_instru_bubble_sort_bubble_sort/lanceur_bubble_sort utilities ...
[pc] Compiling pathcrawler___sd_instru_bubble_sort_bubble_sort/lanceur_bubble_sort ...
[pc] generating tests...
[pc] Starting lanceur_bubble_sort (isc version)
[pc] Starting lanceur_pathcrawler__bubble_sort_precond (isc version)
[pc] generation finished
[stady] all-paths: true
[stady] 625 test cases
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'bubble_sort'
--------------------------------------------------------------------------------

[  Valid  ] Post-condition (file tests/bubble_sort/bubble_sort.c, line 9)
            by StaDy.
[  Valid  ] Loop variant at loop (file tests/bubble_sort/bubble_sort.c, line 18)
            by StaDy.
[  Valid  ] Loop variant at loop (file tests/bubble_sort/bubble_sort.c, line 24)
            by StaDy.
[  Valid  ] Invariant (file tests/bubble_sort/bubble_sort.c, line 14)
            by StaDy.
[  Valid  ] Invariant (file tests/bubble_sort/bubble_sort.c, line 19)
            by StaDy.
[  Valid  ] Invariant (file tests/bubble_sort/bubble_sort.c, line 20)
            by StaDy.
[    -    ] Default behavior
            tried with Frama-C kernel.

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
     6 Completely validated
     1 To be validated
     7 Total
--------------------------------------------------------------------------------
