[kernel] preprocessing with "gcc -C -E -I.  tests/bubble_sort/bubble_sort.c"
[stady:generated-pl] :- module(test_parameters).
                     :- import create_input_val/3 from substitution.
                     :- export dom/4.
                     :- export create_input_vals/2.
                     :- export unquantif_preconds/2.
                     :- export quantif_preconds/2.
                     :- export strategy/2.
                     :- export precondition_of/2.
                     
                     dom(0,0,0,0).
[stady:generated-pl] dom('bubble_sort', cont('A',_), [], int([-2147483648..2147483647])).
[stady:generated-pl] dom('pathcrawler__bubble_sort_precond',A,B,C) :- dom('bubble_sort',A,B,C).
[stady:generated-pl] create_input_vals('bubble_sort', Ins):-
[stady:generated-pl] create_input_val(dim('A'), int([1..4294967295]),Ins),
[stady:generated-pl] create_input_val('n', int([-2147483648..2147483647]),Ins),
[stady:generated-pl] true.
[stady:generated-pl] create_input_vals('pathcrawler__bubble_sort_precond',Ins) :- create_input_vals('bubble_sort',Ins).
[stady:generated-pl] quantif_preconds('bubble_sort',[]).
[stady:generated-pl] quantif_preconds('pathcrawler__bubble_sort_precond',A) :- quantif_preconds('bubble_sort',A).
[stady:generated-pl] unquantif_preconds('bubble_sort',[cond(egal,dim('A'),+(int(math), -(int(math), 'n', 1), 1),pre), cond(infegal,'n',3,pre), cond(inf,0,'n',pre)]).
[stady:generated-pl] unquantif_preconds('pathcrawler__bubble_sort_precond',A) :- unquantif_preconds('bubble_sort',A).
[stady:generated-pl] strategy('bubble_sort',[]).
[stady:generated-pl] strategy('pathcrawler__bubble_sort_precond',A) :- strategy('bubble_sort',A).
[stady:generated-pl] precondition_of('bubble_sort','pathcrawler__bubble_sort_precond').
[stady:generated-c] /* Generated by Frama-C */
                    int bubble_sort_precond(int *A, int n)
                    {
                    if (!((0 < (n)) && ((n) <= 3))) return 0;if (!((n-1) >= 0 && (pathcrawler_dimension((A)) > (n-1)))) return 0;return 1;
                    }
                    
                    void bubble_sort(int *A, int n)
                    {
                      int *old_A = A;
                      int *old_ptr_A;
                      old_ptr_A = malloc(((n-1)+1)*sizeof(int));
                      int __stady_iter_0;
                      for (__stady_iter_0 = 0; __stady_iter_0 < (n-1)+1; __stady_iter_0++) {
                      old_ptr_A[__stady_iter_0] = A[__stady_iter_0];
                      }
                      int old_n = n;
                      {
                        int j;
                        int i;
                        {
                          /*sequence*/
                          i = 0;
                          j = i;
                        }
                        i = 0;
                        {
                           if((n-i)<0)pathcrawler_assert_exception("Variant non positive",9);
                           if(!((0 <= (i)) && ((i) <= (n)))) pathcrawler_assert_exception("Loop invariant not established!", 3);
                           while (1) {
                             int old_variant_9 = n-i;
                    {
                                                        if (! (i < n)) break;
                                                        j = 0;
                                                        {
                                                           if((((n-i)-1)-j)<0)pathcrawler_assert_exception("Variant non positive",7);
                                                           int __stady_pred_3 = 1;
                                                           {
                                                           int __q_a;
                                                           for (__q_a = 0; __q_a <= (j) &&  __stady_pred_3; __q_a++) {
                                                           __stady_pred_3 = ((*(A+__q_a)) <= (*(A+j)));
                                                           }
                                                           }
                                                           if(!__stady_pred_3) pathcrawler_assert_exception("Loop invariant not established!", 4);
                                                           if(!((0 <= (j)) && ((j) <= (n-i)-1))) pathcrawler_assert_exception("Loop invariant not established!", 1);
                                                           while (1) {
                                                             int old_variant_7 = ((n-i)-1)-j;
                    
                                                             {
                                                               if (! (j < (n - i) - 1)) break;
                                                               if (*(A + j) > *(A + (j + 1))) {
                                                                 int x;
                                                                 x = *(A + j);
                                                                 *(A + j) = *(A + (j + 1));
                                                                 *(A + (j + 1)) = x;
                                                               }
                                                               j ++;
                                                             }if(!((0 <= (j)) && ((j) <= (n-i)-1))) pathcrawler_assert_exception("Loop invariant not preserved!", 1);
                                                             int __stady_pred_4 = 1;
                                                             {
                                                             int __q_a;
                                                             for (__q_a = 0; __q_a <= (j) &&  __stady_pred_4; __q_a++) {
                                                             __stady_pred_4 = ((*(A+__q_a)) <= (*(A+j)));
                                                             }
                                                             }
                                                             if(!__stady_pred_4) pathcrawler_assert_exception("Loop invariant not preserved!", 4);
                                                             if((old_variant_7)<0)pathcrawler_assert_exception("Variant non positive",7);
                                                             if((((n-i)-1)-j) >= old_variant_7) pathcrawler_assert_exception("Variant non decreasing",7);
                                                             }
                                                              
                                                        }
                                                        i ++;
                                                      }if(!((0 <= (i)) && ((i) <= (n)))) pathcrawler_assert_exception("Loop invariant not preserved!", 3);
                             if((old_variant_9)<0)pathcrawler_assert_exception("Variant non positive",9);
                             if((n-i) >= old_variant_9) pathcrawler_assert_exception("Variant non decreasing",9);
                             }
                              
                        }
                        {
                          int __stady_pred_5 = 1;
                          {
                          int __q_i;
                          for (__q_i = 0; __q_i < old_n-1 &&  __stady_pred_5; __q_i++) {
                          __stady_pred_5 = ((*(old_A+__q_i)) <= (*(old_A+(__q_i+1))));
                          }
                          }
                          if(!__stady_pred_5)pathcrawler_assert_exception("Post-condition!", 10);
                          }
                        free(old_ptr_A);
                        return;
                      }
                    }
[kernel] preprocessing with "gcc -C -E -I.  stady_temp.c"
stady_temp.c:13:[kernel] warning: Calling undeclared function malloc. Old style K&R code?
stady_temp.c:90:[kernel] warning: Calling undeclared function free. Old style K&R code?
[kernel] preprocessing with "gcc -C -E -I. -include /usr/local/share/frama-c/pc/lib/lanceur_deb.h stady_temp.c"
stady_temp.c:13:[kernel] warning: Calling undeclared function malloc. Old style K&R code?
stady_temp.c:90:[kernel] warning: Calling undeclared function free. Old style K&R code?
[pc] analyzing...
[pc] Compiling pathcrawler_stady_temp/lanceur_bubble_sort utilities ...
[pc] Compiling pathcrawler_stady_temp/lanceur_bubble_sort ...
[pc] generating tests...
[pc] Starting lanceur_bubble_sort (isc version)
[pc] Starting lanceur_pathcrawler__bubble_sort_precond (isc version)
[pc] generation finished
[stady] all-paths: true
[stady] 519 test cases
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'bubble_sort'
--------------------------------------------------------------------------------

[  Valid  ] Post-condition (file tests/bubble_sort/bubble_sort.c, line 9)
            by StaDyPlus.
[    -    ] Assigns (file tests/bubble_sort/bubble_sort.c, line 8)
[  Valid  ] Loop variant at loop (file tests/bubble_sort/bubble_sort.c, line 18)
            by StaDyPlus.
[  Valid  ] Loop variant at loop (file tests/bubble_sort/bubble_sort.c, line 24)
            by StaDyPlus.
[  Valid  ] Invariant (file tests/bubble_sort/bubble_sort.c, line 14)
            by StaDyPlus.
[  Valid  ] Invariant (file tests/bubble_sort/bubble_sort.c, line 19)
            by StaDyPlus.
[  Valid  ] Invariant (file tests/bubble_sort/bubble_sort.c, line 20)
            by StaDyPlus.
[    -    ] Default behavior
            tried with Frama-C kernel.

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
     6 Completely validated
     2 To be validated
     8 Total
--------------------------------------------------------------------------------
