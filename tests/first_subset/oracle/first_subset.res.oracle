[kernel] preprocessing with "gcc -C -E -I.  tests/first_subset/first_subset.c"
[kernel] preprocessing with "gcc -C -E -I.  externals.c"
[stady:generated-pl] generated Prolog precondition:
:- module(test_parameters).
:- import create_input_val/3 from substitution.
:- export dom/4.
:- export create_input_vals/2.
:- export unquantif_preconds/2.
:- export quantif_preconds/2.
:- export strategy/2.
:- export precondition_of/2.

dom(0,0,0,0).
dom('firstSubset', dim('s'), [], int([1..4294967295])).
dom('firstSubset', cont('s',_), [], int([-2147483648..2147483647])).
dom('pathcrawler__firstSubset_precond',A,B,C) :-
  dom('firstSubset',A,B,C).
create_input_vals('firstSubset', Ins):-
  create_input_val(dim('s'), int([1..4294967295]),Ins),
  create_input_val('n', int([0..3]),Ins),
  true.
create_input_vals('pathcrawler__firstSubset_precond',Ins) :-
  create_input_vals('firstSubset',Ins).
quantif_preconds('firstSubset',
  [
  ]
).
quantif_preconds('pathcrawler__firstSubset_precond',A) :-
  quantif_preconds('firstSubset',A).
unquantif_preconds('firstSubset',
  [
    cond(egal,dim('s'),+(int(math), -(int(math), 'n', 1), 1),pre)
  ]
).
unquantif_preconds('pathcrawler__firstSubset_precond',A) :-
  unquantif_preconds('firstSubset',A).
strategy('firstSubset',[]).
strategy('pathcrawler__firstSubset_precond',A) :-
  strategy('firstSubset',A).
precondition_of('firstSubset','pathcrawler__firstSubset_precond').
[stady:generated-c] generated C file:
/* Generated by Frama-C */
struct __anonstruct___mpz_struct_1 {int _mp_alloc ;int _mp_size ;unsigned long *_mp_d ;};typedef struct __anonstruct___mpz_struct_1 __mpz_struct;typedef __mpz_struct mpz_t[1];
extern signed long int __gmpz_get_si(mpz_t);
extern int __gmpz_cmp_ui(mpz_t, unsigned long int);
extern int __gmpz_cmp(mpz_t, mpz_t);
extern void __gmpz_clear(mpz_t);
extern void __gmpz_init(mpz_t);
extern void __gmpz_init_set(mpz_t, mpz_t);
extern void __gmpz_init_set_si(mpz_t, signed long int);
extern void __gmpz_init_set_str(mpz_t, const char*, int);
extern void __gmpz_add_ui(mpz_t, const mpz_t, unsigned long int);
extern void __gmpz_sub(mpz_t, const mpz_t, const mpz_t);
extern int pathcrawler_assert_exception(char*,int);
extern void pathcrawler_to_framac(char*);
extern void* malloc(unsigned long);
extern void free(void*);
int firstSubset_precond(int *s, int n)
{
  return 1;
}

void firstSubset(int *s, int n)
{
  int *old_s;
  int *old_ptr_s;
  old_s = s;
  mpz_t __stady_gmp_8;
  __gmpz_init_set_si(__stady_gmp_8, n);
  int __stady_term_5;
  unsigned long __stady_term_6;
  __stady_term_6 = __gmpz_get_si(__stady_gmp_8);
  old_ptr_s = malloc(__stady_term_6 * (unsigned long)sizeof(int));
  __stady_term_6 = __gmpz_get_si(__stady_gmp_8);
  for(__stady_term_5 = 0; (unsigned long)__stady_term_5 < __stady_term_6; __stady_term_5 = 
    __stady_term_5 + 1) {
    old_ptr_s[__stady_term_5] = s[__stady_term_5];
  }
  __gmpz_clear(__stady_gmp_8);
  int old_n;
  old_n = n;
  {
    int k;
    k = 0;
    {
      mpz_t __stady_gmp_9;
      __gmpz_init_set_str(__stady_gmp_9, "0", 10);
      mpz_t __stady_gmp_10;
      __gmpz_init_set_si(__stady_gmp_10, k);
      int __stady_term_7;
      __stady_term_7 = __gmpz_cmp(__stady_gmp_9, __stady_gmp_10);
      __gmpz_clear(__stady_gmp_9);
      __gmpz_clear(__stady_gmp_10);
      int __stady_pred_2;
      __stady_pred_2 = __stady_term_7 <= 0;
      if(__stady_pred_2) {
        __stady_pred_2 = k <= n;
      }
      if(! __stady_pred_2) {
        pathcrawler_assert_exception("Loop invariant not established!", 3);
      }
      int __stady_pred_4;
      __stady_pred_4 = 1;
      {
        mpz_t __q_i;
        mpz_t __stady_gmp_13;
        __gmpz_init_set_str(__stady_gmp_13, "0", 10);
        mpz_t __stady_gmp_14;
        __gmpz_init_set_si(__stady_gmp_14, k);
        __gmpz_init_set(__q_i, __stady_gmp_13);
        int __stady_term_9;
        __stady_term_9 = __gmpz_cmp(__q_i, __stady_gmp_14);
        for(; __stady_term_9 < 0 && __stady_pred_4; ) {
          mpz_t __stady_gmp_15;
          __gmpz_init_set(__stady_gmp_15, __q_i);
          int __stady_term_10;
          __stady_term_10 = __gmpz_get_si(__stady_gmp_15);
          __gmpz_clear(__stady_gmp_15);
          mpz_t __stady_gmp_16;
          __gmpz_init_set_si(__stady_gmp_16, *(s + __stady_term_10));
          mpz_t __stady_gmp_17;
          __gmpz_init_set_str(__stady_gmp_17, "0", 10);
          int __stady_term_11;
          __stady_term_11 = __gmpz_cmp(__stady_gmp_16, __stady_gmp_17);
          __gmpz_clear(__stady_gmp_16);
          __gmpz_clear(__stady_gmp_17);
          int __stady_pred_5;
          __stady_pred_5 = __stady_term_11 == 0;
          if(__stady_pred_5) {
            
          }
          else {
            mpz_t __stady_gmp_18;
            __gmpz_init_set(__stady_gmp_18, __q_i);
            int __stady_term_12;
            __stady_term_12 = __gmpz_get_si(__stady_gmp_18);
            __gmpz_clear(__stady_gmp_18);
            mpz_t __stady_gmp_19;
            __gmpz_init_set_si(__stady_gmp_19, *(s + __stady_term_12));
            mpz_t __stady_gmp_20;
            __gmpz_init_set_str(__stady_gmp_20, "1", 10);
            int __stady_term_13;
            __stady_term_13 = __gmpz_cmp(__stady_gmp_19, __stady_gmp_20);
            __gmpz_clear(__stady_gmp_19);
            __gmpz_clear(__stady_gmp_20);
            __stady_pred_5 = __stady_term_13 == 0;
          }
          __stady_pred_4 = __stady_pred_5;
          __gmpz_add_ui(__q_i, __q_i, 1);
          __stady_term_9 = __gmpz_cmp(__q_i, __stady_gmp_14);
        }
        __gmpz_clear(__q_i);
        __gmpz_clear(__stady_gmp_13);
        __gmpz_clear(__stady_gmp_14);
      }
      if(! __stady_pred_4) {
        pathcrawler_assert_exception("Loop invariant not established!", 5);
      }
      mpz_t __stady_gmp_29;
      __gmpz_init_set_si(__stady_gmp_29, n);
      mpz_t __stady_gmp_30;
      __gmpz_init_set_si(__stady_gmp_30, k);
      mpz_t __stady_gmp_31;
      __gmpz_init(__stady_gmp_31);
      __gmpz_sub(__stady_gmp_31, __stady_gmp_29, __stady_gmp_30);
      __gmpz_clear(__stady_gmp_29);
      __gmpz_clear(__stady_gmp_30);
      int __stady_term_19;
      __stady_term_19 = __gmpz_cmp_ui(__stady_gmp_31, 0);
      if(__stady_term_19 < 0) {
        pathcrawler_assert_exception("Variant non positive", 0);
      }
      while (1) {
        mpz_t __stady_gmp_32;
        __gmpz_init_set_si(__stady_gmp_32, n);
        mpz_t __stady_gmp_33;
        __gmpz_init_set_si(__stady_gmp_33, k);
        mpz_t __stady_gmp_34;
        __gmpz_init(__stady_gmp_34);
        __gmpz_sub(__stady_gmp_34, __stady_gmp_32, __stady_gmp_33);
        __gmpz_clear(__stady_gmp_32);
        __gmpz_clear(__stady_gmp_33);
        mpz_t __stady_gmp_35;
        __gmpz_init_set(__stady_gmp_35, __stady_gmp_34);
        {
          if (! (k < n)) {
                           pathcrawler_to_framac("@FC:REACHABLE_STMT:5");
                           break;
                         }
          *(s + k) = 0;
          k ++;
        }mpz_t __stady_gmp_11;
        __gmpz_init_set_str(__stady_gmp_11, "0", 10);
        mpz_t __stady_gmp_12;
        __gmpz_init_set_si(__stady_gmp_12, k);
        int __stady_term_8;
        __stady_term_8 = __gmpz_cmp(__stady_gmp_11, __stady_gmp_12);
        __gmpz_clear(__stady_gmp_11);
        __gmpz_clear(__stady_gmp_12);
        int __stady_pred_3;
        __stady_pred_3 = __stady_term_8 <= 0;
        if(__stady_pred_3) {
          __stady_pred_3 = k <= n;
        }
        if(! __stady_pred_3) {
          pathcrawler_assert_exception("Loop invariant not preserved!", 3);
        }
        int __stady_pred_6;
        __stady_pred_6 = 1;
        {
          mpz_t __q_i;
          mpz_t __stady_gmp_21;
          __gmpz_init_set_str(__stady_gmp_21, "0", 10);
          mpz_t __stady_gmp_22;
          __gmpz_init_set_si(__stady_gmp_22, k);
          __gmpz_init_set(__q_i, __stady_gmp_21);
          int __stady_term_14;
          __stady_term_14 = __gmpz_cmp(__q_i, __stady_gmp_22);
          for(; __stady_term_14 < 0 && __stady_pred_6; ) {
            mpz_t __stady_gmp_23;
            __gmpz_init_set(__stady_gmp_23, __q_i);
            int __stady_term_15;
            __stady_term_15 = __gmpz_get_si(__stady_gmp_23);
            __gmpz_clear(__stady_gmp_23);
            mpz_t __stady_gmp_24;
            __gmpz_init_set_si(__stady_gmp_24, *(s + __stady_term_15));
            mpz_t __stady_gmp_25;
            __gmpz_init_set_str(__stady_gmp_25, "0", 10);
            int __stady_term_16;
            __stady_term_16 = __gmpz_cmp(__stady_gmp_24, __stady_gmp_25);
            __gmpz_clear(__stady_gmp_24);
            __gmpz_clear(__stady_gmp_25);
            int __stady_pred_7;
            __stady_pred_7 = __stady_term_16 == 0;
            if(__stady_pred_7) {
              
            }
            else {
              mpz_t __stady_gmp_26;
              __gmpz_init_set(__stady_gmp_26, __q_i);
              int __stady_term_17;
              __stady_term_17 = __gmpz_get_si(__stady_gmp_26);
              __gmpz_clear(__stady_gmp_26);
              mpz_t __stady_gmp_27;
              __gmpz_init_set_si(__stady_gmp_27, *(s + __stady_term_17));
              mpz_t __stady_gmp_28;
              __gmpz_init_set_str(__stady_gmp_28, "1", 10);
              int __stady_term_18;
              __stady_term_18 = __gmpz_cmp(__stady_gmp_27, __stady_gmp_28);
              __gmpz_clear(__stady_gmp_27);
              __gmpz_clear(__stady_gmp_28);
              __stady_pred_7 = __stady_term_18 == 0;
            }
            __stady_pred_6 = __stady_pred_7;
            __gmpz_add_ui(__q_i, __q_i, 1);
            __stady_term_14 = __gmpz_cmp(__q_i, __stady_gmp_22);
          }
          __gmpz_clear(__q_i);
          __gmpz_clear(__stady_gmp_21);
          __gmpz_clear(__stady_gmp_22);
        }
        if(! __stady_pred_6) {
          pathcrawler_assert_exception("Loop invariant not preserved!", 5);
        }
        mpz_t __stady_gmp_36;
        __gmpz_init_set_si(__stady_gmp_36, n);
        mpz_t __stady_gmp_37;
        __gmpz_init_set_si(__stady_gmp_37, k);
        mpz_t __stady_gmp_38;
        __gmpz_init(__stady_gmp_38);
        __gmpz_sub(__stady_gmp_38, __stady_gmp_36, __stady_gmp_37);
        __gmpz_clear(__stady_gmp_36);
        __gmpz_clear(__stady_gmp_37);
        __stady_term_19 = __gmpz_cmp_ui(__stady_gmp_35, 0);
        if(__stady_term_19 < 0) {
          pathcrawler_assert_exception("Variant non positive", 0);
        }
        __stady_term_19 = __gmpz_cmp(__stady_gmp_38, __stady_gmp_35);
        if(__stady_term_19 >= 0) {
          pathcrawler_assert_exception("Variant non decreasing", 0);
        }
        __gmpz_clear(__stady_gmp_35);
        }
         __gmpz_clear(__stady_gmp_31);
      
    }
    {
      int __stady_pred_0;
      __stady_pred_0 = 1;
      {
        mpz_t __q_i;
        mpz_t __stady_gmp_0;
        __gmpz_init_set_str(__stady_gmp_0, "0", 10);
        mpz_t __stady_gmp_1;
        __gmpz_init_set_si(__stady_gmp_1, old_n);
        __gmpz_init_set(__q_i, __stady_gmp_0);
        int __stady_term_0;
        __stady_term_0 = __gmpz_cmp(__q_i, __stady_gmp_1);
        for(; __stady_term_0 < 0 && __stady_pred_0; ) {
          mpz_t __stady_gmp_2;
          __gmpz_init_set(__stady_gmp_2, __q_i);
          int __stady_term_1;
          __stady_term_1 = __gmpz_get_si(__stady_gmp_2);
          __gmpz_clear(__stady_gmp_2);
          mpz_t __stady_gmp_3;
          __gmpz_init_set_si(__stady_gmp_3, *(old_s + __stady_term_1));
          mpz_t __stady_gmp_4;
          __gmpz_init_set_str(__stady_gmp_4, "0", 10);
          int __stady_term_2;
          __stady_term_2 = __gmpz_cmp(__stady_gmp_3, __stady_gmp_4);
          __gmpz_clear(__stady_gmp_3);
          __gmpz_clear(__stady_gmp_4);
          int __stady_pred_1;
          __stady_pred_1 = __stady_term_2 == 0;
          if(__stady_pred_1) {
            
          }
          else {
            mpz_t __stady_gmp_5;
            __gmpz_init_set(__stady_gmp_5, __q_i);
            int __stady_term_3;
            __stady_term_3 = __gmpz_get_si(__stady_gmp_5);
            __gmpz_clear(__stady_gmp_5);
            mpz_t __stady_gmp_6;
            __gmpz_init_set_si(__stady_gmp_6, *(old_s + __stady_term_3));
            mpz_t __stady_gmp_7;
            __gmpz_init_set_str(__stady_gmp_7, "1", 10);
            int __stady_term_4;
            __stady_term_4 = __gmpz_cmp(__stady_gmp_6, __stady_gmp_7);
            __gmpz_clear(__stady_gmp_6);
            __gmpz_clear(__stady_gmp_7);
            __stady_pred_1 = __stady_term_4 == 0;
          }
          __stady_pred_0 = __stady_pred_1;
          __gmpz_add_ui(__q_i, __q_i, 1);
          __stady_term_0 = __gmpz_cmp(__q_i, __stady_gmp_1);
        }
        __gmpz_clear(__q_i);
        __gmpz_clear(__stady_gmp_0);
        __gmpz_clear(__stady_gmp_1);
      }
      if(! __stady_pred_0) {
        pathcrawler_assert_exception("Post-condition!", 6);
      }
    }
    free(old_ptr_s);
    return;
  }
}


[kernel] preprocessing with "gcc -C -E -I.  __sd_instru_first_subset_firstSubset.c"
[kernel] preprocessing with "gcc -C -E -I. -include /usr/local/share/frama-c/pc/lib/lanceur_deb.h __sd_instru_first_subset_firstSubset.c"
[pc] analyzing...
[pc] Compiling pathcrawler___sd_instru_first_subset_firstSubset/lanceur_firstSubset utilities ...
[pc] Compiling pathcrawler___sd_instru_first_subset_firstSubset/lanceur_firstSubset ...
[pc] generating tests...
[pc] Starting lanceur_firstSubset (isc version)
[pc] Starting lanceur_pathcrawler__firstSubset_precond (isc version)
[pc] generation finished
[stady] all-paths: true
[stady] 153 test cases
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'firstSubset'
--------------------------------------------------------------------------------

[  Valid  ] Post-condition (file tests/first_subset/first_subset.c, line 11)
            by StaDy.
[  Valid  ] Loop variant at loop (file tests/first_subset/first_subset.c, line 18)
            by StaDy.
[  Valid  ] Invariant (file tests/first_subset/first_subset.c, line 14)
            by StaDy.
[  Valid  ] Invariant (file tests/first_subset/first_subset.c, line 15)
            by StaDy.
[    -    ] Default behavior
            tried with Frama-C kernel.

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
     4 Completely validated
     1 To be validated
     5 Total
--------------------------------------------------------------------------------
