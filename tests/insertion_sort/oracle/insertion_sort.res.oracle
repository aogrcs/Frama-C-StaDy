[kernel] preprocessing with "gcc -C -E -I.  tests/insertion_sort/insertion_sort.c"
[stady:generated-pl] generated Prolog precondition:
:- module(test_parameters).
:- import create_input_val/3 from substitution.
:- export dom/4.
:- export create_input_vals/2.
:- export unquantif_preconds/2.
:- export quantif_preconds/2.
:- export strategy/2.
:- export precondition_of/2.

dom(0,0,0,0).
dom('insertion_sort', dim('t'), [], int([1..4294967295])).
dom('insertion_sort', cont('t',_), [], int([-2147483648..2147483647])).
dom('pathcrawler__insertion_sort_precond',A,B,C) :-
  dom('insertion_sort',A,B,C).
create_input_vals('insertion_sort', Ins):-
  create_input_val(dim('t'), int([1..4294967295]),Ins),
  create_input_val('n', int([1..3]),Ins),
  true.
create_input_vals('pathcrawler__insertion_sort_precond',Ins) :-
  create_input_vals('insertion_sort',Ins).
quantif_preconds('insertion_sort',
  [
  ]
).
quantif_preconds('pathcrawler__insertion_sort_precond',A) :-
  quantif_preconds('insertion_sort',A).
unquantif_preconds('insertion_sort',
  [
    cond(egal,dim('t'),+(int(math), -(int(math), 'n', 1), 1),pre)
  ]
).
unquantif_preconds('pathcrawler__insertion_sort_precond',A) :-
  unquantif_preconds('insertion_sort',A).
strategy('insertion_sort',[]).
strategy('pathcrawler__insertion_sort_precond',A) :-
  strategy('insertion_sort',A).
precondition_of('insertion_sort','pathcrawler__insertion_sort_precond').
[stady:generated-c] generated C file:
/* Generated by Frama-C */
extern int pathcrawler_assert_exception(char*,int);
extern int pathcrawler_dimension(void*);
extern void pathcrawler_to_framac(char*);
int insertion_sort_precond(int *t, int n)
{
return 1;
}

void insertion_sort(int *t, int n)
{
  int *old_t = t;
  int *old_ptr_t;
  old_ptr_t = malloc((n)*sizeof(int));
  int __stady_iter_0;
  for (__stady_iter_0 = 0; __stady_iter_0 < n; __stady_iter_0++) {
  old_ptr_t[__stady_iter_0] = t[__stady_iter_0];
  }
  int old_n = n;
  {
    int i;
    int j;
    int mv;
    i = 1;
    {
      if (((n - i)) < 0)pathcrawler_assert_exception("Variant non positive",1);int __stady_pred_0 = 1;
      {
      int __q_x;
      for (__q_x = 0; __q_x < (i - 1) &&  __stady_pred_0; __q_x++) {
      __stady_pred_0 = (*(t + __q_x) <= *(t + (__q_x + 1)));
      }
      }
      if(!__stady_pred_0)pathcrawler_assert_exception("Loop invariant not established!", 9);
      int __stady_pred_1 = (1 <= i);
      if (__stady_pred_1) {
      __stady_pred_1 = (i <= n);
      }
      if(!__stady_pred_1)pathcrawler_assert_exception("Loop invariant not established!", 5);
      while (1) {
        int old_variant_1 = (n - i);
        {
          if (! (i < n)) { pathcrawler_to_framac("@FC:REACHABLE_STMT:5");
                         break; }
                         
          mv = *(t + i);
          j = i;
          {
            if ((j) < 0)pathcrawler_assert_exception("Variant non positive",4);int __stady_pred_2 = 1;
            {
            int __q_k;
            for (__q_k = j; __q_k < i &&  __stady_pred_2; __q_k++) {
            __stady_pred_2 = (*(t + __q_k) > mv);
            }
            }
            if(!__stady_pred_2)pathcrawler_assert_exception("Loop invariant not established!", 11);
            int __stady_pred_3 = (0 <= j);
            if (__stady_pred_3) {
            __stady_pred_3 = (j <= i);
            }
            if(!__stady_pred_3)pathcrawler_assert_exception("Loop invariant not established!", 6);
            while (1) {
              int old_variant_4 = j;
              {
                if (! (j > 0)) { pathcrawler_to_framac("@FC:REACHABLE_STMT:12");
                               break; }
                               
                if (*(t + (j - 1)) <= mv) { pathcrawler_to_framac("@FC:REACHABLE_STMT:16");
                                          break; }
                                          
                *(t + j) = *(t + (j - 1));
                j --;
              }int __stady_pred_4 = (0 <= j);
              if (__stady_pred_4) {
              __stady_pred_4 = (j <= i);
              }
              if(!__stady_pred_4)pathcrawler_assert_exception("Loop invariant not preserved!", 6);
              int __stady_pred_5 = 1;
              {
              int __q_k;
              for (__q_k = j; __q_k < i &&  __stady_pred_5; __q_k++) {
              __stady_pred_5 = (*(t + __q_k) > mv);
              }
              }
              if(!__stady_pred_5)pathcrawler_assert_exception("Loop invariant not preserved!", 11);
              if ((old_variant_4) < 0)pathcrawler_assert_exception("Variant non positive",4);
              if ((j) >= old_variant_4)pathcrawler_assert_exception("Variant non decreasing",4);}
               }
             
          *(t + j) = mv;
          i ++;
        }int __stady_pred_6 = (1 <= i);
        if (__stady_pred_6) {
        __stady_pred_6 = (i <= n);
        }
        if(!__stady_pred_6)pathcrawler_assert_exception("Loop invariant not preserved!", 5);
        int __stady_pred_7 = 1;
        {
        int __q_x;
        for (__q_x = 0; __q_x < (i - 1) &&  __stady_pred_7; __q_x++) {
        __stady_pred_7 = (*(t + __q_x) <= *(t + (__q_x + 1)));
        }
        }
        if(!__stady_pred_7)pathcrawler_assert_exception("Loop invariant not preserved!", 9);
        if ((old_variant_1) < 0)pathcrawler_assert_exception("Variant non positive",1);
        if (((n - i)) >= old_variant_1)pathcrawler_assert_exception("Variant non decreasing",1);}
         }
       
    {
      int __stady_pred_8 = 1;
      {
      int __q_x;
      for (__q_x = 0; __q_x < (old_n - 1) &&  __stady_pred_8; __q_x++) {
      __stady_pred_8 = (*(old_t + __q_x) <= *(old_t + (__q_x + 1)));
      }
      }
      if(!__stady_pred_8)pathcrawler_assert_exception("Post-condition!", 10);
      
      }
    free(old_ptr_t);
    return;
  }
}


[kernel] preprocessing with "gcc -C -E -I.  stady_temp.c"
stady_temp.c:14:[kernel] warning: Calling undeclared function malloc. Old style K&R code?
stady_temp.c:119:[kernel] warning: Calling undeclared function free. Old style K&R code?
[kernel] preprocessing with "gcc -C -E -I. -include /usr/local/share/frama-c/pc/lib/lanceur_deb.h stady_temp.c"
stady_temp.c:14:[kernel] warning: Calling undeclared function malloc. Old style K&R code?
stady_temp.c:119:[kernel] warning: Calling undeclared function free. Old style K&R code?
[pc] analyzing...
[pc] Compiling pathcrawler_stady_temp/lanceur_insertion_sort utilities ...
[pc] Compiling pathcrawler_stady_temp/lanceur_insertion_sort ...
[pc] generating tests...
[pc] Starting lanceur_insertion_sort (isc version)
[pc] Starting lanceur_pathcrawler__insertion_sort_precond (isc version)
[pc] generation finished
[stady] all-paths: true
[stady] 343 test cases
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'insertion_sort'
--------------------------------------------------------------------------------

[  Valid  ] Post-condition (file tests/insertion_sort/insertion_sort.c, line 9)
            by StaDy.
[    -    ] Assigns (file tests/insertion_sort/insertion_sort.c, line 8)
[  Valid  ] Loop variant at loop (file tests/insertion_sort/insertion_sort.c, line 20)
            by StaDy.
[  Valid  ] Loop variant at loop (file tests/insertion_sort/insertion_sort.c, line 30)
            by StaDy.
[  Valid  ] Invariant (file tests/insertion_sort/insertion_sort.c, line 15)
            by StaDy.
[  Valid  ] Invariant (file tests/insertion_sort/insertion_sort.c, line 16)
            by StaDy.
[  Valid  ] Invariant (file tests/insertion_sort/insertion_sort.c, line 25)
            by StaDy.
[  Valid  ] Invariant (file tests/insertion_sort/insertion_sort.c, line 26)
            by StaDy.
[    -    ] Default behavior
            tried with Frama-C kernel.

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
     7 Completely validated
     2 To be validated
     9 Total
--------------------------------------------------------------------------------
