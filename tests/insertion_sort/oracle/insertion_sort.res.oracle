[kernel] preprocessing with "gcc -C -E -I.  tests/insertion_sort/insertion_sort.c"
[stady:generated-pl] generated Prolog precondition:
:- module(test_parameters).
:- import create_input_val/3 from substitution.
:- export dom/4.
:- export create_input_vals/2.
:- export unquantif_preconds/2.
:- export quantif_preconds/2.
:- export strategy/2.
:- export precondition_of/2.

dom(0,0,0,0).
dom('insertion_sort', dim('t'), [], int([1..4294967295])).
dom('insertion_sort', cont('t',_), [], int([-2147483648..2147483647])).
dom('pathcrawler__insertion_sort_precond',A,B,C) :-
  dom('insertion_sort',A,B,C).
create_input_vals('insertion_sort', Ins):-
  create_input_val(dim('t'), int([1..4294967295]),Ins),
  create_input_val('n', int([1..3]),Ins),
  true.
create_input_vals('pathcrawler__insertion_sort_precond',Ins) :-
  create_input_vals('insertion_sort',Ins).
quantif_preconds('insertion_sort',
  [
  ]
).
quantif_preconds('pathcrawler__insertion_sort_precond',A) :-
  quantif_preconds('insertion_sort',A).
unquantif_preconds('insertion_sort',
  [
    cond(egal,dim('t'),+(int(math), -(int(math), 'n', 1), 1),pre)
  ]
).
unquantif_preconds('pathcrawler__insertion_sort_precond',A) :-
  unquantif_preconds('insertion_sort',A).
strategy('insertion_sort',[]).
strategy('pathcrawler__insertion_sort_precond',A) :-
  strategy('insertion_sort',A).
precondition_of('insertion_sort','pathcrawler__insertion_sort_precond').
[stady:generated-c] generated C file:
/* Generated by Frama-C */
#include <gmp.h>
extern int pathcrawler_assert_exception(char*,int);
extern int pathcrawler_dimension(void*);
extern void pathcrawler_to_framac(char*);
extern void* malloc(unsigned);
extern void free(void*);
int insertion_sort_precond(int *t, int n)
{
return 1;
}

void insertion_sort(int *t, int n)
{
  int *old_t = t;
  int *old_ptr_t;
  mpz_t __stady_gmp_0;
  __gmpz_init_set_si(__stady_gmp_0, n);
  int __stady_iter_0;
  old_ptr_t = malloc(__gmpz_get_si(__stady_gmp_0)*sizeof(int));
  for (__stady_iter_0 = 0; __stady_iter_0 < __gmpz_get_si(__stady_gmp_0); __stady_iter_0++) {
  old_ptr_t[__stady_iter_0] = t[__stady_iter_0];
  }
  int old_n = n;
  {
    int i;
    int j;
    int mv;
    i = 1;
    {
      mpz_t __stady_gmp_1;
      __gmpz_init_set_si(__stady_gmp_1, n);
      mpz_t __stady_gmp_2;
      __gmpz_init_set_si(__stady_gmp_2, i);
      mpz_t __stady_gmp_3;
      __gmpz_init(__stady_gmp_3);
      __gmpz_sub(__stady_gmp_3, __stady_gmp_1, __stady_gmp_2);
      __gmpz_clear(__stady_gmp_1);
      __gmpz_clear(__stady_gmp_2);
      if (__gmpz_cmp_ui(__stady_gmp_3, 0) < 0)pathcrawler_assert_exception("Variant non positive",1);int __stady_pred_0 = 1;
      {
      mpz_t __q_x;
      mpz_t __stady_gmp_4;
      __gmpz_init_set_si(__stady_gmp_4, 0);
      mpz_t __stady_gmp_5;
      __gmpz_init_set_si(__stady_gmp_5, i);
      mpz_t __stady_gmp_6;
      __gmpz_init_set_si(__stady_gmp_6, 1);
      mpz_t __stady_gmp_7;
      __gmpz_init(__stady_gmp_7);
      __gmpz_sub(__stady_gmp_7, __stady_gmp_5, __stady_gmp_6);
      __gmpz_clear(__stady_gmp_5);
      __gmpz_clear(__stady_gmp_6);
      __gmpz_init_set(__q_x, __stady_gmp_4);
      for (; __gmpz_cmp(__q_x, __stady_gmp_7) < 0 &&  __stady_pred_0;) {
      mpz_t __stady_gmp_8;
      __gmpz_init_set(__stady_gmp_8, __q_x);
      mpz_t __stady_gmp_9;
      __gmpz_init_set(__stady_gmp_9, __q_x);
      mpz_t __stady_gmp_10;
      __gmpz_init_set_si(__stady_gmp_10, 1);
      mpz_t __stady_gmp_11;
      __gmpz_init(__stady_gmp_11);
      __gmpz_add(__stady_gmp_11, __stady_gmp_9, __stady_gmp_10);
      __gmpz_clear(__stady_gmp_9);
      __gmpz_clear(__stady_gmp_10);
      __stady_pred_0 = (*(t + __gmpz_get_si(__stady_gmp_8)) <= *(t + __gmpz_get_si(__stady_gmp_11)));
      __gmpz_add_ui(__q_x, __q_x, 1);
      }
      __gmpz_clear(__q_x);
      __gmpz_clear(__stady_gmp_4);
      __gmpz_clear(__stady_gmp_7);
      }
      if(!__stady_pred_0)pathcrawler_assert_exception("Loop invariant not established!", 9);
      mpz_t __stady_gmp_12;
      __gmpz_init_set_si(__stady_gmp_12, 1);
      mpz_t __stady_gmp_13;
      __gmpz_init_set_si(__stady_gmp_13, i);
      int __stady_pred_2 = __gmpz_cmp(__stady_gmp_12, __stady_gmp_13) <= 0;
      __gmpz_clear(__stady_gmp_12);
      __gmpz_clear(__stady_gmp_13);
      int __stady_pred_1 = __stady_pred_2;
      if (__stady_pred_1) {
      __stady_pred_1 = (i <= n);
      }
      if(!__stady_pred_1)pathcrawler_assert_exception("Loop invariant not established!", 5);
      while (1) {
        mpz_t __stady_gmp_14;
        __gmpz_init_set_si(__stady_gmp_14, n);
        mpz_t __stady_gmp_15;
        __gmpz_init_set_si(__stady_gmp_15, i);
        mpz_t __stady_gmp_16;
        __gmpz_init(__stady_gmp_16);
        __gmpz_sub(__stady_gmp_16, __stady_gmp_14, __stady_gmp_15);
        __gmpz_clear(__stady_gmp_14);
        __gmpz_clear(__stady_gmp_15);
        mpz_t old_variant_1;
        __gmpz_init_set(old_variant_1, __stady_gmp_16);
        {
          if (! (i < n)) { pathcrawler_to_framac("@FC:REACHABLE_STMT:5");
                         break; }
                         
          mv = *(t + i);
          j = i;
          {
            if ((j) < 0)pathcrawler_assert_exception("Variant non positive",4);int __stady_pred_3 = 1;
            {
            mpz_t __q_k;
            mpz_t __stady_gmp_17;
            __gmpz_init_set_si(__stady_gmp_17, j);
            mpz_t __stady_gmp_18;
            __gmpz_init_set_si(__stady_gmp_18, i);
            __gmpz_init_set(__q_k, __stady_gmp_17);
            for (; __gmpz_cmp(__q_k, __stady_gmp_18) < 0 &&  __stady_pred_3;) {
            mpz_t __stady_gmp_19;
            __gmpz_init_set(__stady_gmp_19, __q_k);
            __stady_pred_3 = (*(t + __gmpz_get_si(__stady_gmp_19)) > mv);
            __gmpz_add_ui(__q_k, __q_k, 1);
            }
            __gmpz_clear(__q_k);
            __gmpz_clear(__stady_gmp_17);
            __gmpz_clear(__stady_gmp_18);
            }
            if(!__stady_pred_3)pathcrawler_assert_exception("Loop invariant not established!", 11);
            mpz_t __stady_gmp_20;
            __gmpz_init_set_si(__stady_gmp_20, 0);
            mpz_t __stady_gmp_21;
            __gmpz_init_set_si(__stady_gmp_21, j);
            int __stady_pred_5 = __gmpz_cmp(__stady_gmp_20, __stady_gmp_21) <= 0;
            __gmpz_clear(__stady_gmp_20);
            __gmpz_clear(__stady_gmp_21);
            int __stady_pred_4 = __stady_pred_5;
            if (__stady_pred_4) {
            __stady_pred_4 = (j <= i);
            }
            if(!__stady_pred_4)pathcrawler_assert_exception("Loop invariant not established!", 6);
            while (1) {
              int old_variant_4 = j;
              {
                if (! (j > 0)) { pathcrawler_to_framac("@FC:REACHABLE_STMT:12");
                               break; }
                               
                if (*(t + (j - 1)) <= mv) { pathcrawler_to_framac("@FC:REACHABLE_STMT:16");
                                          break; }
                                          
                *(t + j) = *(t + (j - 1));
                j --;
              }mpz_t __stady_gmp_22;
              __gmpz_init_set_si(__stady_gmp_22, 0);
              mpz_t __stady_gmp_23;
              __gmpz_init_set_si(__stady_gmp_23, j);
              int __stady_pred_7 = __gmpz_cmp(__stady_gmp_22, __stady_gmp_23) <= 0;
              __gmpz_clear(__stady_gmp_22);
              __gmpz_clear(__stady_gmp_23);
              int __stady_pred_6 = __stady_pred_7;
              if (__stady_pred_6) {
              __stady_pred_6 = (j <= i);
              }
              if(!__stady_pred_6)pathcrawler_assert_exception("Loop invariant not preserved!", 6);
              int __stady_pred_8 = 1;
              {
              mpz_t __q_k;
              mpz_t __stady_gmp_24;
              __gmpz_init_set_si(__stady_gmp_24, j);
              mpz_t __stady_gmp_25;
              __gmpz_init_set_si(__stady_gmp_25, i);
              __gmpz_init_set(__q_k, __stady_gmp_24);
              for (; __gmpz_cmp(__q_k, __stady_gmp_25) < 0 &&  __stady_pred_8;) {
              mpz_t __stady_gmp_26;
              __gmpz_init_set(__stady_gmp_26, __q_k);
              __stady_pred_8 = (*(t + __gmpz_get_si(__stady_gmp_26)) > mv);
              __gmpz_add_ui(__q_k, __q_k, 1);
              }
              __gmpz_clear(__q_k);
              __gmpz_clear(__stady_gmp_24);
              __gmpz_clear(__stady_gmp_25);
              }
              if(!__stady_pred_8)pathcrawler_assert_exception("Loop invariant not preserved!", 11);
              if ((old_variant_4) < 0)pathcrawler_assert_exception("Variant non positive",4);
              if ((j) >= old_variant_4)pathcrawler_assert_exception("Variant non decreasing",4);}
               }
             
          *(t + j) = mv;
          i ++;
        }mpz_t __stady_gmp_27;
        __gmpz_init_set_si(__stady_gmp_27, 1);
        mpz_t __stady_gmp_28;
        __gmpz_init_set_si(__stady_gmp_28, i);
        int __stady_pred_10 = __gmpz_cmp(__stady_gmp_27, __stady_gmp_28) <= 0;
        __gmpz_clear(__stady_gmp_27);
        __gmpz_clear(__stady_gmp_28);
        int __stady_pred_9 = __stady_pred_10;
        if (__stady_pred_9) {
        __stady_pred_9 = (i <= n);
        }
        if(!__stady_pred_9)pathcrawler_assert_exception("Loop invariant not preserved!", 5);
        int __stady_pred_11 = 1;
        {
        mpz_t __q_x;
        mpz_t __stady_gmp_29;
        __gmpz_init_set_si(__stady_gmp_29, 0);
        mpz_t __stady_gmp_30;
        __gmpz_init_set_si(__stady_gmp_30, i);
        mpz_t __stady_gmp_31;
        __gmpz_init_set_si(__stady_gmp_31, 1);
        mpz_t __stady_gmp_32;
        __gmpz_init(__stady_gmp_32);
        __gmpz_sub(__stady_gmp_32, __stady_gmp_30, __stady_gmp_31);
        __gmpz_clear(__stady_gmp_30);
        __gmpz_clear(__stady_gmp_31);
        __gmpz_init_set(__q_x, __stady_gmp_29);
        for (; __gmpz_cmp(__q_x, __stady_gmp_32) < 0 &&  __stady_pred_11;) {
        mpz_t __stady_gmp_33;
        __gmpz_init_set(__stady_gmp_33, __q_x);
        mpz_t __stady_gmp_34;
        __gmpz_init_set(__stady_gmp_34, __q_x);
        mpz_t __stady_gmp_35;
        __gmpz_init_set_si(__stady_gmp_35, 1);
        mpz_t __stady_gmp_36;
        __gmpz_init(__stady_gmp_36);
        __gmpz_add(__stady_gmp_36, __stady_gmp_34, __stady_gmp_35);
        __gmpz_clear(__stady_gmp_34);
        __gmpz_clear(__stady_gmp_35);
        __stady_pred_11 = (*(t + __gmpz_get_si(__stady_gmp_33)) <= *(t + __gmpz_get_si(__stady_gmp_36)));
        __gmpz_add_ui(__q_x, __q_x, 1);
        }
        __gmpz_clear(__q_x);
        __gmpz_clear(__stady_gmp_29);
        __gmpz_clear(__stady_gmp_32);
        }
        if(!__stady_pred_11)pathcrawler_assert_exception("Loop invariant not preserved!", 9);
        mpz_t __stady_gmp_37;
        __gmpz_init_set_si(__stady_gmp_37, n);
        mpz_t __stady_gmp_38;
        __gmpz_init_set_si(__stady_gmp_38, i);
        mpz_t __stady_gmp_39;
        __gmpz_init(__stady_gmp_39);
        __gmpz_sub(__stady_gmp_39, __stady_gmp_37, __stady_gmp_38);
        __gmpz_clear(__stady_gmp_37);
        __gmpz_clear(__stady_gmp_38);
        if (__gmpz_cmp_ui(old_variant_1,0) < 0)pathcrawler_assert_exception("Variant non positive",1);
        if (__gmpz_cmp(__stady_gmp_39, old_variant_1) >= 0)pathcrawler_assert_exception("Variant non decreasing",1);__gmpz_clear(old_variant_1);
        }
         __gmpz_clear(__stady_gmp_3);
      }
       
    {
      int __stady_pred_12 = 1;
      {
      mpz_t __q_x;
      mpz_t __stady_gmp_40;
      __gmpz_init_set_si(__stady_gmp_40, 0);
      mpz_t __stady_gmp_41;
      __gmpz_init_set_si(__stady_gmp_41, old_n);
      mpz_t __stady_gmp_42;
      __gmpz_init_set_si(__stady_gmp_42, 1);
      mpz_t __stady_gmp_43;
      __gmpz_init(__stady_gmp_43);
      __gmpz_sub(__stady_gmp_43, __stady_gmp_41, __stady_gmp_42);
      __gmpz_clear(__stady_gmp_41);
      __gmpz_clear(__stady_gmp_42);
      __gmpz_init_set(__q_x, __stady_gmp_40);
      for (; __gmpz_cmp(__q_x, __stady_gmp_43) < 0 &&  __stady_pred_12;) {
      mpz_t __stady_gmp_44;
      __gmpz_init_set(__stady_gmp_44, __q_x);
      mpz_t __stady_gmp_45;
      __gmpz_init_set(__stady_gmp_45, __q_x);
      mpz_t __stady_gmp_46;
      __gmpz_init_set_si(__stady_gmp_46, 1);
      mpz_t __stady_gmp_47;
      __gmpz_init(__stady_gmp_47);
      __gmpz_add(__stady_gmp_47, __stady_gmp_45, __stady_gmp_46);
      __gmpz_clear(__stady_gmp_45);
      __gmpz_clear(__stady_gmp_46);
      __stady_pred_12 = (*(old_t + __gmpz_get_si(__stady_gmp_44)) <= *(old_t + __gmpz_get_si(__stady_gmp_47)));
      __gmpz_add_ui(__q_x, __q_x, 1);
      }
      __gmpz_clear(__q_x);
      __gmpz_clear(__stady_gmp_40);
      __gmpz_clear(__stady_gmp_43);
      }
      if(!__stady_pred_12)pathcrawler_assert_exception("Post-condition!", 10);
      
      }
    free(old_ptr_t);
    return;
  }
}


[kernel] preprocessing with "gcc -C -E -I.  stady_temp.c"
[kernel] preprocessing with "gcc -C -E -I. -include /usr/local/share/frama-c/pc/lib/lanceur_deb.h stady_temp.c"
[pc] analyzing...
[pc] Compiling pathcrawler_stady_temp/lanceur_insertion_sort utilities ...
[pc] Compiling pathcrawler_stady_temp/lanceur_insertion_sort ...
[pc] generating tests...
[pc] Starting lanceur_insertion_sort (isc version)
[pc] Starting lanceur_pathcrawler__insertion_sort_precond (isc version)
[pc] generation finished
[stady] all-paths: true
[stady] 343 test cases
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'insertion_sort'
--------------------------------------------------------------------------------

[  Valid  ] Post-condition (file tests/insertion_sort/insertion_sort.c, line 9)
            by StaDy.
[    -    ] Assigns (file tests/insertion_sort/insertion_sort.c, line 8)
[  Valid  ] Loop variant at loop (file tests/insertion_sort/insertion_sort.c, line 20)
            by StaDy.
[  Valid  ] Loop variant at loop (file tests/insertion_sort/insertion_sort.c, line 30)
            by StaDy.
[  Valid  ] Invariant (file tests/insertion_sort/insertion_sort.c, line 15)
            by StaDy.
[  Valid  ] Invariant (file tests/insertion_sort/insertion_sort.c, line 16)
            by StaDy.
[  Valid  ] Invariant (file tests/insertion_sort/insertion_sort.c, line 25)
            by StaDy.
[  Valid  ] Invariant (file tests/insertion_sort/insertion_sort.c, line 26)
            by StaDy.
[    -    ] Default behavior
            tried with Frama-C kernel.

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
     7 Completely validated
     2 To be validated
     9 Total
--------------------------------------------------------------------------------
