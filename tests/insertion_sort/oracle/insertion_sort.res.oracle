[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing tests/insertion_sort/insertion_sort.c (with preprocessing)
[stady:generated-pl] generated Prolog precondition:
:- module(test_parameters).
:- import create_input_val/3 from substitution.
:- export dom/4.
:- export create_input_vals/2.
:- export unquantif_preconds/2.
:- export quantif_preconds/2.
:- export strategy/2.
:- export precondition_of/2.

dom(0,0,0,0).
dom('insertion_sort', dim('t'), [], int([0..4294967295])).
dom('insertion_sort', cont('t',_), [], int([-2147483648..2147483647])).
dom('pathcrawler__insertion_sort_precond',A,B,C) :-
  dom('insertion_sort',A,B,C).
create_input_vals('insertion_sort', Ins):-
  create_input_val('n', int([1..3]),Ins),
  create_input_val(dim('t'), int([0..4294967295]),Ins),
  true.
create_input_vals('pathcrawler__insertion_sort_precond',Ins) :-
  create_input_vals('insertion_sort',Ins).
quantif_preconds('insertion_sort',
  [

  ]
).
quantif_preconds('pathcrawler__insertion_sort_precond',A) :-
  quantif_preconds('insertion_sort',A).
unquantif_preconds('insertion_sort',
  [
    cond(egal,dim('t'),+(int(math), -(int(math), 'n', 1), 1),pre)
  ]
).
unquantif_preconds('pathcrawler__insertion_sort_precond',A) :-
  unquantif_preconds('insertion_sort',A).
strategy('insertion_sort',[]).
strategy('pathcrawler__insertion_sort_precond',A) :-
  strategy('insertion_sort',A).
precondition_of('insertion_sort','pathcrawler__insertion_sort_precond').
[stady:generated-c] generated C file:
/* Generated by Frama-C */
struct __anonstruct___mpz_struct_1 {int _mp_alloc ;int _mp_size ;unsigned long *_mp_d ;};typedef struct __anonstruct___mpz_struct_1 __mpz_struct;typedef __mpz_struct mpz_t[1];
extern unsigned long int __gmpz_get_ui(mpz_t);
extern signed long int __gmpz_get_si(mpz_t);
extern int __gmpz_cmp_ui(mpz_t, unsigned long int);
extern int __gmpz_cmp(mpz_t, mpz_t);
extern void __gmpz_clear(mpz_t);
extern void __gmpz_init(mpz_t);
extern void __gmpz_init_set(mpz_t, mpz_t);
extern void __gmpz_init_set_si(mpz_t, signed long int);
extern void __gmpz_init_set_str(mpz_t, const char*, int);
extern void __gmpz_add(mpz_t, const mpz_t, const mpz_t);
extern void __gmpz_add_ui(mpz_t, const mpz_t, unsigned long int);
extern void __gmpz_sub(mpz_t, const mpz_t, const mpz_t);
extern int pathcrawler_assert_exception(char*,int);
extern void* malloc(unsigned long);
extern void free(void*);
int insertion_sort_precond(int *t, int n)
{
  return 1;
}

/*@ requires 1 <= n <= 3;
    requires \valid(t+(0 .. n-1));
    ensures
      \forall integer x;
        0 <= x < \old(n)-1 ==> *(\old(t)+x) <= *(\old(t)+(x+1));
    assigns *(t+(0 .. n-1));
 */
void insertion_sort(int *t, int n)
{
  int *old_t;
  int *old_ptr_t;
  old_t = t;
  mpz_t __stady_gmp_8;
  __gmpz_init_set_si(__stady_gmp_8,n);
  unsigned long __stady_term_3;
  __stady_term_3 = __gmpz_get_ui(__stady_gmp_8);
  __gmpz_clear(__stady_gmp_8);
  unsigned long __stady_term_4;
  old_ptr_t = (int *)malloc(__stady_term_3 * (unsigned long)sizeof(int));
  __stady_term_4 = 0;
  while(__stady_term_4 < __stady_term_3) {
    *(old_ptr_t + __stady_term_4) = *(t + __stady_term_4);
    __stady_term_4 ++;
  }
  int old_n;
  old_n = n;
  {
    int i;
    int j;
    int mv;
    i = 1;
    {
      mpz_t __stady_gmp_19;
      __gmpz_init_set_str(__stady_gmp_19,"1",10);
      mpz_t __stady_gmp_20;
      __gmpz_init_set_si(__stady_gmp_20,i);
      int __stady_term_12;
      __stady_term_12 = __gmpz_cmp(__stady_gmp_19,__stady_gmp_20);
      __gmpz_clear(__stady_gmp_19);
      __gmpz_clear(__stady_gmp_20);
      int __stady_pred_5;
      __stady_pred_5 = __stady_term_12 <= 0;
      if(__stady_pred_5) {
        __stady_pred_5 = i <= n;
      }
      if(! __stady_pred_5) {
        pathcrawler_assert_exception("not established",3);
      }
      int __stady_pred_7;
      __stady_pred_7 = 1;
      {
        mpz_t __q_x;
        mpz_t __stady_gmp_23;
        __gmpz_init_set_str(__stady_gmp_23,"0",10);
        mpz_t __stady_gmp_24;
        __gmpz_init_set_si(__stady_gmp_24,i);
        mpz_t __stady_gmp_25;
        __gmpz_init_set_str(__stady_gmp_25,"1",10);
        mpz_t __stady_gmp_26;
        __gmpz_init(__stady_gmp_26);
        __gmpz_sub(__stady_gmp_26,__stady_gmp_24,__stady_gmp_25);
        __gmpz_clear(__stady_gmp_24);
        __gmpz_clear(__stady_gmp_25);
        __gmpz_init_set(__q_x,__stady_gmp_23);
        int __stady_term_14;
        __stady_term_14 = __gmpz_cmp(__q_x,__stady_gmp_26);
        while(__stady_term_14 < 0 && __stady_pred_7) {
          mpz_t __stady_gmp_27;
          __gmpz_init_set(__stady_gmp_27,__q_x);
          int __stady_term_15;
          __stady_term_15 = (int)__gmpz_get_si(__stady_gmp_27);
          __gmpz_clear(__stady_gmp_27);
          mpz_t __stady_gmp_28;
          __gmpz_init_set(__stady_gmp_28,__q_x);
          mpz_t __stady_gmp_29;
          __gmpz_init_set_str(__stady_gmp_29,"1",10);
          mpz_t __stady_gmp_30;
          __gmpz_init(__stady_gmp_30);
          __gmpz_add(__stady_gmp_30,__stady_gmp_28,__stady_gmp_29);
          __gmpz_clear(__stady_gmp_28);
          __gmpz_clear(__stady_gmp_29);
          int __stady_term_16;
          __stady_term_16 = (int)__gmpz_get_si(__stady_gmp_30);
          __gmpz_clear(__stady_gmp_30);
          __stady_pred_7 = *(t + __stady_term_15) <= *(t + __stady_term_16);
          __gmpz_add_ui(__q_x,__q_x,1);
          __stady_term_14 = __gmpz_cmp(__q_x,__stady_gmp_26);
        }
        __gmpz_clear(__q_x);
        __gmpz_clear(__stady_gmp_23);
        __gmpz_clear(__stady_gmp_26);
      }
      if(! __stady_pred_7) {
        pathcrawler_assert_exception("not established",12);
      }
      while (1) {
        if (! (i < n)) break;mpz_t __stady_gmp_39;
        __gmpz_init_set_si(__stady_gmp_39,n);
        mpz_t __stady_gmp_40;
        __gmpz_init_set_si(__stady_gmp_40,i);
        mpz_t __stady_gmp_41;
        __gmpz_init(__stady_gmp_41);
        __gmpz_sub(__stady_gmp_41,__stady_gmp_39,__stady_gmp_40);
        __gmpz_clear(__stady_gmp_39);
        __gmpz_clear(__stady_gmp_40);
        int __stady_term_20;
        __stady_term_20 = __gmpz_cmp_ui(__stady_gmp_41,0);
        if(__stady_term_20 < 0) {
          pathcrawler_assert_exception("non positive",6);
        }
        mpz_t __stady_gmp_42;
        __gmpz_init_set(__stady_gmp_42,__stady_gmp_41);
        mv = *(t + i);
        j = i;
        {
          mpz_t __stady_gmp_9;
          __gmpz_init_set_str(__stady_gmp_9,"0",10);
          mpz_t __stady_gmp_10;
          __gmpz_init_set_si(__stady_gmp_10,j);
          int __stady_term_5;
          __stady_term_5 = __gmpz_cmp(__stady_gmp_9,__stady_gmp_10);
          __gmpz_clear(__stady_gmp_9);
          __gmpz_clear(__stady_gmp_10);
          int __stady_pred_1;
          __stady_pred_1 = __stady_term_5 <= 0;
          if(__stady_pred_1) {
            __stady_pred_1 = j <= i;
          }
          if(! __stady_pred_1) {
            pathcrawler_assert_exception("not established",7);
          }
          int __stady_pred_3;
          __stady_pred_3 = 1;
          {
            mpz_t __q_k;
            mpz_t __stady_gmp_13;
            __gmpz_init_set_si(__stady_gmp_13,j);
            mpz_t __stady_gmp_14;
            __gmpz_init_set_si(__stady_gmp_14,i);
            __gmpz_init_set(__q_k,__stady_gmp_13);
            int __stady_term_7;
            __stady_term_7 = __gmpz_cmp(__q_k,__stady_gmp_14);
            while(__stady_term_7 < 0 && __stady_pred_3) {
              mpz_t __stady_gmp_15;
              __gmpz_init_set(__stady_gmp_15,__q_k);
              int __stady_term_8;
              __stady_term_8 = (int)__gmpz_get_si(__stady_gmp_15);
              __gmpz_clear(__stady_gmp_15);
              __stady_pred_3 = *(t + __stady_term_8) > mv;
              __gmpz_add_ui(__q_k,__q_k,1);
              __stady_term_7 = __gmpz_cmp(__q_k,__stady_gmp_14);
            }
            __gmpz_clear(__q_k);
            __gmpz_clear(__stady_gmp_13);
            __gmpz_clear(__stady_gmp_14);
          }
          if(! __stady_pred_3) {
            pathcrawler_assert_exception("not established",8);
          }
          while (1) {
            if (! (j > 0)) break;if(j < 0) {
                                   pathcrawler_assert_exception("non positive",
                                                                0);
            }
            int __stady_term_11;
            __stady_term_11 = j;
            if (*(t + (j - 1)) <= mv) break;
            *(t + j) = *(t + (j - 1));
            j --;mpz_t __stady_gmp_11;
            __gmpz_init_set_str(__stady_gmp_11,"0",10);
            mpz_t __stady_gmp_12;
            __gmpz_init_set_si(__stady_gmp_12,j);
            int __stady_term_6;
            __stady_term_6 = __gmpz_cmp(__stady_gmp_11,__stady_gmp_12);
            __gmpz_clear(__stady_gmp_11);
            __gmpz_clear(__stady_gmp_12);
            int __stady_pred_2;
            __stady_pred_2 = __stady_term_6 <= 0;
            if(__stady_pred_2) {
              __stady_pred_2 = j <= i;
            }
            if(! __stady_pred_2) {
              pathcrawler_assert_exception("not preserved",7);
            }
            int __stady_pred_4;
            __stady_pred_4 = 1;
            {
              mpz_t __q_k;
              mpz_t __stady_gmp_16;
              __gmpz_init_set_si(__stady_gmp_16,j);
              mpz_t __stady_gmp_17;
              __gmpz_init_set_si(__stady_gmp_17,i);
              __gmpz_init_set(__q_k,__stady_gmp_16);
              int __stady_term_9;
              __stady_term_9 = __gmpz_cmp(__q_k,__stady_gmp_17);
              while(__stady_term_9 < 0 && __stady_pred_4) {
                mpz_t __stady_gmp_18;
                __gmpz_init_set(__stady_gmp_18,__q_k);
                int __stady_term_10;
                __stady_term_10 = (int)__gmpz_get_si(__stady_gmp_18);
                __gmpz_clear(__stady_gmp_18);
                __stady_pred_4 = *(t + __stady_term_10) > mv;
                __gmpz_add_ui(__q_k,__q_k,1);
                __stady_term_9 = __gmpz_cmp(__q_k,__stady_gmp_17);
              }
              __gmpz_clear(__q_k);
              __gmpz_clear(__stady_gmp_16);
              __gmpz_clear(__stady_gmp_17);
            }
            if(! __stady_pred_4) {
              pathcrawler_assert_exception("not preserved",8);
            }
            if(j >= __stady_term_11) {
              pathcrawler_assert_exception("non decreasing",0);
            }
            }
             
        }
        *(t + j) = mv;
        i ++;mpz_t __stady_gmp_21;
        __gmpz_init_set_str(__stady_gmp_21,"1",10);
        mpz_t __stady_gmp_22;
        __gmpz_init_set_si(__stady_gmp_22,i);
        int __stady_term_13;
        __stady_term_13 = __gmpz_cmp(__stady_gmp_21,__stady_gmp_22);
        __gmpz_clear(__stady_gmp_21);
        __gmpz_clear(__stady_gmp_22);
        int __stady_pred_6;
        __stady_pred_6 = __stady_term_13 <= 0;
        if(__stady_pred_6) {
          __stady_pred_6 = i <= n;
        }
        if(! __stady_pred_6) {
          pathcrawler_assert_exception("not preserved",3);
        }
        int __stady_pred_8;
        __stady_pred_8 = 1;
        {
          mpz_t __q_x;
          mpz_t __stady_gmp_31;
          __gmpz_init_set_str(__stady_gmp_31,"0",10);
          mpz_t __stady_gmp_32;
          __gmpz_init_set_si(__stady_gmp_32,i);
          mpz_t __stady_gmp_33;
          __gmpz_init_set_str(__stady_gmp_33,"1",10);
          mpz_t __stady_gmp_34;
          __gmpz_init(__stady_gmp_34);
          __gmpz_sub(__stady_gmp_34,__stady_gmp_32,__stady_gmp_33);
          __gmpz_clear(__stady_gmp_32);
          __gmpz_clear(__stady_gmp_33);
          __gmpz_init_set(__q_x,__stady_gmp_31);
          int __stady_term_17;
          __stady_term_17 = __gmpz_cmp(__q_x,__stady_gmp_34);
          while(__stady_term_17 < 0 && __stady_pred_8) {
            mpz_t __stady_gmp_35;
            __gmpz_init_set(__stady_gmp_35,__q_x);
            int __stady_term_18;
            __stady_term_18 = (int)__gmpz_get_si(__stady_gmp_35);
            __gmpz_clear(__stady_gmp_35);
            mpz_t __stady_gmp_36;
            __gmpz_init_set(__stady_gmp_36,__q_x);
            mpz_t __stady_gmp_37;
            __gmpz_init_set_str(__stady_gmp_37,"1",10);
            mpz_t __stady_gmp_38;
            __gmpz_init(__stady_gmp_38);
            __gmpz_add(__stady_gmp_38,__stady_gmp_36,__stady_gmp_37);
            __gmpz_clear(__stady_gmp_36);
            __gmpz_clear(__stady_gmp_37);
            int __stady_term_19;
            __stady_term_19 = (int)__gmpz_get_si(__stady_gmp_38);
            __gmpz_clear(__stady_gmp_38);
            __stady_pred_8 = *(t + __stady_term_18) <= *(t + __stady_term_19);
            __gmpz_add_ui(__q_x,__q_x,1);
            __stady_term_17 = __gmpz_cmp(__q_x,__stady_gmp_34);
          }
          __gmpz_clear(__q_x);
          __gmpz_clear(__stady_gmp_31);
          __gmpz_clear(__stady_gmp_34);
        }
        if(! __stady_pred_8) {
          pathcrawler_assert_exception("not preserved",12);
        }
        mpz_t __stady_gmp_43;
        __gmpz_init_set_si(__stady_gmp_43,n);
        mpz_t __stady_gmp_44;
        __gmpz_init_set_si(__stady_gmp_44,i);
        mpz_t __stady_gmp_45;
        __gmpz_init(__stady_gmp_45);
        __gmpz_sub(__stady_gmp_45,__stady_gmp_43,__stady_gmp_44);
        __gmpz_clear(__stady_gmp_43);
        __gmpz_clear(__stady_gmp_44);
        int __stady_term_21;
        __stady_term_21 = __gmpz_cmp(__stady_gmp_45,__stady_gmp_42);
        if(__stady_term_21 >= 0) {
          pathcrawler_assert_exception("non decreasing",6);
        }
        __gmpz_clear(__stady_gmp_42);
        }
         
    }
    {
      int __stady_pred_0;
      __stady_pred_0 = 1;
      {
        mpz_t __q_x;
        mpz_t __stady_gmp_0;
        __gmpz_init_set_str(__stady_gmp_0,"0",10);
        mpz_t __stady_gmp_1;
        __gmpz_init_set_si(__stady_gmp_1,old_n);
        mpz_t __stady_gmp_2;
        __gmpz_init_set_str(__stady_gmp_2,"1",10);
        mpz_t __stady_gmp_3;
        __gmpz_init(__stady_gmp_3);
        __gmpz_sub(__stady_gmp_3,__stady_gmp_1,__stady_gmp_2);
        __gmpz_clear(__stady_gmp_1);
        __gmpz_clear(__stady_gmp_2);
        __gmpz_init_set(__q_x,__stady_gmp_0);
        int __stady_term_0;
        __stady_term_0 = __gmpz_cmp(__q_x,__stady_gmp_3);
        while(__stady_term_0 < 0 && __stady_pred_0) {
          mpz_t __stady_gmp_4;
          __gmpz_init_set(__stady_gmp_4,__q_x);
          int __stady_term_1;
          __stady_term_1 = (int)__gmpz_get_si(__stady_gmp_4);
          __gmpz_clear(__stady_gmp_4);
          mpz_t __stady_gmp_5;
          __gmpz_init_set(__stady_gmp_5,__q_x);
          mpz_t __stady_gmp_6;
          __gmpz_init_set_str(__stady_gmp_6,"1",10);
          mpz_t __stady_gmp_7;
          __gmpz_init(__stady_gmp_7);
          __gmpz_add(__stady_gmp_7,__stady_gmp_5,__stady_gmp_6);
          __gmpz_clear(__stady_gmp_5);
          __gmpz_clear(__stady_gmp_6);
          int __stady_term_2;
          __stady_term_2 = (int)__gmpz_get_si(__stady_gmp_7);
          __gmpz_clear(__stady_gmp_7);
          __stady_pred_0 = *(old_t + __stady_term_1) <= *(old_t + __stady_term_2);
          __gmpz_add_ui(__q_x,__q_x,1);
          __stady_term_0 = __gmpz_cmp(__q_x,__stady_gmp_3);
        }
        __gmpz_clear(__q_x);
        __gmpz_clear(__stady_gmp_0);
        __gmpz_clear(__stady_gmp_3);
      }
      if(! __stady_pred_0) {
        pathcrawler_assert_exception("",9);
      }
    }
    free(old_ptr_t);
    return;
  }
}


[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing __sd_instru_insertion_sort_insertion_sort.c (with preprocessing)
[kernel] Parsing FRAMAC_SHARE/libc/__fc_builtin_for_normalization.i (no preprocessing)
[kernel] Parsing __sd_instru_insertion_sort_insertion_sort.c (with preprocessing)
[pc] analyzing...
[pc] Compiling pathcrawler___sd_instru_insertion_sort_insertion_sort/lanceur_insertion_sort utilities ...
[pc] Compiling pathcrawler___sd_instru_insertion_sort_insertion_sort/lanceur_insertion_sort ...
[pc] generating tests...
[pc] Starting lanceur_insertion_sort (isc version)
[pc] Starting lanceur_pathcrawler__insertion_sort_precond (isc version)
[pc] generation finished
[stady] all-paths: true
[stady] 330 test cases
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'insertion_sort'
--------------------------------------------------------------------------------

[  Valid  ] Post-condition (file tests/insertion_sort/insertion_sort.c, line 9)
            by StaDy.
[  Valid  ] Loop variant at loop (file tests/insertion_sort/insertion_sort.c, line 20)
            by StaDy.
[  Valid  ] Loop variant at loop (file tests/insertion_sort/insertion_sort.c, line 30)
            by StaDy.
[  Valid  ] Invariant (file tests/insertion_sort/insertion_sort.c, line 15)
            by StaDy.
[  Valid  ] Invariant (file tests/insertion_sort/insertion_sort.c, line 16)
            by StaDy.
[  Valid  ] Invariant (file tests/insertion_sort/insertion_sort.c, line 25)
            by StaDy.
[  Valid  ] Invariant (file tests/insertion_sort/insertion_sort.c, line 26)
            by StaDy.
[    -    ] Default behavior
            tried with Frama-C kernel.

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
     7 Completely validated
     1 To be validated
     8 Total
--------------------------------------------------------------------------------
