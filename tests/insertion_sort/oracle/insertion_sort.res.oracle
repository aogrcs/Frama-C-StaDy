[kernel] preprocessing with "gcc -C -E -I.  tests/insertion_sort/insertion_sort.c"
[stady:generated-pl] :- module(test_parameters).
                     :- import create_input_val/3 from substitution.
                     :- export dom/4.
                     :- export create_input_vals/2.
                     :- export unquantif_preconds/2.
                     :- export quantif_preconds/2.
                     :- export strategy/2.
                     :- export precondition_of/2.
                     
                     dom(0,0,0,0).
[stady:generated-pl] dom('insertion_sort', cont('t',_), [], int([-2147483648..2147483647])).
[stady:generated-pl] dom('pathcrawler__insertion_sort_precond',A,B,C) :- dom('insertion_sort',A,B,C).
[stady:generated-pl] create_input_vals('insertion_sort', Ins):-
[stady:generated-pl] create_input_val(dim('t'), int([1..4294967295]),Ins),
[stady:generated-pl] create_input_val('n', int([-2147483648..2147483647]),Ins),
[stady:generated-pl] true.
[stady:generated-pl] create_input_vals('pathcrawler__insertion_sort_precond',Ins) :- create_input_vals('insertion_sort',Ins).
[stady:generated-pl] quantif_preconds('insertion_sort',[]).
[stady:generated-pl] quantif_preconds('pathcrawler__insertion_sort_precond',A) :- quantif_preconds('insertion_sort',A).
[stady:generated-pl] unquantif_preconds('insertion_sort',[cond(egal,dim('t'),+(int(math), -(int(math), 'n', 1), 1),pre), cond(infegal,'n',3,pre), cond(infegal,1,'n',pre)]).
[stady:generated-pl] unquantif_preconds('pathcrawler__insertion_sort_precond',A) :- unquantif_preconds('insertion_sort',A).
[stady:generated-pl] strategy('insertion_sort',[]).
[stady:generated-pl] strategy('pathcrawler__insertion_sort_precond',A) :- strategy('insertion_sort',A).
[stady:generated-pl] precondition_of('insertion_sort','pathcrawler__insertion_sort_precond').
[stady:generated-c] /* Generated by Frama-C */
                    int insertion_sort_precond(int *t, int n)
                    {
                    if (!((1 <= (n)) && ((n) <= 3))) return 0;if (!((n-1) >= 0 && (pathcrawler_dimension((t)) > (n-1)))) return 0;return 1;
                    }
                    
                    void insertion_sort(int *t, int n)
                    {
                      int *old_t = t;
                      int *old_ptr_t;
                      old_ptr_t = malloc(((n-1)+1)*sizeof(int));
                      int __stady_iter_0;
                      for (__stady_iter_0 = 0; __stady_iter_0 < (n-1)+1; __stady_iter_0++) {
                      old_ptr_t[__stady_iter_0] = t[__stady_iter_0];
                      }
                      int old_n = n;
                      {
                        int i;
                        int j;
                        int mv;
                        i = 1;
                        {
                           if((n-i)<0)pathcrawler_assert_exception("Variant non positive",0);
                           int __stady_pred_5 = 1;
                           {
                           int __q_x;
                           for (__q_x = 0; __q_x < i-1 &&  __stady_pred_5; __q_x++) {
                           __stady_pred_5 = ((*(t+__q_x)) <= (*(t+(__q_x+1))));
                           }
                           }
                           if(!__stady_pred_5)pathcrawler_assert_exception("Loop invariant not established!", 9);if(!((1 <= (i)) && ((i) <= (n))))pathcrawler_assert_exception("Loop invariant not established!", 5);while (1) {
                                                                                        int old_variant_0 = n-i;
                    {
                                                                                        if (! (
                                                                                        i < n)) 
                                                                                        break;
                                                                                        mv = *(
                                                                                        t + i);
                                                                                        j = i;
                                                                                        {
                                                                                        
                                                                                        if(((j))<0)pathcrawler_assert_exception("Variant non positive",3);
                                                                                        int __stady_pred_6 = 1;
                                                                                        {
                                                                                        int __q_k;
                                                                                        for (__q_k = (j); __q_k < (i) &&  __stady_pred_6; __q_k++) {
                                                                                        __stady_pred_6 = ((*(t+__q_k)) > (mv));
                                                                                        }
                                                                                        }
                                                                                        if(!__stady_pred_6)pathcrawler_assert_exception("Loop invariant not established!", 11);if(!((0 <= (j)) && ((j) <= (i))))pathcrawler_assert_exception("Loop invariant not established!", 7);while (1) {
                                                                                        int old_variant_3 = (j);
                    {
                                                                                        if (! (
                                                                                        j > 0)) 
                                                                                        break;
                                                                                        if (
                                                                                        *(
                                                                                        t + (
                                                                                        j - 1)) <= mv) 
                                                                                        break;
                                                                                        *(
                                                                                        t + j) = *(
                                                                                        t + (
                                                                                        j - 1));
                                                                                        j --;
                                                                                        }if(!((0 <= (j)) && ((j) <= (i))))pathcrawler_assert_exception("Loop invariant not preserved!", 7);int __stady_pred_7 = 1;
                                                                                        {
                                                                                        int __q_k;
                                                                                        for (__q_k = (j); __q_k < (i) &&  __stady_pred_7; __q_k++) {
                                                                                        __stady_pred_7 = ((*(t+__q_k)) > (mv));
                                                                                        }
                                                                                        }
                                                                                        if(!__stady_pred_7)pathcrawler_assert_exception("Loop invariant not preserved!", 11);if((old_variant_3)<0)pathcrawler_assert_exception("Variant non positive",3);
                                                                                        if(((j)) >= old_variant_3) pathcrawler_assert_exception("Variant non decreasing",3);
                                                                                        }
                                                                                         
                                                                                        }
                                                                                        *(
                                                                                        t + j) = mv;
                                                                                        i ++;
                                                                                        }if(!((1 <= (i)) && ((i) <= (n))))pathcrawler_assert_exception("Loop invariant not preserved!", 5);int __stady_pred_8 = 1;
                                                                                        {
                                                                                        int __q_x;
                                                                                        for (__q_x = 0; __q_x < i-1 &&  __stady_pred_8; __q_x++) {
                                                                                        __stady_pred_8 = ((*(t+__q_x)) <= (*(t+(__q_x+1))));
                                                                                        }
                                                                                        }
                                                                                        if(!__stady_pred_8)pathcrawler_assert_exception("Loop invariant not preserved!", 9);if((old_variant_0)<0)pathcrawler_assert_exception("Variant non positive",0);
                                                                                        if((n-i) >= old_variant_0) pathcrawler_assert_exception("Variant non decreasing",0);
                                                                                        }
                                                                                         
                        }
                        {
                          int __stady_pred_9 = 1;
                          {
                          int __q_x;
                          for (__q_x = 0; __q_x < old_n-1 &&  __stady_pred_9; __q_x++) {
                          __stady_pred_9 = ((*(old_t+__q_x)) <= (*(old_t+(__q_x+1))));
                          }
                          }
                          if(!__stady_pred_9)pathcrawler_assert_exception("Post-condition!", 10);
                          }
                        free(old_ptr_t);
                        return;
                      }
                    }
[kernel] preprocessing with "gcc -C -E -I.  stady_temp.c"
stady_temp.c:13:[kernel] warning: Calling undeclared function malloc. Old style K&R code?
stady_temp.c:105:[kernel] warning: Calling undeclared function free. Old style K&R code?
[kernel] preprocessing with "gcc -C -E -I. -include /usr/local/share/frama-c/pc/lib/lanceur_deb.h stady_temp.c"
stady_temp.c:13:[kernel] warning: Calling undeclared function malloc. Old style K&R code?
stady_temp.c:105:[kernel] warning: Calling undeclared function free. Old style K&R code?
[pc] analyzing...
[pc] Compiling pathcrawler_stady_temp/lanceur_insertion_sort utilities ...
[pc] Compiling pathcrawler_stady_temp/lanceur_insertion_sort ...
[pc] generating tests...
[pc] Starting lanceur_insertion_sort (isc version)
[pc] Starting lanceur_pathcrawler__insertion_sort_precond (isc version)
[pc] generation finished
[stady] all-paths: true
[stady] 297 test cases
[report] Computing properties status...

--------------------------------------------------------------------------------
--- Properties of Function 'insertion_sort'
--------------------------------------------------------------------------------

[  Valid  ] Post-condition (file tests/insertion_sort/insertion_sort.c, line 9)
            by StaDyPlus.
[    -    ] Assigns (file tests/insertion_sort/insertion_sort.c, line 8)
[  Valid  ] Loop variant at loop (file tests/insertion_sort/insertion_sort.c, line 20)
            by StaDyPlus.
[  Valid  ] Loop variant at loop (file tests/insertion_sort/insertion_sort.c, line 30)
            by StaDyPlus.
[  Valid  ] Invariant (file tests/insertion_sort/insertion_sort.c, line 15)
            by StaDyPlus.
[  Valid  ] Invariant (file tests/insertion_sort/insertion_sort.c, line 16)
            by StaDyPlus.
[  Valid  ] Invariant (file tests/insertion_sort/insertion_sort.c, line 25)
            by StaDyPlus.
[  Valid  ] Invariant (file tests/insertion_sort/insertion_sort.c, line 26)
            by StaDyPlus.
[    -    ] Default behavior
            tried with Frama-C kernel.

--------------------------------------------------------------------------------
--- Status Report Summary
--------------------------------------------------------------------------------
     7 Completely validated
     2 To be validated
     9 Total
--------------------------------------------------------------------------------
